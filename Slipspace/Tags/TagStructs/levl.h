/*
; CONTENT AUTOGENERATED BY CODENAME ATRIOX: PLUGIN CONVERTOR
; CONVERTOR VERSION: 0.4.1
; SOURCE TIMESTAMP: [EXAMPLE]
; SOURCE GAME VERSION: [EXAMPLE]
; SOURCE PLUGIN: levl
; GENERATED TIMESTAMP: 21/08/2023 -> 8:26:25 PM
*/

#include "commons.h"
#pragma pack(push, 1)


// /////////////// //
// FLAG REFERENCES //
// /////////////// //

struct ScenarioFlags{
   uint32_t content;
   bool snap_to_white_at_start() { return ( content  & 0b00000000000000000000000000000001); }
   bool generate_navdata_everywhere() { return ( content  & 0b00000000000000000000000000000010); }
   bool seed_navmesh_with_raycasts_from_above() { return ( content  & 0b00000000000000000000000000000100); }
   bool do_not_strip_unconnected_nav_mesh_faces() { return ( content  & 0b00000000000000000000000000001000); }
   bool map_variant_layer() { return ( content  & 0b00000000000000000000000000010000); }
   bool is_blue_team_mission() { return ( content  & 0b00000000000000000000000000100000); }
   bool is_ds_tag() { return ( content  & 0b00000000000000000000000001000000); }
   bool is_blue_team_mission__cracked_visor_() { return ( content  & 0b00000000000000000000000010000000); }
   bool used_for_spartan_render() { return ( content  & 0b00000000000000000000000100000000); }
   bool is_editor_folder() { return ( content  & 0b00000000000000000000001000000000); }
   bool is_grid_enabled() { return ( content  & 0b00000000000000000000010000000000); }
   bool is_procedurally_generated() { return ( content  & 0b00000000000000000000100000000000); }
   bool exclude_from_default_map_variant() { return ( content  & 0b00000000000000000001000000000000); }
   bool generate_navdata_for_crouching_characters() { return ( content  & 0b00000000000000000010000000000000); }
   bool generate_navdata_on_smaller_areas() { return ( content  & 0b00000000000000000100000000000000); }
   bool limit_forge_editing() { return ( content  & 0b00000000000000001000000000000000); }
   bool acoustics_set_occlusion_to_obstruction() { return ( content  & 0b00000000000000010000000000000000); }
   bool do_not_generate_acoustics_data_tag() { return ( content  & 0b00000000000000100000000000000000); }
};
struct ScenarioRuntimeTriggerVolumeFlags{
   uint32_t content;
   bool has_hard_safe_volume() { return ( content  & 0b00000000000000000000000000000001); }
   bool has_soft_safe_volume() { return ( content  & 0b00000000000000000000000000000010); }
};
struct ScenarioDynamicWorldStateFlags{
   uint16_t content;
   bool Override_Lens_Flare_GUID() { return ( content  & 0b0000000000000001); }
};
struct EnableDynamicWindFlag{
   uint8_t content;
   bool Enabled() { return ( content  & 0b00000001); }
};
struct EnableInteractionFlag{
   uint8_t content;
   bool Enabled() { return ( content  & 0b00000001); }
};
struct SpecControlSettingsMatrixBool__Flags{
   uint32_t content;
   bool _1_Player() { return ( content  & 0b00000000000000000000000000000001); }
   bool _2_Players() { return ( content  & 0b00000000000000000000000000000010); }
   bool _3_Players() { return ( content  & 0b00000000000000000000000000000100); }
   bool _4_Players() { return ( content  & 0b00000000000000000000000000001000); }
};
struct LayerUsageFlags{
   uint8_t content;
   bool HLOD_Root() { return ( content  & 0b00000001); }
};
struct ScenarioStructureBspReferenceFlags{
   uint16_t content;
   bool unused_bit() { return ( content  & 0b0000000000000001); }
   bool vista_bsp() { return ( content  & 0b0000000000000010); }
   bool isolated_nav_generation() { return ( content  & 0b0000000000000100); }
   bool custom_gravity_scale() { return ( content  & 0b0000000000001000); }
   bool disable_streaming_subregions() { return ( content  & 0b0000000000010000); }
   bool automatically_generated() { return ( content  & 0b0000000000100000); }
   bool hlod_bsp() { return ( content  & 0b0000000001000000); }
   bool may_not_contain_terrain() { return ( content  & 0b0000000010000000); }
   bool exclude_from_far_field() { return ( content  & 0b0000000100000000); }
   bool ignore_bsp_in_regions() { return ( content  & 0b0000001000000000); }
   bool isolated_acoustics_generation() { return ( content  & 0b0000010000000000); }
   bool disable_acoustics_generation() { return ( content  & 0b0000100000000000); }
   bool forgeable_bsp() { return ( content  & 0b0001000000000000); }
};
struct ScenarioZoneSetBitFlag{
   uint32_t content;
   bool interal_zone_set() { return ( content  & 0b00000000000000000000000000000001); }
   bool disable_sky_clearing() { return ( content  & 0b00000000000000000000000000000010); }
   bool override_sky_clear_color() { return ( content  & 0b00000000000000000000000000000100); }
   bool use_BSP_streaming() { return ( content  & 0b00000000000000000000000000001000); }
   bool ignored_for_nav_data_generation() { return ( content  & 0b00000000000000000000000000010000); }
   bool disable_terrain() { return ( content  & 0b00000000000000000000000000100000); }
};
struct TriggerVolumeFlags{
   uint8_t content;
   bool don_t_kill_immediately() { return ( content  & 0b00000001); }
   bool only_kill_players() { return ( content  & 0b00000010); }
   bool don_t_kill_immediately__and_don_t_apply_to_air_vehicles() { return ( content  & 0b00000100); }
   bool teleport_vehicles() { return ( content  & 0b00001000); }
   bool prevent_spawn_in_vehicle() { return ( content  & 0b00010000); }
   bool only_kill_game_objects() { return ( content  & 0b00100000); }
   bool don_t_apply_to_air_vehicles() { return ( content  & 0b01000000); }
};
struct ScenarioZoneSetSwitchTriggerVolumeFlags{
   uint16_t content;
   bool teleport_vehicles() { return ( content  & 0b0000000000000001); }
};
struct RuntimeLayerFlags{
   uint32_t content;
   bool Initially_Active() { return ( content  & 0b00000000000000000000000000000001); }
   bool Stream_With_Bsps() { return ( content  & 0b00000000000000000000000000000010); }
   bool Stream_Atomically() { return ( content  & 0b00000000000000000000000000000100); }
   bool Contains_unsupported_objects() { return ( content  & 0b00000000000000000000000000001000); }
   bool Contains_always_placed_objects() { return ( content  & 0b00000000000000000000000000010000); }
   bool Stream_With_Target_Bsp() { return ( content  & 0b00000000000000000000000000100000); }
};
struct TagGraph__TagGraphBoolVariableValue{
   uint8_t content;
   bool value() { return ( content  & 0b00000001); }
};
struct ScenarioDeviceGroupFlags{
   uint32_t content;
   bool can_change_only_once() { return ( content  & 0b00000000000000000000000000000001); }
};
struct i343__Objects__NodeGraphPlacement__NodeGraphPlacementFlags{
   uint32_t content;
   bool Subtract() { return ( content  & 0b00000000000000000000000000000001); }
   bool OnAllBsps() { return ( content  & 0b00000000000000000000000000000010); }
};
struct ScenarioEffectPlacement__ScenarioEffectPlacementFlags{
   uint8_t content;
   bool Start_Disabled() { return ( content  & 0b00000001); }
};
struct ScenarioAttachedLightCone__ScenarioAttachedLightConeFlags{
   uint8_t content;
   bool Start_Disabled() { return ( content  & 0b00000001); }
};
struct SoundPlacementLayerFlags{
   uint8_t content;
   bool Subtract() { return ( content  & 0b00000001); }
   bool On_all_bsps() { return ( content  & 0b00000010); }
};
struct SoundPlacementRuntimeFlags{
   uint8_t content;
   bool Don_t_create_automatically() { return ( content  & 0b00000001); }
   bool Movement_radius_controls_loop_start_stop() { return ( content  & 0b00000010); }
   bool Tag_Processed() { return ( content  & 0b00000100); }
};
struct EffectPlacementFlags{
   uint16_t content;
   bool Don_t_create_automatically() { return ( content  & 0b0000000000000001); }
   bool Loop() { return ( content  & 0b0000000000000010); }
   bool Mute() { return ( content  & 0b0000000000000100); }
   bool Subtracted() { return ( content  & 0b0000000000001000); }
   bool Dynamic_Scaling() { return ( content  & 0b0000000000010000); }
   bool On_All_Bsps() { return ( content  & 0b0000000000100000); }
};
struct HlodVolumeFlags{
   uint8_t content;
   bool Do_Not_Nest_under_BSP_Auto_HLOD() { return ( content  & 0b00000001); }
};
struct WindInfluencerVolumeMode{
   uint32_t content;
   bool Advanced() { return ( content  & 0b00000000000000000000000000000001); }
};
struct i343__Wind__WindInfluencerVolumeFlags{
   uint32_t content;
   bool Disable_Volume() { return ( content  & 0b00000000000000000000000000000001); }
   bool Snap_wind_direction_to_local_coordinates() { return ( content  & 0b00000000000000000000000000000010); }
   bool Use_Noise_Gusting() { return ( content  & 0b00000000000000000000000000000100); }
   bool Use_In_Wind_Simulation() { return ( content  & 0b00000000000000000000000000001000); }
   bool Overwrite_wind_values_inside_the_volume() { return ( content  & 0b00000000000000000000000000010000); }
};
struct PruningVolumeTypesFlags{
   uint16_t content;
   bool Decorator() { return ( content  & 0b0000000000000001); }
   bool Prefab_Placement() { return ( content  & 0b0000000000000010); }
   bool Crate() { return ( content  & 0b0000000000000100); }
   bool Scenery() { return ( content  & 0b0000000000001000); }
   bool Machine() { return ( content  & 0b0000000000010000); }
   bool Spawn_Point() { return ( content  & 0b0000000000100000); }
   bool Light() { return ( content  & 0b0000000001000000); }
   bool Effect_Placement() { return ( content  & 0b0000000010000000); }
};
struct i343__AI__FortificationUseDirectionVectors{
   uint16_t content;
   bool Use_Direction_Vector() { return ( content  & 0b0000000000000001); }
};
struct i343__AI__AiMarkupFlavors{
   uint16_t content;
   bool Fortification() { return ( content  & 0b0000000000000001); }
   bool High_Ground() { return ( content  & 0b0000000000000010); }
   bool Flee_Hide() { return ( content  & 0b0000000000000100); }
   bool Low_Priority() { return ( content  & 0b0000000000001000); }
   bool No_Drive() { return ( content  & 0b0000000000010000); }
   bool Wander() { return ( content  & 0b0000000000100000); }
   bool Damage() { return ( content  & 0b0000000001000000); }
   bool Path_Avoidance() { return ( content  & 0b0000000010000000); }
   bool Disallow_Friendly_Followers() { return ( content  & 0b0000000100000000); }
};
struct i343__AI__AIMarkupVolumeFlags{
   uint16_t content;
   bool Subtract() { return ( content  & 0b0000000000000001); }
};
struct i343__AI__AIMarkupPointFlags{
   uint8_t content;
   bool Loop_animation() { return ( content  & 0b00000001); }
   bool Subtract() { return ( content  & 0b00000010); }
};
struct i343__Bots__BotMarkupPointFlags{
   uint8_t content;
   bool Subtract() { return ( content  & 0b00000001); }
};
struct i343__AI__EncounterZoneFlags{
   uint16_t content;
   bool Drivable_Zone() { return ( content  & 0b0000000000000001); }
   bool Use_Initial_Actor_Count_as_Max_Assignment_Limit() { return ( content  & 0b0000000000000010); }
   bool Player_Raises_Relevance() { return ( content  & 0b0000000000000100); }
   bool Player_Lowers_Relevance() { return ( content  & 0b0000000000001000); }
   bool Blind() { return ( content  & 0b0000000000010000); }
   bool Deaf() { return ( content  & 0b0000000000100000); }
   bool Braindead() { return ( content  & 0b0000000001000000); }
   bool Magic_Player_Sight() { return ( content  & 0b0000000010000000); }
   bool Subtract() { return ( content  & 0b0000000100000000); }
   bool Don_t_Auto_Assign_Squad_Spawners() { return ( content  & 0b0000001000000000); }
};
struct i343__AI__CompositeFlags{
   uint16_t content;
   bool Respects_Initial_Placement() { return ( content  & 0b0000000000000001); }
};
struct i343__AI__VehicleTypeFilterFlags{
   uint16_t content;
   bool Has_Vehicle() { return ( content  & 0b0000000000000001); }
};
struct i343__AI__EncounterTreeNodeFlags{
   uint16_t content;
   bool Subtract() { return ( content  & 0b0000000000000001); }
};
struct i343__AI__EncounterBehaviorTreeFlags{
   uint16_t content;
   bool Subtract() { return ( content  & 0b0000000000000001); }
   bool Use_Initial_Actor_Count_as_Max_Assignment_Limit() { return ( content  & 0b0000000000000010); }
};
struct i343__AI__SquadSpawnerFlags{
   uint16_t content;
   bool Subtract() { return ( content  & 0b0000000000000001); }
   bool Disable_Spawn_Effect() { return ( content  & 0b0000000000000010); }
   bool Unrecruitable() { return ( content  & 0b0000000000000100); }
};
struct i343__AI__ReinforcementPointFlags{
   uint16_t content;
   bool Subtract() { return ( content  & 0b0000000000000001); }
};
struct i343__ActivationVolumeFlags{
   uint8_t content;
   bool Runs_on_Server() { return ( content  & 0b00000001); }
   bool Runs_on_Client() { return ( content  & 0b00000010); }
   bool Callback_per_Player_View() { return ( content  & 0b00000100); }
};
struct i343__Narrative__MomentFlags{
   uint8_t content;
   bool Lock_map_menu_while_active() { return ( content  & 0b00000001); }
};
struct ScenarioSoftCeilingFlags{
   uint16_t content;
   bool ignore_bipeds() { return ( content  & 0b0000000000000001); }
   bool ignore_vehicles() { return ( content  & 0b0000000000000010); }
   bool ignore_camera() { return ( content  & 0b0000000000000100); }
   bool ignore_huge_vehicles() { return ( content  & 0b0000000000001000); }
};
struct ScenarioSoftCeilingRuntimeFlags{
   uint16_t content;
   bool ignore_camera() { return ( content  & 0b0000000000000001); }
};
struct AcousticsTagZone__AcousticZonePlacementFlags{
   uint8_t content;
   bool Kit_Subtract() { return ( content  & 0b00000001); }
   bool Tag_Processed() { return ( content  & 0b00000010); }
   bool On_All_Bsps() { return ( content  & 0b00000100); }
};
struct AcousticsTagZone__AcousticZoneConfigFlags{
   uint8_t content;
   bool Inherit_Base_Air() { return ( content  & 0b00000001); }
};
struct AcousticsTagPortal__AcousticPortalFlags{
   uint16_t content;
   bool Do_Not_Use_Mask() { return ( content  & 0b0000000000000001); }
   bool Is_A_Door() { return ( content  & 0b0000000000000010); }
   bool Centre_Opening() { return ( content  & 0b0000000000000100); }
   bool Affects_Shape() { return ( content  & 0b0000000000001000); }
   bool Affects_Transmissivity() { return ( content  & 0b0000000000010000); }
   bool Ray_Cast_Thru() { return ( content  & 0b0000000000100000); }
   bool Kit_Subtract() { return ( content  & 0b0000000001000000); }
   bool On_All_Bsps() { return ( content  & 0b0000000010000000); }
   bool Check_Portal_Is_Geo_Blocked() { return ( content  & 0b0000000100000000); }
};
struct scenario_decal__c_decalPlacementFlags{
   uint8_t content;
   bool force_planar() { return ( content  & 0b00000001); }
   bool project_UVs() { return ( content  & 0b00000010); }
};
struct c_squad_flags{
   uint32_t content;
   bool unused() { return ( content  & 0b00000000000000000000000000000001); }
   bool blind() { return ( content  & 0b00000000000000000000000000000010); }
   bool deaf() { return ( content  & 0b00000000000000000000000000000100); }
   bool braindead() { return ( content  & 0b00000000000000000000000000001000); }
   bool initially_placed() { return ( content  & 0b00000000000000000000000000010000); }
   bool units_not_enterable_by_player() { return ( content  & 0b00000000000000000000000000100000); }
   bool fireteam_absorber() { return ( content  & 0b00000000000000000000000001000000); }
   bool squad_is_runtime_DO_NOT_USE_() { return ( content  & 0b00000000000000000000000010000000); }
   bool no_wave_spawn() { return ( content  & 0b00000000000000000000000100000000); }
   bool squad_is_musketeer() { return ( content  & 0b00000000000000000000001000000000); }
};
struct AIZoneFlags{
   uint16_t content;
   bool giants_zone() { return ( content  & 0b0000000000000001); }
};
struct UserHintGeometryFlags{
   uint16_t content;
   bool bidirectional() { return ( content  & 0b0000000000000001); }
};
struct UserHintJumpTypeFlags{
   uint16_t content;
   bool walk_down() { return ( content  & 0b0000000000000001); }
   bool bots_can_t_use_if_slowed() { return ( content  & 0b0000000000000010); }
   bool cheap_jump() { return ( content  & 0b0000000000000100); }
};
struct AIPointSetFlags{
   uint32_t content;
   bool manual_reference_frame() { return ( content  & 0b00000000000000000000000000000001); }
   bool turret_deployment() { return ( content  & 0b00000000000000000000000000000010); }
   bool giant_set() { return ( content  & 0b00000000000000000000000000000100); }
   bool patrol() { return ( content  & 0b00000000000000000000000000001000); }
   bool invalid_sector_refs() { return ( content  & 0b00000000000000000000000000010000); }
};
struct AIPointSetTraversalFlags{
   uint32_t content;
   bool curve_the_traversal_path() { return ( content  & 0b00000000000000000000000000000001); }
   bool loop_when_end_is_reached() { return ( content  & 0b00000000000000000000000000000010); }
};
struct ScenarioCutsceneCameraPointFlags{
   uint16_t content;
   bool edit_as_relative() { return ( content  & 0b0000000000000001); }
};
struct EnableFlag{
   uint8_t content;
   bool Enable() { return ( content  & 0b00000001); }
};
struct c_flock_instance_flags{
   uint16_t content;
   bool Always_placed__Off_Bsp_flock_() { return ( content  & 0b0000000000000001); }
   bool hard_boundaries_on_volume() { return ( content  & 0b0000000000000010); }
   bool flock_initially_stopped() { return ( content  & 0b0000000000000100); }
   bool flock_initially_perched() { return ( content  & 0b0000000000001000); }
   bool one_creature_per_source() { return ( content  & 0b0000000000010000); }
   bool scared_by_AI() { return ( content  & 0b0000000000100000); }
   bool creatures_respect_kill_volumes() { return ( content  & 0b0000000001000000); }
   bool flock_is_autogenerated() { return ( content  & 0b0000000010000000); }
   bool Placed_by_kit() { return ( content  & 0b0000000100000000); }
   bool Use_constant_throttle() { return ( content  & 0b0000001000000000); }
   bool Choose_random_destination_if_next_destination_is_unset() { return ( content  & 0b0000010000000000); }
   bool If_boids_are_grazing__will_flee_if_scared() { return ( content  & 0b0000100000000000); }
   bool Minimize_randomness_in_destinations() { return ( content  & 0b0001000000000000); }
};
struct GeneralOverrideFlags{
   uint8_t content;
   bool Boid_Count() { return ( content  & 0b00000001); }
   bool Initial_Behavior() { return ( content  & 0b00000010); }
   bool Second_Behavior() { return ( content  & 0b00000100); }
   bool Reaction_Behavior() { return ( content  & 0b00001000); }
   bool Reaction_Navigation_Behavior() { return ( content  & 0b00010000); }
   bool Second_Reaction_Behavior() { return ( content  & 0b00100000); }
   bool Second_Reaction_Navigation_Behavior() { return ( content  & 0b01000000); }
};
struct CirclingOverrideFlags{
   uint8_t content;
   bool Inner_Radius() { return ( content  & 0b00000001); }
   bool Cross_Section_Radius() { return ( content  & 0b00000010); }
   bool Direction() { return ( content  & 0b00000100); }
};
struct PerchingWanderingOverrideFlags{
   uint8_t content;
   bool Spawn_Cylinder_Radius() { return ( content  & 0b00000001); }
   bool Spawn_Cylinder_Height() { return ( content  & 0b00000010); }
};
struct WanderingBehaviorFlags{
   uint8_t content;
   bool Wander_Randomly() { return ( content  & 0b00000001); }
};
struct WanderingOverrideFlags{
   uint8_t content;
   bool Wandering_Time() { return ( content  & 0b00000001); }
   bool Flags() { return ( content  & 0b00000010); }
};
struct SpawnSettingsFlags{
   uint8_t content;
   bool Always_replenish_boids() { return ( content  & 0b00000001); }
   bool Randomize_Spawn_Point_Height() { return ( content  & 0b00000010); }
   bool Used_in_kits__allow_name_duplication_() { return ( content  & 0b00000100); }
   bool Randomize_Creature_Variant() { return ( content  & 0b00001000); }
};
struct SpawnOverrideFlags{
   uint8_t content;
   bool Spawn_Point_Count() { return ( content  & 0b00000001); }
   bool Spawn_Priority() { return ( content  & 0b00000010); }
   bool Disable_Backward_Flock_Relevancy_Reduce() { return ( content  & 0b00000100); }
   bool Generate_Spawn_Point_for_Each_Boid() { return ( content  & 0b00001000); }
   bool Production_Frequency_Bounds() { return ( content  & 0b00010000); }
};
struct s_scenario_editor_folder__ModuleFlags{
   uint8_t content;
   bool is_kit() { return ( content  & 0b00000001); }
   bool is_streamed() { return ( content  & 0b00000010); }
   bool is_from_map_variant() { return ( content  & 0b00000100); }
};
struct c_objective_flags{
   uint16_t content;
   bool use_front_area_selection() { return ( content  & 0b0000000000000001); }
   bool use_players_as_front() { return ( content  & 0b0000000000000010); }
   bool inhibit_vehicle_entry() { return ( content  & 0b0000000000000100); }
};
struct ComposerShowStageFlags{
   uint32_t content;
   bool Detect_If_Should_Use_Stage_Volume() { return ( content  & 0b00000000000000000000000000000001); }
   bool Use_Stage_Volume() { return ( content  & 0b00000000000000000000000000000010); }
};
struct StageVolumeFlags{
   uint32_t content;
   bool Dead_Bodies() { return ( content  & 0b00000000000000000000000000000001); }
   bool Dynamic_Objects() { return ( content  & 0b00000000000000000000000000000010); }
   bool Carried_Items() { return ( content  & 0b00000000000000000000000000000100); }
   bool Vehicles() { return ( content  & 0b00000000000000000000000000001000); }
   bool Enemy_AI() { return ( content  & 0b00000000000000000000000000010000); }
   bool Disallowed_Objects() { return ( content  & 0b00000000000000000000000000100000); }
};
struct StageStreamingFlags{
   uint8_t content;
   bool Manual_Streaming() { return ( content  & 0b00000001); }
   bool Pin_On_Level_Load() { return ( content  & 0b00000010); }
   bool Preload_On_Layer_Load() { return ( content  & 0b00000100); }
   bool Unload_When_Finished() { return ( content  & 0b00001000); }
   bool Use_Volume_for_Position() { return ( content  & 0b00010000); }
};
struct ScenarioPrefabPlacementFlags{
   uint16_t content;
   bool Disable_bullet_collision() { return ( content  & 0b0000000000000001); }
   bool Disable_play_collision() { return ( content  & 0b0000000000000010); }
   bool Disable_render_collision() { return ( content  & 0b0000000000000100); }
   bool Override_prefab_probe_grid_capture_offset() { return ( content  & 0b0000000000001000); }
   bool PVS_Always_use_LOD0() { return ( content  & 0b0000000000010000); }
   bool PVS_Always_visible() { return ( content  & 0b0000000000100000); }
   bool PVS_Don_t_use_as_an_occluder() { return ( content  & 0b0000000001000000); }
   bool Subtract_override_from_kit() { return ( content  & 0b0000000010000000); }
   bool Generate_decorators() { return ( content  & 0b0000000100000000); }
   bool Is_Trigger_Volume() { return ( content  & 0b0000001000000000); }
};
struct AirProbeRegionVolumeFlags{
   uint16_t content;
   bool Enable_Terrain_Following() { return ( content  & 0b0000000000000001); }
   bool Disable_Occlusion() { return ( content  & 0b0000000000000010); }
};
struct CubemapFlagsClass{
   uint32_t content;
   bool Enable_Intensity_Correction() { return ( content  & 0b00000000000000000000000000000001); }
   bool Capture_With_Effects() { return ( content  & 0b00000000000000000000000000000010); }
   bool Affects_Adjacent_Bsps() { return ( content  & 0b00000000000000000000000000000100); }
   bool Capture_Dynamic_Objects() { return ( content  & 0b00000000000000000000000000001000); }
};
struct c_scenario_object_placement_flags{
   uint32_t content;
   bool not_automatically() { return ( content  & 0b00000000000000000000000000000001); }
   bool unused0() { return ( content  & 0b00000000000000000000000000000010); }
   bool unused1() { return ( content  & 0b00000000000000000000000000000100); }
   bool unused2() { return ( content  & 0b00000000000000000000000000001000); }
   bool lock_type_to_env__object() { return ( content  & 0b00000000000000000000000000010000); }
   bool lock_transform_to_env__object() { return ( content  & 0b00000000000000000000000000100000); }
   bool never_placed() { return ( content  & 0b00000000000000000000000001000000); }
   bool lock_name_to_env__object() { return ( content  & 0b00000000000000000000000010000000); }
   bool create_at_rest() { return ( content  & 0b00000000000000000000000100000000); }
   bool store_orientations() { return ( content  & 0b00000000000000000000001000000000); }
   bool startup() { return ( content  & 0b00000000000000000000010000000000); }
   bool attach_physically() { return ( content  & 0b00000000000000000000100000000000); }
   bool attach_with_scale() { return ( content  & 0b00000000000000000001000000000000); }
   bool no_parent_lighting() { return ( content  & 0b00000000000000000010000000000000); }
   bool disable_opportunity() { return ( content  & 0b00000000000000000100000000000000); }
   bool Subtract() { return ( content  & 0b00000000000000001000000000000000); }
   bool override_CVW_lighting() { return ( content  & 0b00000000000000010000000000000000); }
   bool override_CVW_lighting___disable_CVW_for_this_placement() { return ( content  & 0b00000000000000100000000000000000); }
   bool client_only_no_relevancy() { return ( content  & 0b00000000000001000000000000000000); }
};
struct c_scenario_object_gravity_flags{
   uint8_t content;
   bool apply_override() { return ( content  & 0b00000001); }
   bool apply_to_children_also() { return ( content  & 0b00000010); }
};
struct ScenarioObjectScriptFlags{
   uint8_t content;
   bool scripts_disabled() { return ( content  & 0b00000001); }
   bool use_override_lists() { return ( content  & 0b00000010); }
   bool scripts_always_run() { return ( content  & 0b00000100); }
};
struct TransformFlags{
   uint16_t content;
   bool mirrored() { return ( content  & 0b0000000000000001); }
};
struct c_scenario_object_navmesh_flags{
   uint8_t content;
   bool children_inherit_navmesh_interaction() { return ( content  & 0b00000001); }
   bool navmesh_always_loaded() { return ( content  & 0b00000010); }
};
struct c_scenario_object_layer_flags{
   uint8_t content;
   bool Layer_is_map_variant() { return ( content  & 0b00000001); }
};
struct c_object_change_color_flags{
   uint8_t content;
   bool primary() { return ( content  & 0b00000001); }
   bool secondary() { return ( content  & 0b00000010); }
   bool tertiary() { return ( content  & 0b00000100); }
   bool quaternary() { return ( content  & 0b00001000); }
};
struct c_multiplayer_object_placement_spawn_flags{
   uint16_t content;
   bool unique_spawn() { return ( content  & 0b0000000000000001); }
   bool not_initially_placed() { return ( content  & 0b0000000000000010); }
   bool Deprecated() { return ( content  & 0b0000000000000100); }
   bool is_shortcut_object() { return ( content  & 0b0000000000001000); }
   bool can_spawn_on_bipeds() { return ( content  & 0b0000000000010000); }
   bool does_not_respawn() { return ( content  & 0b0000000000100000); }
   bool abandonment_timer_always_active() { return ( content  & 0b0000000001000000); }
   bool override_candy_monitor_defaults() { return ( content  & 0b0000000010000000); }
   bool tracked_by_candy_monitor() { return ( content  & 0b0000000100000000); }
};
struct c_teleporter_passability{
   uint8_t content;
   bool disallow_players() { return ( content  & 0b00000001); }
   bool allow_light_land_vehicles() { return ( content  & 0b00000010); }
   bool allow_heavy_land_vehicles() { return ( content  & 0b00000100); }
   bool allow_flying_vehicles() { return ( content  & 0b00001000); }
   bool allow_projectiles() { return ( content  & 0b00010000); }
};
struct MultiplayerObjectPropertyFlags{
   uint8_t content;
   bool Deny_Spawn_Points() { return ( content  & 0b00000001); }
   bool Apply_Spawn_Zone_Properties_To_Opposing_Teams() { return ( content  & 0b00000010); }
   bool Apply_Spawn_Zone_Properties_To_Initial_Spawn() { return ( content  & 0b00000100); }
   bool WeaponPad_Initially_Disabled() { return ( content  & 0b00001000); }
   bool Ignore_Spawn_Zone_Falloff_Function() { return ( content  & 0b00010000); }
};
struct MultiplayerProperties__MapZoneFlags{
   uint8_t content;
   bool Zero() { return ( content  & 0b00000001); }
   bool One() { return ( content  & 0b00000010); }
   bool Two() { return ( content  & 0b00000100); }
   bool Three() { return ( content  & 0b00001000); }
   bool Four() { return ( content  & 0b00010000); }
   bool Five() { return ( content  & 0b00100000); }
   bool Six() { return ( content  & 0b01000000); }
   bool Seven() { return ( content  & 0b10000000); }
};
struct MultiplayerProperties__MapZoneConfigurationFlags{
   uint8_t content;
   bool Alpha() { return ( content  & 0b00000001); }
   bool Bravo() { return ( content  & 0b00000010); }
   bool Charlie() { return ( content  & 0b00000100); }
   bool Delta() { return ( content  & 0b00001000); }
   bool Echo() { return ( content  & 0b00010000); }
   bool Foxtrot() { return ( content  & 0b00100000); }
   bool Golf() { return ( content  & 0b01000000); }
   bool Hotel() { return ( content  & 0b10000000); }
};
struct ScenarioUnitFlags{
   uint32_t content;
   bool dead() { return ( content  & 0b00000000000000000000000000000001); }
   bool opened() { return ( content  & 0b00000000000000000000000000000010); }
   bool not_enterable_by_player() { return ( content  & 0b00000000000000000000000000000100); }
};
struct ScenarioEquipmentFlags{
   uint32_t content;
   bool OBSOLETE0() { return ( content  & 0b00000000000000000000000000000001); }
   bool OBSOLETE1() { return ( content  & 0b00000000000000000000000000000010); }
   bool does_accelerate__moves_due_to_explosions_() { return ( content  & 0b00000000000000000000000000000100); }
};
struct ScenarioDeviceFlags{
   uint32_t content;
   bool initially_open__1_0_() { return ( content  & 0b00000000000000000000000000000001); }
   bool initially_off__0_0_() { return ( content  & 0b00000000000000000000000000000010); }
   bool can_change_only_once() { return ( content  & 0b00000000000000000000000000000100); }
   bool position_reversed() { return ( content  & 0b00000000000000000000000000001000); }
   bool not_usable_from_any_side() { return ( content  & 0b00000000000000000000000000010000); }
   bool closes_without_power() { return ( content  & 0b00000000000000000000000000100000); }
};
struct DeviceMachineFlags{
   uint32_t content;
   bool does_not_operate_automatically() { return ( content  & 0b00000000000000000000000000000001); }
   bool one_sided() { return ( content  & 0b00000000000000000000000000000010); }
   bool never_appears_locked() { return ( content  & 0b00000000000000000000000000000100); }
   bool opened_by_melee_attack() { return ( content  & 0b00000000000000000000000000001000); }
   bool one_sided_for_player() { return ( content  & 0b00000000000000000000000000010000); }
   bool does_not_close_automatically() { return ( content  & 0b00000000000000000000000000100000); }
   bool ignores_player() { return ( content  & 0b00000000000000000000000001000000); }
   bool ignores_ai() { return ( content  & 0b00000000000000000000000010000000); }
};
struct ScenarioControlFlags{
   uint32_t content;
   bool usable_from_both_sides() { return ( content  & 0b00000000000000000000000000000001); }
};
struct ScenarioDispenserFlags{
   uint8_t content;
   bool usable_from_front_only() { return ( content  & 0b00000001); }
};
struct i343__AI__DecoratorFlags{
   uint16_t content;
   bool Invert() { return ( content  & 0b0000000000000001); }
   bool LatchToTrue() { return ( content  & 0b0000000000000010); }
   bool LatchToFalse() { return ( content  & 0b0000000000000100); }
};
struct i343__AI__AirDrop__SquadSpawnerOptionsFlags{
   uint8_t content;
   bool Use_Spawner_Position_and_Orientation_for_Ship() { return ( content  & 0b00000001); }
};
struct i343__Narrative__BeatFlags{
   uint8_t content;
   bool Lock_Narrative_Moment_Activation() { return ( content  & 0b00000001); }
   bool Dev_Only_Disabled() { return ( content  & 0b00000010); }
   bool Only_Once_and_Global() { return ( content  & 0b00000100); }
   bool Non_Global() { return ( content  & 0b00001000); }
   bool Global() { return ( content  & 0b00010000); }
};
struct c_spawn_formation_flags{
   uint8_t content;
   bool no_vertical_offset_for_flying() { return ( content  & 0b00000001); }
};
struct AISpawnPointFlags{
   uint16_t content;
   bool infection_form_explode() { return ( content  & 0b0000000000000001); }
   bool n_a() { return ( content  & 0b0000000000000010); }
   bool always_place() { return ( content  & 0b0000000000000100); }
   bool initially_hidden() { return ( content  & 0b0000000000001000); }
   bool vehicle_destroyed_when_no_driver() { return ( content  & 0b0000000000010000); }
   bool vehicle_open() { return ( content  & 0b0000000000100000); }
   bool actor_surface_emerge() { return ( content  & 0b0000000001000000); }
   bool actor_surface_emerge_auto() { return ( content  & 0b0000000010000000); }
   bool actor_surface_emerge_upwards() { return ( content  & 0b0000000100000000); }
};
struct AIAreaFlags{
   uint32_t content;
   bool vehicle_area() { return ( content  & 0b00000000000000000000000000000001); }
   bool wall_climb() { return ( content  & 0b00000000000000000000000000000010); }
   bool manual_reference_frame() { return ( content  & 0b00000000000000000000000000000100); }
   bool turret_deployment_area() { return ( content  & 0b00000000000000000000000000001000); }
   bool invalid_sector_def() { return ( content  & 0b00000000000000000000000000010000); }
};
struct AIAreaGenerateFlags{
   uint32_t content;
   bool exclude_cover() { return ( content  & 0b00000000000000000000000000000001); }
   bool ignore_existing() { return ( content  & 0b00000000000000000000000000000010); }
   bool generate_radial() { return ( content  & 0b00000000000000000000000000000100); }
   bool don_t_stagger() { return ( content  & 0b00000000000000000000000000001000); }
   bool airborne() { return ( content  & 0b00000000000000000000000000010000); }
   bool airborne_stagger() { return ( content  & 0b00000000000000000000000000100000); }
   bool continue_casting() { return ( content  & 0b00000000000000000000000001000000); }
};
struct ParallelogramInvalidFlags{
   uint16_t content;
   bool _1() { return ( content  & 0b0000000000000001); }
   bool _2() { return ( content  & 0b0000000000000010); }
   bool _3() { return ( content  & 0b0000000000000100); }
   bool _4() { return ( content  & 0b0000000000001000); }
};
struct c_flock_source_flags{
   uint32_t content;
   bool ground_source() { return ( content  & 0b00000000000000000000000000000001); }
   bool position_locked() { return ( content  & 0b00000000000000000000000000000010); }
   bool random_orientation() { return ( content  & 0b00000000000000000000000000000100); }
};
struct c_task_flags{
   uint16_t content;
   bool latch_ON() { return ( content  & 0b0000000000000001); }
   bool latch_OFF() { return ( content  & 0b0000000000000010); }
   bool gate() { return ( content  & 0b0000000000000100); }
   bool single_use() { return ( content  & 0b0000000000001000); }
   bool suppress_combat() { return ( content  & 0b0000000000010000); }
   bool suppress_active_camo() { return ( content  & 0b0000000000100000); }
   bool blind() { return ( content  & 0b0000000001000000); }
   bool deaf() { return ( content  & 0b0000000010000000); }
   bool braindead() { return ( content  & 0b0000000100000000); }
   bool magic_player_sight() { return ( content  & 0b0000001000000000); }
   bool DISABLE() { return ( content  & 0b0000010000000000); }
   bool reverse_direction() { return ( content  & 0b0000100000000000); }
   bool invert_filter_logic() { return ( content  & 0b0001000000000000); }
};
struct c_behavior_inhibit_flags{
   uint16_t content;
   bool Cover() { return ( content  & 0b0000000000000001); }
   bool Retreat() { return ( content  & 0b0000000000000010); }
   bool Vehicles__All_() { return ( content  & 0b0000000000000100); }
   bool Grenades() { return ( content  & 0b0000000000001000); }
   bool Berserk() { return ( content  & 0b0000000000010000); }
   bool Equipment() { return ( content  & 0b0000000000100000); }
   bool Object_Interaction() { return ( content  & 0b0000000001000000); }
   bool Turrets() { return ( content  & 0b0000000010000000); }
   bool Vehicles__Non_Turrets_() { return ( content  & 0b0000000100000000); }
};
struct GameDifficultyFlags{
   uint16_t content;
   bool easy() { return ( content  & 0b0000000000000001); }
   bool normal() { return ( content  & 0b0000000000000010); }
   bool heroic() { return ( content  & 0b0000000000000100); }
   bool legendary() { return ( content  & 0b0000000000001000); }
};
struct c_task_follow_players{
   uint16_t content;
   bool player_0() { return ( content  & 0b0000000000000001); }
   bool player_1() { return ( content  & 0b0000000000000010); }
   bool player_2() { return ( content  & 0b0000000000000100); }
   bool player_3() { return ( content  & 0b0000000000001000); }
};
struct task_runtime_flags{
   uint16_t content;
   bool area_connectivity_valid() { return ( content  & 0b0000000000000001); }
};
struct c_filter_flags{
   uint16_t content;
   bool exclusive() { return ( content  & 0b0000000000000001); }
};
struct i343__HexGrid__HexSideHiddenFlags{
   uint8_t content;
   bool side_0() { return ( content  & 0b00000001); }
   bool side_1() { return ( content  & 0b00000010); }
   bool side_2() { return ( content  & 0b00000100); }
   bool side_3() { return ( content  & 0b00001000); }
   bool side_4() { return ( content  & 0b00010000); }
   bool side_5() { return ( content  & 0b00100000); }
   bool top_cap() { return ( content  & 0b01000000); }
   bool bottom_cap() { return ( content  & 0b10000000); }
};
struct LightDefinition__LightAttenuationFlags{
   uint8_t content;
   bool Sync_Light_Energy_and_Near_Attenuation() { return ( content  & 0b00000001); }
   bool Sync_Light_Energy_and_Far_Attenuation() { return ( content  & 0b00000010); }
};
struct LightDefinitionFlags{
   uint32_t content;
   bool dont_render_splitscreen() { return ( content  & 0b00000000000000000000000000000001); }
   bool render_in_multiplayer_override() { return ( content  & 0b00000000000000000000000000000010); }
   bool always_on_for_weapon() { return ( content  & 0b00000000000000000000000000000100); }
   bool induces_translucency_in_subsurface_scattering_materials() { return ( content  & 0b00000000000000000000000000001000); }
   bool ignore_optimization_and_force_update_every_frame() { return ( content  & 0b00000000000000000000000000010000); }
   bool disable_shadow_on_particles() { return ( content  & 0b00000000000000000000000000100000); }
};
struct i343__SpartanTracking__ObjectDefinition__Flags{
   uint8_t content;
   bool trackable() { return ( content  & 0b00000001); }
   bool enabled_by_default() { return ( content  & 0b00000010); }
   bool outline() { return ( content  & 0b00000100); }
   bool immediate_response() { return ( content  & 0b00001000); }
   bool follow_offscreen() { return ( content  & 0b00010000); }
   bool do_not_track_children() { return ( content  & 0b00100000); }
   bool do_not_outline_children() { return ( content  & 0b01000000); }
};
struct i343__Objects__AssociationFlags{
   uint16_t content;
   bool aerial_vehicle_spawn_point() { return ( content  & 0b0000000000000001); }
   bool ground_vehicle_spawn_point() { return ( content  & 0b0000000000000010); }
};
struct SpawnPointFlags{
   uint8_t content;
   bool Never_Spawn_In_Vehicle() { return ( content  & 0b00000001); }
};
struct i343__AI__AirDrop__UseSpawnerDirectionAsSpawnerDirectionFlags{
   uint8_t content;
   bool Enabled() { return ( content  & 0b00000001); }
};
struct i343__Narrative__BeatActivationFlags{
   uint8_t content;
   bool Initially_Active() { return ( content  & 0b00000001); }
   bool Is_NOT_In_Vehicle() { return ( content  & 0b00000010); }
   bool Is_In_Vehicle() { return ( content  & 0b00000100); }
   bool Cinematic_Composition_Start() { return ( content  & 0b00001000); }
   bool Cinematic_Composition_End() { return ( content  & 0b00010000); }
};
struct i343__Narrative__BeatDeactivationFlags{
   uint8_t content;
   bool Compositions_Finished() { return ( content  & 0b00000001); }
   bool Narrative_Sequences_Finished() { return ( content  & 0b00000010); }
   bool Is_In_Vehicle() { return ( content  & 0b00000100); }
   bool Is_NOT_In_Vehicle() { return ( content  & 0b00001000); }
   bool Move_To_Finished() { return ( content  & 0b00010000); }
   bool Cinematic_Composition_Start() { return ( content  & 0b00100000); }
   bool Cinematic_Composition_End() { return ( content  & 0b01000000); }
};
struct i343__Narrative__CageBeatFlags{
   uint8_t content;
   bool Return_to_Gameplay() { return ( content  & 0b00000001); }
   bool Clone_Blend_In_Properties() { return ( content  & 0b00000010); }
   bool Use_Director_Camera() { return ( content  & 0b00000100); }
   bool Stop_Updating_Previous_Camera() { return ( content  & 0b00001000); }
   bool Activated_By_Other_Component() { return ( content  & 0b00010000); }
};
struct i343__Narrative__BeatCompositionPropertiesFlags{
   uint8_t content;
   bool Keep_Playing_On_Deactivate() { return ( content  & 0b00000001); }
   bool Disable_Previous_Cage_Camera() { return ( content  & 0b00000010); }
   bool Override_Composition_Cage_Blend_Times() { return ( content  & 0b00000100); }
   bool Do_Not_Update_Anchor() { return ( content  & 0b00001000); }
};
struct i343__Narrative__BeatAiControlFlags{
   uint8_t content;
   bool Inactive() { return ( content  & 0b00000001); }
   bool Brain_Dead() { return ( content  & 0b00000010); }
   bool Invisible() { return ( content  & 0b00000100); }
   bool Play_Fighting() { return ( content  & 0b00001000); }
};
struct i343__Narrative__BeatPlayerControlFlags{
   uint32_t content;
   bool Alter_Player_Movement_Speed() { return ( content  & 0b00000000000000000000000000000001); }
   bool Modify_Animation_Mode() { return ( content  & 0b00000000000000000000000000000010); }
   bool Make_Player_Invulnerable() { return ( content  & 0b00000000000000000000000000000100); }
   bool Crouch_Disabled() { return ( content  & 0b00000000000000000000000000001000); }
   bool Jump_Disabled() { return ( content  & 0b00000000000000000000000000010000); }
   bool Clamber_Disabled() { return ( content  & 0b00000000000000000000000000100000); }
   bool Grapple_Hook_Disabled() { return ( content  & 0b00000000000000000000000001000000); }
   bool Sprint_Disabled() { return ( content  & 0b00000000000000000000000010000000); }
   bool Slide_Disabled() { return ( content  & 0b00000000000000000000000100000000); }
   bool Shield_Effects_Disabled() { return ( content  & 0b00000000000000000000001000000000); }
   bool Motion_Tracker_Disabled() { return ( content  & 0b00000000000000000000010000000000); }
   bool Player_Directional_Damage_Indicator_Disabled() { return ( content  & 0b00000000000000000000100000000000); }
   bool Player_Shield_HUD_Disabled() { return ( content  & 0b00000000000000000001000000000000); }
   bool No_Melee_Damage() { return ( content  & 0b00000000000000000010000000000000); }
   bool No_Melee_Knockback() { return ( content  & 0b00000000000000000100000000000000); }
   bool No_Weapon_Damage() { return ( content  & 0b00000000000000001000000000000000); }
   bool No_Grenade_Damage() { return ( content  & 0b00000000000000010000000000000000); }
   bool No_Grenade_Knockback() { return ( content  & 0b00000000000000100000000000000000); }
   bool Infinite_Ammo() { return ( content  & 0b00000000000001000000000000000000); }
   bool Bottomless_Clip() { return ( content  & 0b00000000000010000000000000000000); }
   bool Weapons_Disabled() { return ( content  & 0b00000000000100000000000000000000); }
   bool Grenades_Disabled() { return ( content  & 0b00000000001000000000000000000000); }
};
struct i343__Narrative__BeatPlayerHUDFlags{
   uint32_t content;
   bool Disable_ALL_HUD() { return ( content  & 0b00000000000000000000000000000001); }
   bool Disable_Messages() { return ( content  & 0b00000000000000000000000000000010); }
   bool Disable_Radar() { return ( content  & 0b00000000000000000000000000000100); }
   bool Disable_Weapon_Reticle() { return ( content  & 0b00000000000000000000000000001000); }
   bool Disable_Shield_Bar() { return ( content  & 0b00000000000000000000000000010000); }
   bool Disable_Weapon() { return ( content  & 0b00000000000000000000000000100000); }
   bool Disable_Ability() { return ( content  & 0b00000000000000000000000001000000); }
   bool Disable_Navpoints() { return ( content  & 0b00000000000000000000000010000000); }
   bool Disable_Toast_Commendations() { return ( content  & 0b00000000000000000000000100000000); }
   bool Disable_Fanfares() { return ( content  & 0b00000000000000000000001000000000); }
   bool Disable_Medal_Post() { return ( content  & 0b00000000000000000000010000000000); }
   bool Disable_Player_Navpoints() { return ( content  & 0b00000000000000000000100000000000); }
   bool Disable_Tracking_Navpoints() { return ( content  & 0b00000000000000000001000000000000); }
   bool Disable_Managed_Engine_Navpoints() { return ( content  & 0b00000000000000000010000000000000); }
   bool Disable_Object_Dispenser_Navpoints() { return ( content  & 0b00000000000000000100000000000000); }
   bool Disable_Lock_On_Navpoints() { return ( content  & 0b00000000000000001000000000000000); }
   bool Disable_Scripted_Navpoints() { return ( content  & 0b00000000000000010000000000000000); }
   bool Disable_Weapon_Messaging() { return ( content  & 0b00000000000000100000000000000000); }
   bool Disable_HUD_Wires() { return ( content  & 0b00000000000001000000000000000000); }
   bool Disable_Splash_Banner() { return ( content  & 0b00000000000010000000000000000000); }
   bool Disable_Splash_Banner_and_Objective_Tracker() { return ( content  & 0b00000000000100000000000000000000); }
};
struct i343__Narrative__TransitionBeatFlags{
   uint32_t content;
   bool Move_To_Keyframed_with_Velocity() { return ( content  & 0b00000000000000000000000000000001); }
   bool Move_To_Keyframed_with_Time() { return ( content  & 0b00000000000000000000000000000010); }
   bool Move_To_Input_Based() { return ( content  & 0b00000000000000000000000000000100); }
   bool Aim_Towards() { return ( content  & 0b00000000000000000000000000001000); }
   bool Move_Until_Composition_Plays() { return ( content  & 0b00000000000000000000000000010000); }
   bool Composition_3rd_to_3rd() { return ( content  & 0b00000000000000000000000000100000); }
   bool Composition_1st_to_1st() { return ( content  & 0b00000000000000000000000001000000); }
   bool Composition_1st_to_3rd__No_Player_() { return ( content  & 0b00000000000000000000000010000000); }
   bool Turn_HUD_Off() { return ( content  & 0b00000000000000000000000100000000); }
   bool Turn_HUD_On() { return ( content  & 0b00000000000000000000001000000000); }
   bool Don_t_Wait_for_HUD() { return ( content  & 0b00000000000000000000010000000000); }
   bool Sequential() { return ( content  & 0b00000000000000000000100000000000); }
   bool Activate_Camera_On_HUD_Off() { return ( content  & 0b00000000000000000001000000000000); }
   bool Transition_Out_When_Composition_Finished() { return ( content  & 0b00000000000000000010000000000000); }
   bool Force_Deactivate() { return ( content  & 0b00000000000000000100000000000000); }
   bool Finish_After_HUD_Off() { return ( content  & 0b00000000000000001000000000000000); }
   bool Transition_Out_Trigger_on_Event() { return ( content  & 0b00000000000000010000000000000000); }
};
struct c_patrol_point_flags{
   uint16_t content;
   bool single_use() { return ( content  & 0b0000000000000001); }
};
struct c_zone_set_flags{
   uint8_t content;
   bool goal() { return ( content  & 0b00000001); }
   bool direction_valid() { return ( content  & 0b00000010); }
};
struct i343__Narrative__CageTransformFlags{
   uint8_t content;
   bool Gaze_is_Look_At_Target() { return ( content  & 0b00000001); }
   bool Gaze_Lock_Pitch() { return ( content  & 0b00000010); }
   bool Gaze_Lock_Yaw() { return ( content  & 0b00000100); }
   bool Clamped_to_Gaze() { return ( content  & 0b00001000); }
   bool Gaze_Disallow_Rotating() { return ( content  & 0b00010000); }
   bool Gaze_Prefer_Slide_Over_Rotation() { return ( content  & 0b00100000); }
};
struct i343__Narrative__CageBlendProximityFlags{
   uint8_t content;
   bool Ignore_horizontal_differences() { return ( content  & 0b00000001); }
   bool Ignore_vertical_differences() { return ( content  & 0b00000010); }
};
struct i343__Narrative__CageFlags{
   uint16_t content;
   bool Return_to_Gameplay() { return ( content  & 0b0000000000000001); }
   bool Clone_Blend_In_Properties() { return ( content  & 0b0000000000000010); }
   bool Immediately_Affect_Aim() { return ( content  & 0b0000000000000100); }
   bool Gaze_is_Look_At_Target() { return ( content  & 0b0000000000001000); }
   bool Gaze_Lock_Pitch() { return ( content  & 0b0000000000010000); }
   bool Gaze_Lock_Yaw() { return ( content  & 0b0000000000100000); }
   bool Clamped_to_Gaze() { return ( content  & 0b0000000001000000); }
   bool Use_Director_Camera() { return ( content  & 0b0000000010000000); }
   bool Stop_Updating_Previous_Camera() { return ( content  & 0b0000000100000000); }
};
struct i343__Narrative__MoveToFlags{
   uint8_t content;
   bool Keyframed_with_Velocity() { return ( content  & 0b00000001); }
   bool Keyframed_with_Time() { return ( content  & 0b00000010); }
   bool Aim_Towards() { return ( content  & 0b00000100); }
};
struct i343__Narrative__LightFlags{
   uint8_t content;
   bool Orient_Towards_Player_Camera() { return ( content  & 0b00000001); }
   bool Orient_No_Pitch() { return ( content  & 0b00000010); }
   bool Orient_No_Yaw() { return ( content  & 0b00000100); }
   bool Color_Curve_Is_HSV() { return ( content  & 0b00001000); }
   bool Gaze_is_Look_At_Target() { return ( content  & 0b00010000); }
   bool Gaze_Lock_Pitch() { return ( content  & 0b00100000); }
   bool Gaze_Lock_Yaw() { return ( content  & 0b01000000); }
   bool Clamped_to_Gaze() { return ( content  & 0b10000000); }
};
struct t_collision_instance_cull_flags{
   uint16_t content;
   bool render_only() { return ( content  & 0b0000000000000001); }
   bool does_not_block_aoe() { return ( content  & 0b0000000000000010); }
   bool non_pathfindable() { return ( content  & 0b0000000000000100); }
};

// /////////////// //
// ENUM REFERENCES //
// /////////////// //

enum e_scenario_type : uint16_t {
   solo = 0,
   multiplayer = 1,
   main_menu = 2,
   multiplayer_shared = 3,
   single_player_shared = 4,
};
enum i343__CollectibleMission : uint16_t {
   Halsey = 0,
   Assault = 1,
   Meridian = 2,
   MeridianHub = 3,
   UnconfirmedReports = 4,
   Evacuation = 5,
   Builder = 6,
   Grotto = 7,
   SangheliosHub1 = 8,
   Plateau = 9,
   SangheliosHub2 = 10,
   TsunamiStation = 11,
   Arrival = 12,
   Trials = 13,
   Sentinels = 14,
};
enum e_editor_comment_type : uint32_t {
   generic = 0,
};
enum EditorAnnotationFilterGroups : uint16_t {
   General = 0,
   Animation = 1,
   Audio = 2,
   Cinematics = 3,
   Characters = 4,
   Encounter_Design = 5,
   Environment = 6,
   FX = 7,
   Level_Design = 8,
   Lighting = 9,
   LookDev = 10,
   Shaders = 11,
   Test = 12,
   UI = 13,
   Vignettes = 14,
};
enum i343__NetProtocol__GameOptions__MultiplayerTeamDesignatorEnum : uint8_t {
   Defender = 0,
   Attacker = 1,
   ThirdParty = 2,
   FourthParty = 3,
   FifthParty = 4,
   SixthParty = 5,
   SeventhParty = 6,
   EighthParty = 7,
   Neutral = 8,
};
enum c_object_bsp_placement_policy : uint8_t {
   default = 0,
   always_placed = 1,
   manual_bsp_placement = 2,
};
enum eTargetLOD : uint16_t {
   LOD0 = 0,
   LOD1 = 1,
   LOD2 = 2,
   LOD3 = 3,
   LOD4 = 4,
   LOD5 = 5,
   LOD6 = 6,
   LOD7 = 7,
   LOD8 = 8,
   LOD9 = 9,
   LOD10 = 10,
   LOD11 = 11,
   LOD12 = 12,
   LOD13 = 13,
   LOD14 = 14,
   LOD15 = 15,
   Use_Distance = 16,
};
enum HlodVisibilityEnum : uint16_t {
   Use_Visibility = 0,
   Do_Not_Use_Visibility = 1,
};
enum HlodVolumePolicy : uint8_t {
   Include_geo_and_child_HLODs = 0,
   Include_only_child_geo__no_hlods_ = 1,
   Include_only_child_HLODs__no_geo_ = 2,
   Disabled = 3,
};
enum i343__Wind__WindInfluencerVolumeTypeEnum : uint32_t {
   Blocker = 0,
   Directional_Emitter = 1,
   Omnidirectional_Emitter = 2,
};
enum i343__Wind__NoiseGustingFunctionTypeEnum : uint32_t {
   Linear = 0,
   Exponential = 1,
   Polynomial = 2,
};
enum i343__Physics__PhysicsVolumeTypeEnumClass : uint32_t {
   Blocking = 0,
};
enum i343__AI__AIMarkupVolumeFortIntensity : uint8_t {
   None = 0,
   Low = 1,
   Medium = 2,
   High = 3,
};
enum i343__AI__AIMarkupPrecombatType : uint8_t {
   Lookout = 0,
   Sentry = 1,
   Recreation = 2,
   Vehicle = 3,
};
enum i343__AI__AIMarkupPointType : uint8_t {
   Defend = 0,
   Patrol = 1,
   Action = 2,
   Rally_Point = 3,
   BotExplore = 4,
   BotHealthStation = 5,
   Squad_Fallback_Tether_Point = 6,
   Player_Objective = 7,
   Search = 8,
   BotHide = 9,
};
enum PatrolMode : uint16_t {
   ping_pong = 0,
   loop = 1,
   random = 2,
};
enum i343__AI__AIMarkupPlayerObjectiveType : uint8_t {
   Attack = 0,
   Interact = 1,
};
enum i343__Bots__BotMarkupPointType : uint8_t {
   Explore = 0,
   Hide = 1,
   Objective_Path = 2,
};
enum i343__AI__BehaviorTree__Relevance : uint8_t {
   Low = 0,
   High = 1,
};
enum i343__AI__FollowType : uint8_t {
   None = 0,
   First_Player = 1,
};
enum i343__AI__NodeType : uint8_t {
   Root = 0,
   Composite = 1,
   Decorator = 2,
};
enum i343__AI__CompositeType : uint8_t {
   Selector = 0,
   Sequence = 1,
   Bool_Condition = 2,
   Priority_Sorter = 3,
};
enum i343__AI__DecoratorType : uint8_t {
   Assignment_Limit = 0,
   Body_Count = 1,
   Combat_Status_Filter = 2,
   Keyword_Filter = 3,
   Living_Count = 4,
   Vehicle_Type_Filter = 5,
   Player_Trigger_Volume = 6,
   Script_Trigger = 7,
   Min_Relevance = 8,
};
enum i343__AI__BoolComparison : uint8_t {
   Less_Than = 0,
   Less_Than_Equals = 1,
   Greater_Than = 2,
   Greater_Than_Equals = 3,
   Equal = 4,
   Not_Equal = 5,
};
enum ActorCombatStatus : uint16_t {
   asleep = 0,
   idle = 1,
   alert = 2,
   uninspected_orphan = 3,
   active = 4,
   definite_orphan = 5,
   certain_orphan = 6,
   visible_enemy = 7,
   clear_enemy_los = 8,
   dangerous_enemy = 9,
};
enum i343__AI__SquadCombatTetherType : uint8_t {
   Ground = 0,
   Air = 1,
};
enum i343__AI__SpawnMethod : uint8_t {
   Default = 0,
   AirDrop = 1,
   Limbo = 2,
   DropPod = 3,
};
enum i343__AI__UseSpawnerOrientation : uint8_t {
   Spawner = 0,
   Random = 1,
};
enum i343__AI__IsInitallyPlaced : uint8_t {
   Is_Placed = 0,
   Not_Placed = 1,
};
enum i343__AI__InitialCombatState : uint8_t {
   Idle = 0,
   Alert = 1,
   Active = 2,
};
enum i343__AI__ReinforcementActivationCondition : uint8_t {
   Script_Signal = 0,
};
enum i343__AI__ReinforcementStyle : uint8_t {
   Waves = 0,
};
enum i343__AI__ReinforcementSquadIterationStyle : uint8_t {
   Sequence = 0,
};
enum i343__AI__ReinforcementSpawnPointSelectionStyle : uint8_t {
   Closest_To_Avg_Position_Players = 0,
};
enum i343__ActivatableRegion__ActivatableRegionType : uint8_t {
   SupplyBlocker = 0,
};
enum i343__ActivatableRegion__RegionState : uint8_t {
   Inactive = 0,
   Active = 1,
};
enum i343__eActivationVolumeActivatorType : uint8_t {
   Player = 0,
   Camera = 1,
};
enum e_soft_ceiling_type : uint16_t {
   acceleration = 0,
   soft_kill = 1,
   slip_surface = 2,
};
enum e_trigger_volume_type : uint16_t {
   bounding_box = 0,
   sector = 1,
};
enum eTriggerVolumeBehavior : uint8_t {
   None = 0,
   Kill_volume = 1,
   Safe_zone = 2,
   Unsafe_spawn = 3,
   Begin_zone_set = 4,
   Commit_zone_set = 5,
   Location = 6,
   Object_Kill_Volume = 7,
};
enum AcousticsTagZone__AcousticZonePropagateType : uint8_t {
   propagate = 0,
   Transparent_Playspace = 1,
   Transparent_Reverb = 2,
   override = 3,
   RemoveVoxels = 4,
};
enum AcousticsTagZone__AcousticZoneSpaceCategory : uint32_t {
   Use_Enviroment_Tag = 0,
   Use_Parent_Zone = 1,
   Interior = 2,
   Exterior = 3,
};
enum AcousticsTagPortal__AcousticPortalTransmissivityType : uint8_t {
   Auto = 0,
   Normal = 1,
   Low = 2,
};
enum e_campaign_team : uint16_t {
   default = 0,
   player = 1,
   human = 2,
   covenant = 3,
   brute = 4,
   mule = 5,
   wild_captive = 6,
   wild_free = 7,
   spare = 8,
   covenant_player = 9,
   forerunner = 10,
   neutral = 11,
};
enum PathfindingHintType : uint16_t {
   jump_link = 0,
   force_walk_link = 1,
   force_movement_link = 2,
   vehicle_link = 3,
   crouch_link = 4,
};
enum CharacterJumpHeight : uint16_t {
   NONE = 0,
   very_short = 1,
   short = 2,
   medium_short = 3,
   medium_long = 4,
   long = 5,
   very_long = 6,
   infinite = 7,
};
enum CookieCutterType : uint16_t {
   carve_out = 0,
   carve_air_volume = 1,
   Remove_Auto_Generated_Hints = 2,
   preserve = 3,
};
enum NavMeshAreaType : uint32_t {
   Generate_Ground = 0,
   Generate_Air = 1,
   No_Bunkering = 2,
   Generate_Climb = 3,
   Generate_Custom_Air = 4,
   Navmesh_Low_Res = 5,
   Navmesh_2 = 6,
   Navmesh_3 = 7,
   Navmesh_4 = 8,
   Navmesh_5 = 9,
   Navmesh_6 = 10,
   Navmesh_7 = 11,
   Navmesh_8 = 12,
   Navmesh_High_Res = 13,
   CUSTOM__Recommended_ = 14,
};
enum OpportunityAreaData__DistributionType : uint8_t {
   None = 0,
   Near_Area = 1,
   In_Area = 2,
   Always = 3,
   Radius = 4,
};
enum OpportunityAreaData__CombatEffect : uint8_t {
   None = 0,
   Prefer = 1,
   Avoid = 2,
   Staging = 3,
   Flee = 4,
   Role___Sniper = 5,
   Role___Suppress = 6,
   Role___CQB = 7,
};
enum OpportunityAreaData__OpportunityType : uint8_t {
   Point = 0,
   Sector = 1,
};
enum ScenarioCameraType : uint16_t {
   normal = 0,
   ignore_target_orientation = 1,
   dolly = 2,
   ignore_target_updates = 3,
};
enum FontList__TextJustification : uint16_t {
   left = 0,
   right = 1,
   center = 2,
};
enum TextVerticalJustification : uint16_t {
   default = 0,
   top = 1,
   center = 2,
   bottom = 3,
};
enum FontList__FontId : uint16_t {
   terminal_font = 0,
   subtitle_font = 1,
   subtitle_small_font = 2,
   subtitle_large_font = 3,
   subtitle_4K_small_font = 4,
   subtitle_4K_medium_font = 5,
   subtitle_4K_large_font = 6,
};
enum eDestinationSystemType : uint8_t {
   Independant_Destinations = 0,
   Single_Path = 1,
};
enum FlockBehaviorType : uint8_t {
   None = 0,
   Perching = 1,
   Circling = 2,
   Traveling = 3,
   Wandering = 4,
   Reaction = 5,
   Move_Away_Helper = 6,
};
enum FlockReactionBehaviorType : uint8_t {
   None = 0,
   Afraid = 1,
   Evasion = 2,
   Hide = 3,
};
enum CirclingDirectionType : uint8_t {
   Clockwise = 0,
   Counterclockwise = 1,
   Random = 2,
};
enum SpawnPriority : uint8_t {
   Procedurally_generated = 0,
   Regular = 1,
   Important = 2,
   Critical = 3,
   Regular_Distant = 4,
   Important_Distant = 5,
};
enum PrefabFlagOverride : uint8_t {
   no_override = 0,
   no = 1,
   yes = 2,
};
enum PrefabPathfindingPolicy : uint8_t {
   no_override = 0,
   cut_out = 1,
   static = 2,
   none = 3,
};
enum PrefabLightmappingPolicy : uint8_t {
   automatic = 0,
   per_pixel = 1,
   per_vertex = 2,
   single_probe = 3,
   exclude = 4,
   per_pixel_ao = 5,
   per_vertex_ao = 6,
   probe_grid = 7,
};
enum StaticCollisionDecalsOverridePolicy : uint8_t {
   No_override = 0,
   Force_allow_decals = 1,
   Force_do_not_allow_decals = 2,
};
enum LightBoolean : uint8_t {
   Off = 0,
   On = 1,
};
enum CubemapBoolean : uint16_t {
   Off = 0,
   On = 1,
};
enum CubemapSizeClassification : uint16_t {
   _128x128 = 0,
   _256x256 = 1,
   _512x512 = 2,
};
enum CubemapVolumeType : uint32_t {
   Prism = 0,
   Sphere = 1,
};
enum NavMeshCuttingOverride : uint8_t {
   Default = 0,
   Cut = 1,
   NotCut = 2,
};
enum ObjectPathfindingPolicy : uint16_t {
   default = 0,
   yes = 1,
   no = 2,
};
enum i343__NetProtocol__BondEnumHelper_i343__NetProtocol__MapVariant__PlacementMode___Enum : uint8_t {
   ignore = 0,
   symmetric = 1,
   asymmetric = 2,
};
enum i343__NetProtocol__GameOptions__MultiplayerSquadEnum_FaberSafe : uint8_t {
   None = 0,
   Alpha = 1,
   Bravo = 2,
   Charlie = 3,
   Delta = 4,
   Echo = 5,
   Foxtrot = 6,
   Gamma = 7,
   Hotel = 8,
};
enum i343__NetProtocol__BondEnumHelper_i343__NetProtocol__Phonetic___Enum : uint8_t {
   alpha = 0,
   bravo = 1,
   charlie = 2,
   delta = 3,
   echo = 4,
   foxtrot = 5,
   golf = 6,
   hotel = 7,
   india = 8,
   juliet = 9,
   kilo = 10,
   lima = 11,
   mike = 12,
   november = 13,
   oscar = 14,
   papa = 15,
   quebec = 16,
   romeo = 17,
   sierra = 18,
   tango = 19,
   uniform = 20,
   victor = 21,
   whiskey = 22,
   xray = 23,
   yankee = 24,
   zulu = 25,
};
enum i343__NetProtocol__BondEnumHelper_i343__NetProtocol__BoundaryType___Enum : uint8_t {
   unused = 0,
   sphere = 1,
   cylinder = 2,
   box = 3,
};
enum WeaponAccelerateOverride : uint16_t {
   No_Override = 0,
   Does_Accelerate = 1,
   Does_Not_Accelerate = 2,
};
enum ScenarioControlCharacterTypes : uint16_t {
   any = 0,
   spartan = 1,
   elite = 2,
};
enum ActorType : uint16_t {
   none = 0,
   player = 1,
   marine = 2,
   crew = 3,
   spartan = 4,
   elite = 5,
   jackal = 6,
   jackal_sniper = 7,
   grunt = 8,
   hunter = 9,
   prophet = 10,
   bugger = 11,
   scarab = 12,
   engineer = 13,
   skirmisher = 14,
   bishop = 15,
   knight = 16,
   pawn = 17,
   cavalier = 18,
   packmaster = 19,
   soldier = 20,
   soldier_sniper = 21,
   soldier_officer = 22,
   rook = 23,
   sentinel = 24,
   brute = 25,
   hoverer = 26,
   crusher = 27,
   mule = 28,
   mounted_weapon = 29,
   octopus = 30,
   wildlife = 31,
};
enum NavigationType : uint16_t {
   All = 0,
   On_Foot = 1,
   Vehicle = 2,
};
enum CharacterFilterType : uint16_t {
   None = 0,
   Marine = 1,
   Hovering = 2,
   By_AI_Size = 3,
};
enum ObjectAISize : uint16_t {
   default = 0,
   tiny = 1,
   small = 2,
   medium = 3,
   large = 4,
   immobile = 5,
};
enum i343__AI__AirDrop__PassengerSeatPreference : uint8_t {
   Left = 0,
   Right = 1,
   Both = 2,
   Center = 3,
};
enum i343__Narrative__CagePlacementType : uint8_t {
   Object_Reference = 0,
   Player = 1,
};
enum i343__Narrative__PersistenceCompareType : uint8_t {
   Less_Than = 0,
   Less_or_Equal = 1,
   Greater_Than = 2,
   Greater_or_Equal = 3,
   Equal_To = 4,
   Not_Equal_To = 5,
};
enum eStartingMovementType : uint16_t {
   default = 0,
   climbing = 1,
   flying = 2,
};
enum AISeatPreference : uint16_t {
   DEFAULT = 0,
   passenger = 1,
   gunner = 2,
   driver = 3,
   small_cargo = 4,
   large_cargo = 5,
   NO_driver = 6,
   NO_vehicle = 7,
};
enum UnitGrenadeType : uint8_t {
   none = 0,
   fragmentation_grenade = 1,
   plasma_grenade = 2,
   lightning_grenade = 3,
   spike_grenade = 4,
   sapper_grenade = 5,
   stasis_grenade = 6,
};
enum e_destination_type : uint8_t {
   sink = 0,
   front = 1,
   circle = 2,
};
enum c_task_movement : uint16_t {
   run__alert_ = 0,
   walk__idle_ = 1,
   crouch__alert_ = 2,
};
enum c_task_follow : uint16_t {
   NONE = 0,
   player = 1,
   squad = 2,
};
enum TaskOrderDialogue : uint16_t {
   none = 0,
   enemy_is_advancing = 1,
   enemy_is_charging = 2,
   enemy_is_falling_back = 3,
   advance = 4,
   charge = 5,
   fall_back = 6,
   move_on = 7,
   follow_player = 8,
   arriving_into_combat = 9,
   end_combat = 10,
   investigate = 11,
   spread_out = 12,
   hold_position = 13,
   find_cover = 14,
   covering_fire = 15,
};
enum c_objective_filter : uint16_t {
   none = 0,
   fireteam = 1,
   leader = 2,
   no_leader = 3,
   arbiter = 4,
   player_in_my_vehicle = 5,
   in_combat = 6,
   sighted_player = 7,
   sighted_enemy = 8,
   target_disengaged = 9,
   infantry = 10,
   has_an_engineer = 11,
   strength___0_25 = 12,
   strength___0_5 = 13,
   strength___0_75 = 14,
   strength___0_25 = 15,
   strength___0_5 = 16,
   strength___0_75 = 17,
   human_team = 18,
   covenant_team = 19,
   mule_team = 20,
   forerunner_team = 21,
   brute_team = 22,
   elite = 23,
   jackal = 24,
   jackal_sniper = 25,
   grunt = 26,
   hunter = 27,
   marine = 28,
   brute = 29,
   hoverer = 30,
   crusher = 31,
   bugger = 32,
   bishop = 33,
   knight = 34,
   pawn = 35,
   cavalier = 36,
   packmaster = 37,
   soldier = 38,
   soldier_sniper = 39,
   soldier_officer = 40,
   rook = 41,
   engineer = 42,
   skirmisher = 43,
   mule = 44,
   spartan = 45,
   sniper = 46,
   rifle = 47,
   sword = 48,
   hammer = 49,
   fist = 50,
   melee = 51,
   vehicle = 52,
   scorpion = 53,
   ghost = 54,
   warthog = 55,
   wraith = 56,
   phantom = 57,
   tuning_fork = 58,
   falcon = 59,
   seraph = 60,
   sabre = 61,
   pelican = 62,
   banshee = 63,
   mongoose = 64,
   revenant = 65,
   shade_turret = 66,
   phaeton = 67,
};
enum c_task_attitude : uint16_t {
   normal = 0,
   defensive = 1,
   aggressive = 2,
   playfighting = 3,
   patrol = 4,
   chckn_shit_recon = 5,
   spread_out = 6,
};
enum e_light_type : uint32_t {
   Omni = 0,
   Spot = 1,
   Directional = 2,
   Planar = 3,
   Sun = 4,
};
enum LightPropertiesOverrideSource : uint8_t {
   None = 0,
   Dynamic_World_State_Sun = 1,
   Dynamic_World_State_Atmosphere = 2,
   Dynamic_World_State_Sky = 3,
   Dynamic_World_State_Sun_Intensity_Only = 4,
};
enum e_light_projection_type : uint32_t {
   Cone = 0,
   Frustum = 1,
};
enum ScenarioObjectTypeEnum : uint8_t {
   biped = 0,
   vehicle = 1,
   weapon = 2,
   equipment = 3,
   terminal = 4,
   projectile = 5,
   scenery = 6,
   machine = 7,
   control = 8,
   dispenser = 9,
   crate = 10,
   creature = 11,
   giant = 12,
   effect_scenery = 13,
};
enum e_object_source : uint8_t {
   structure = 0,
   editor = 1,
   dynamic = 2,
   legacy = 3,
   sky = 4,
   parent = 5,
};
enum i343__SpartanTracking__ePingType : uint8_t {
   active = 0,
   passive = 1,
   custom_active = 2,
   target_marking = 3,
};
enum i343__SpartanTracking__TeamVisibility : uint8_t {
   visible_to_everyone = 0,
   hidden_from_enemies = 1,
   hidden_from_friends = 2,
};
enum i343__SpartanTracking__ePriority : uint8_t {
   critical = 0,
   high = 1,
   normal = 2,
   low = 3,
};
enum i343__Curve__SegmentType : uint8_t {
   Spline = 0,
   Linear = 1,
   Stepped = 2,
   SteppedNext = 3,
};
enum i343__Curve__TangentMode : uint8_t {
   AutoStraight = 0,
   UserStraight = 1,
   UserBroken = 2,
};
enum i343__AI__AirDrop__FlightTravelType : uint8_t {
   Immediate = 0,
   Fast = 1,
   Custom = 2,
};
enum i343__AI__AirDrop__SquadSpawnerFlightPathSplineType : uint8_t {
   Spline_Kit = 0,
   Spline_In_Level = 1,
   Global_Default_Spline_Kit = 2,
};
enum i343__Narrative__eBeatPlayerControlWeaponState : uint8_t {
   None = 0,
   Raised = 1,
   Lowered = 2,
   Relaxed = 3,
   Precision = 4,
   Stowed = 5,
};
enum i343__Curve__CurveBuiltIn : uint8_t {
   None = 0,
   Linear = 1,
   Zero = 2,
   One = 3,
   EaseInQuad = 4,
   EaseOutQuad = 5,
   EaseInOutQuad = 6,
   EaseInCubic = 7,
   EaseOutCubic = 8,
   EaseInOutCubic = 9,
   EaseInQuart = 10,
   EaseOutQuart = 11,
   EaseInOutQuart = 12,
   EaseInQuint = 13,
   EaseOutQuint = 14,
   EaseInOutQuint = 15,
   EaseInSine = 16,
   EaseOutSine = 17,
   EaseInOutSine = 18,
   EaseInExpo = 19,
   EaseOutExpo = 20,
   EaseInOutExpo = 21,
   EaseInCirc = 22,
   EaseOutCirc = 23,
   EaseInOutCirc = 24,
   EaseInOutLight = 25,
   EaseInOutHeavy = 26,
};
enum SquadMajorUpgradeType : uint16_t {
   normal = 0,
   few = 1,
   many = 2,
   none = 3,
   all = 4,
};
enum c_zone_set_type : uint16_t {
   normal = 0,
   search = 1,
   core = 2,
};
enum ComposerObjectResolutionTypeEnum : uint8_t {
   Invalid = 0,
   Reference = 1,
   Name = 2,
   AI = 3,
   Global = 4,
   Puppet = 5,
   Point_Set = 6,
   Flag = 7,
};
enum LightOutputModifier : uint16_t {
   BLANK = 0,
   Plus = 1,
   Times = 2,
};
enum i343__AI__AirDrop__FlightTransitionType : uint8_t {
   None = 0,
   Warp = 1,
   Cloak = 2,
};
enum i343__Narrative__BeatPersistenceChangeType : uint8_t {
   Set = 0,
   Increment = 1,
   Decrement = 2,
};
// ///////////////// //
// STRUCT REFERENCES //
// ///////////////// //

struct i343__Narrative__CagePointPropertiesWithWeight{
   LevelObjectReference Object_Reference;
   float Weight;
   int32_t Cage_Attachment;
   uint32_t Cage_Point;
};
struct SuperNodeMappingIndex{
   int16_t index;
};
struct i343__Narrative__StringAndSpring{
   i343__Curve__CurveBuiltIn Curve_Type;
   uint8_t generated_padc5da[3];
   uint32_t Curve_Name;
   uint8_t Dampen_Percentage;
   uint8_t generated_pad128f[3];
   float Dampen_Time;
};
struct i343__Narrative__CageCompositionReference{
   LevelObjectReference Composition_Placement;
   int32_t Composition_Beat;
   int32_t Composition_Index;
   uint32_t Composition_Camera_Track_Name;
   uint32_t Composition_Puppet_Track_Name;
};
struct i343__Narrative__CageShakeProperties{
   i343__Narrative__CageDampingProperties Scale_Damping;
   _s_triplefloat Position_Sample_Values;
   _s_triplefloat Position_Offset_Scale;
   _s_doublefloat Position_Offset_Velocity_Range;
   _s_triplefloat Position_Offset_Velocity_Scale_Min;
   _s_triplefloat Position_Offset_Velocity_Scale_Max;
   _s_doublefloat Position_Time_Velocity_Scale;
   _s_triplefloat Rotation_Sample_Values;
   _s_triplefloat Rotation_Offset_Scale;
   _s_doublefloat Rotation_Offset_Velocity_Range;
   _s_triplefloat Rotation_Offset_Velocity_Scale_Min;
   _s_triplefloat Rotation_Offset_Velocity_Scale_Max;
   _s_doublefloat Rotation_Time_Velocity_Scale;
};
struct i343__Narrative__CageGazeProperties{
   float Distance;
   float Outer_Angle;
   float Inner_Angle;
   float Velocity;
   _s_doublefloat Source_Slide_Range_Min;
   _s_doublefloat Source_Slide_Range_Max;
   _s_doublefloat Target_Slide_Range;
   uint8_t Slide_Dampen_Percentage;
   uint8_t generated_pada647[3];
   float Slide_Dampen_Time;
   i343__Curve__CurveReference Input_Velocity_Curve;
   i343__Curve__CurveReference Velocity_Curve;
   _s_tagblock<i343__Narrative__CagePointPropertiesWithWeight> Gazes;
};
struct i343__Narrative__CageDampingProperties{
   uint8_t Position_Dampen_Percentage;
   uint8_t generated_pad6a9e[3];
   float Position_Dampen_Time;
   uint8_t Rotation_Dampen_Percentage;
   uint8_t generated_padb753[3];
   float Rotation_Dampen_Time;
};
struct i343__Curve__RoadDecalBitmapReference{
   _s_tagref Reference;
};
struct i343__Curve__AnimatedSplineControlPointMetadata{
   float Time;
};
struct i343__Curve__RoadDecalControlPointMetadata{
   _s_tagblock<i343__Curve__RoadDecalBitmapReference> Road_Decal_Textures;
   _s_doublefloat Road_Decal_Scale;
   _s_doublefloat Road_Decal_Offset;
   float Road_Decal_Tile_Repeat_Count;
   float Road_Decal_Height_Strength;
   float Road_Decal_Mask_Strength;
   float Road_Decal_Height_Contrast;
   float Road_Decal_Mask_Contrast;
   float Road_Decal_Edge_Fade;
   int32_t Road_Decal_Random_Seed;
};
struct i343__Curve__RoadCurveControlPointMetadata{
   float width;
   float opacity;
   float falloffLeft;
   float falloffRight;
   float bank;
};
struct s_super_node_mapping{
   SuperNodeMappingIndex indices[];
};
struct s_collision_kd_hierarchy_static_header{
   t_collision_instance_cull_flags cull_flags;
   int16_t instance_index;
   int32_t instance_index_dword_mask;
   int16_t bsp_index;
   uint8_t generated_padc681[2];
   BspFlagStorageArray bsp_mask[];
};
struct i343__Graphics__Decals__DecalVertex{
   _s_triplefloat position;
   float position_w_component;
   int32_t texcoord;
   int32_t normal;
   int8_t tangent_x;
   int8_t tangent_y;
   int8_t tangent_z;
   int8_t array_index;
   uint32_t rayIndex;
};
struct s_task_direction_point{
   _s_triplefloat point0;
   int32_t _navMeshUIDOffaceref;
   int32_t _packedKeyOffaceref;
};
struct AIEquipmentChoice{
   s_ai_spawn_conditions place_on;
   _s_tagref equipment_type;
   int16_t chance;
   uint8_t generated_pada94b[2];
};
struct AIWeaponChoice{
   s_ai_spawn_conditions place_on;
   _s_tagref weapon_type;
   int16_t chance;
   uint8_t generated_pada3bd[2];
};
struct AICharacterChoice{
   s_ai_spawn_conditions place_on;
   _s_tagref character_type;
   int16_t chance;
   uint8_t generated_padc8d2[2];
};
struct i343__Narrative__CageLightProximityProperties{
   i343__Narrative__CageBlendProximityFlags Flags;
   uint8_t generated_padedff[3];
   _s_tagref Proximity_Curve;
   uint32_t Transform_Curve_Name;
   uint32_t Dimmer_Curve_Name;
   uint32_t Intensity_Curve_Name;
   uint32_t Color_Curve_Name;
   uint32_t Near_Attenuation_Curve_Name;
   uint32_t Far_Attenuation_Curve_Name;
   uint32_t Inner_Cone_Angle_Curve_Name;
   uint32_t Outer_Cone_Angle_Curve_Name;
   float Outer_Distance;
   float Inner_Distance;
   float Catch_Up_Time;
   int32_t Source_Cage_Attachment;
   uint32_t Source_Cage_Point;
   LevelObjectReference Destination_Object_Reference;
   int32_t Destination_Cage_Attachment;
   uint32_t Destination_Cage_Point;
};
struct i343__Narrative__CageLightTransition{
   _s_tagref Animation_Curve;
   uint32_t Transform_Curve_Name;
   uint32_t Dimmer_Curve_Name;
   uint32_t Intensity_Curve_Name;
   uint32_t Color_Curve_Name;
   uint32_t Near_Attenuation_Curve_Name;
   uint32_t Far_Attenuation_Curve_Name;
   uint32_t Inner_Cone_Angle_Curve_Name;
   uint32_t Outer_Cone_Angle_Curve_Name;
   float Animation_Time;
};
struct i343__Narrative__CageLightTransformProperties{
   i343__Narrative__LightFlags Flags;
   uint8_t generated_pad5e44[3];
   i343__Narrative__CageDampingProperties Damping;
   i343__Narrative__CagePointProperties Position_Point;
   i343__Narrative__CageGazeProperties Gaze;
};
struct i343__Narrative__BeatPersistenceChange{
   i343__Narrative__BeatPersistenceChangeType Change_Type;
   uint8_t generated_padcc02[3];
   uint32_t Persistence_Key;
   int32_t Change_Value;
};
struct i343__Narrative__PlayerControlMoveToComponent{
   i343__Narrative__MoveToFlags Flags;
   uint8_t generated_pad94cc[3];
   LevelObjectReference Destination;
   float Close_Enough_Distance;
   float Close_Enough_Angle;
   float Time;
   float Linear_Velocity;
   float Angular_Velocity;
   int32_t Composition_Beat;
   int32_t Composition_Index;
   uint32_t Composition_Track_Name;
};
struct i343__Narrative__NewPlayerControlMoveToComponent{
   i343__Narrative__MoveToFlags Flags;
   uint8_t generated_pad94cc[3];
   LevelObjectReference Destination;
   float Close_Enough_Distance;
   float Close_Enough_Angle;
   float Time;
   float Linear_Velocity;
   float Angular_Velocity;
   int32_t Composition_Beat;
   int32_t Composition_Index;
   uint32_t Composition_Track_Name;
   _s_tagblock<i343__Narrative__ActivationCurveDefAndNamesDef> Activation_Curves;
};
struct i343__Narrative__ActivationCurveDefAndNamesDef{
   _s_tagref Curve_Definition;
   uint32_t Activate_Curve_Name;
   uint32_t Deactivate_Curve_Name;
};
struct i343__Narrative__MalleablePropertyDataBlockDef{
   _s_tagref Data;
};
struct i343__Narrative__NarrativeSequenceAssociatedObject{
   LevelObjectReference Associated_Object;
};
struct i343__Narrative__CagePointProperties{
   int32_t Cage_Attachment;
   uint32_t Cage_Point;
};
struct i343__Narrative__CageBlendProximity{
   i343__Narrative__CagePointProperties Source;
   i343__Narrative__CagePointProperties Destination;
   i343__Narrative__CageCameraProperties Camera_Properties_at_Destination;
   i343__Narrative__CageBlendProximityFlags Flags;
   uint8_t generated_pad2e4f[3];
   float Outer_Edge;
   float Inner_Edge;
};
struct i343__Narrative__CageCameraProperties{
   i343__Narrative__CageFlags Flags;
   uint8_t generated_pad8e75[2];
   float Blend_Time;
   uint8_t Position_Dampen_Percentage;
   uint8_t generated_pad7494[3];
   float Position_Dampen_Time;
   uint8_t Rotation_Dampen_Percentage;
   uint8_t generated_pad27df[3];
   float Rotation_Dampen_Time;
   i343__Curve__CurveReference Transform_Blend_Curve;
   i343__Narrative__CagePointProperties Position_Point;
   i343__Narrative__CageGazeProperties Gaze;
   i343__Curve__CurveReference Properties_Blend_Curve;
   float Focal_Length;
   float Focus_Distance;
   float F_Stop;
};
struct i343__Narrative__CageCameraZoomSettings{
   _s_tagref Curve_Definition;
   i343__Narrative__StringAndSpring Positional_Curve_Adjustments;
   i343__Narrative__StringAndSpring Focal_Length_Curve_Adjustments;
};
struct i343__Narrative__CageCameraProximityProperties{
   i343__Narrative__CageBlendProximityFlags Flags;
   uint8_t generated_pad82ac[3];
   float Desired_Focal_Length;
   float Desired_Focus_Distance;
   float Desired_F_Stop;
   int32_t Desired_Bokeh_Side_Count;
   _s_tagref Proximity_Curve;
   uint32_t Transform_Curve_Name;
   uint32_t Focal_Length_Curve_Name;
   uint32_t Focus_Distance_Curve_Name;
   uint32_t F_Stop_Curve_Name;
   uint32_t Bokeh_Side_Count_Curve_Name;
   uint32_t Gaze_Outer_Angle_Curve_Name;
   uint32_t Gaze_Inner_Angle_Curve_Name;
   float Outer_Distance;
   float Inner_Distance;
   float Catch_Up_Time;
   int32_t Source_Cage_Attachment;
   uint32_t Source_Cage_Point;
   LevelObjectReference Destination_Object_Reference;
   int32_t Destination_Cage_Attachment;
   uint32_t Destination_Cage_Point;
};
struct i343__CageSystem__CageTransitionCurve{
   _s_tagref Animation_Curve;
   uint32_t Transform_Curve_Name;
   uint32_t Focal_Length_Curve_Name;
   uint32_t Focus_Distance_Curve_Name;
   uint32_t F_Stop_Curve_Name;
   uint32_t Perspective_Curve_Name;
   uint32_t Variant_Curve_Name;
   uint32_t Variant_Name;
   uint32_t Invisible_Curve_Name;
   float Animation_Time;
   float Animation_Playback_Scalar;
};
struct i343__Curve__CurveReference{
   i343__Curve__CurveBuiltIn Curve_Type;
   uint8_t generated_pade4ec[3];
   _s_tagref Curve_Definition;
   uint32_t Curve_Name;
};
struct i343__Narrative__CageCameraTransformProperties{
   i343__Narrative__CageTransformFlags Flags;
   uint8_t generated_pad6f7b[3];
   i343__Narrative__CageDampingProperties Damping;
   i343__Narrative__CagePointProperties Position_Point;
   i343__Narrative__CageGazeProperties Gaze;
   i343__Narrative__CageShakeProperties Shake;
   i343__Narrative__CageCompositionReference Composition_Reference;
};
struct i343__AI__AirDrop__FlightPathSpline{
   LevelObjectReference Spline_Ref;
};
struct i343__AI__AirDrop__FlightTransitionData{
   i343__AI__AirDrop__FlightTransitionType Transition_Type;
   uint8_t generated_pad94e3[3];
   float Transition_Time;
};
struct i343__Curve__RoadDecalMetadata{
   _s_tagblock<i343__Curve__RoadDecalBitmapReference> Road_Decal_Textures;
   _s_doublefloat Road_Decal_Scale;
   _s_doublefloat Road_Decal_Offset;
   float Road_Decal_Tile_Repeat_Count;
   float Road_Decal_Height_Strength;
   float Road_Decal_Mask_Strength;
   float Road_Decal_Height_Contrast;
   float Road_Decal_Mask_Contrast;
   float Road_Decal_Edge_Fade;
   int32_t Road_Decal_Random_Seed;
};
struct i343__Curve__CurveControlPointMetadata{
   _s_tagblock<i343__Curve__RoadCurveControlPointMetadata> spline_road_metadata;
   _s_tagblock<i343__Curve__RoadDecalControlPointMetadata> road_decal_metadata;
   _s_tagblock<i343__Curve__AnimatedSplineControlPointMetadata> animated_spline_metadata;
};
struct s_cluster_table{
   _s_tagblock<s_super_node_mapping> super_node_mappings;
};
struct CollisionKdHierarchyStaticInUseMasks{
   int32_t mask;
};
struct s_collision_kd_hierarchy_static_node{
   _s_tagblock<s_collision_kd_hierarchy_static_header> render_only_headers;
   _s_tagblock<s_collision_kd_hierarchy_static_header> collidable_headers;
   int16_t child_below;
   int16_t child_above;
   int16_t parent;
   int16_t cluster_index;
};
struct CollisionKdHierarchyStaticHashTableShort{
   int16_t index;
};
struct CollisionKdHierarchyStaticHashTableData{
   int32_t node_index;
   int32_t key_a;
   int32_t key_b;
   int32_t key_c;
};
struct BspClusterReference{
   int16_t bsp_index;
   int16_t cluster_index;
};
struct ColorLightFunction{
   uint32_t Input_Variable;
   uint32_t Range_Variable;
   LightOutputModifier Output_Modifier;
   uint8_t generated_pad8f6d[2];
   uint32_t Output_Modifier_Input;
   FunctionDefinition Mapping;
};
struct ScalarLightFunction{
   uint32_t Input_Variable;
   uint32_t Range_Variable;
   LightOutputModifier Output_Modifier;
   uint8_t generated_padc7e0[2];
   uint32_t Output_Modifier_Input;
   FunctionDefinition Mapping;
};
struct i343__Graphics__Decals__DecalTriangle{
   i343__Graphics__Decals__DecalVertex vertex_0;
   i343__Graphics__Decals__DecalVertex vertex_1;
   i343__Graphics__Decals__DecalVertex vertex_2;
};
struct ComposerSubject{
   uint32_t Object_Name;
   _s_data Raw_Object_Name;
   LevelObjectReference Object;
   ComposerObjectResolutionTypeEnum Object_Resolution_Type;
   uint8_t generated_padc9c6[3];
};
struct s_task_direction{
   _s_tagblock<s_task_direction_point> points;
};
struct s_script_fragment{
   int32_t script_name;
   char script_source[256];
};
struct s_area_reference{
   c_zone_set_type area_type;
   c_zone_set_flags flags;
   uint8_t generated_pad1249[1];
   int16_t zone;
   int16_t area;
   float yaw;
   int32_t connection_flags_0;
   int32_t connection_flags_1;
   int32_t connection_flags_2;
   int32_t connection_flags_3;
};
struct s_vector_property{
   char name[256];
   _s_triplefloat Value;
};
struct s_color_property{
   char name[256];
   _s_argbfloat Value;
};
struct s_tag_property{
   char name[256];
   _s_tagref Value;
   uint32_t load_variant;
};
struct s_string_property{
   char name[256];
   char Value[256];
};
struct s_numeric_property{
   char name[256];
   float Value;
};
struct s_bool_property{
   char name[256];
   uint8_t Value;
};
struct NavMeshAttachment__NavMeshAttachmentId{
   uint32_t navMeshUID;
};
struct s_ai_sector_point{
   _s_triplefloat point;
   int32_t _navMeshUIDOffaceref;
   int32_t _packedKeyOffaceref;
};
struct s_cell_definition{
   uint32_t name;
   s_ai_spawn_conditions place_on;
   int16_t normal_diff_count;
   SquadMajorUpgradeType major_upgrade;
   _s_tagblock<AICharacterChoice> character;
   _s_tagblock<AIWeaponChoice> primary_weapon;
   _s_tagblock<AIWeaponChoice> secondary_weapon;
   _s_tagblock<AIEquipmentChoice> equipment;
   UnitGrenadeType grenade_type;
   uint8_t generated_pad6c56[3];
   _s_tagref vehicle;
   uint32_t vehicle_variant;
   uint32_t Placement_script;
   uint32_t activity_name;
   uint32_t movement_set;
   int16_t point_set;
   PatrolMode patrol_mode;
   _s_tagblock<s_patrol_point> points;
};
struct s_patrol_point{
   int16_t point;
   c_patrol_point_flags flags;
   float delay;
   float angle;
   uint32_t activity_name;
   uint32_t command_script;
};
struct s_ai_spawn_conditions{
   GameDifficultyFlags difficulty_flags;
   uint8_t pad0[2];
};
struct s_dumpling_sector_point{
   _s_triplefloat position;
};
struct i343__Narrative__BeatTransitionProperties{
   i343__Narrative__TransitionBeatFlags Flags;
   LevelObjectReference Destination;
   _s_doublefloat Close_Enough_Distance_Range;
   _s_doublefloat Close_Enough_Angle_Range;
   float Time;
   _s_doublefloat Linear_Velocity_Range;
   _s_doublefloat Angular_Velocity_Range;
   float Lower_Weapon_Time;
   float Raise_Weapon_Time;
   float Hide_Player_Time;
   float Lower_Weapon_Delay_Override;
   float Raise_Weapon_Delay_Override;
   float HUD_Off_Delay_Override;
   float HUD_On_Delay_Override;
   float Move_To_Delay_Override;
   uint32_t Composition_Puppet_Track_Name;
   uint32_t Composition_Camera_Track_Name;
   i343__Curve__CurveBuiltIn Move_To_Slide_Curve;
   i343__Curve__CurveBuiltIn Gaze_Blend_Curve;
   uint8_t generated_pad0e2d[2];
};
struct i343__Narrative__BeatControlParameterProperties{
   int32_t Set_On_Activate;
   int32_t Unset_On_Activate;
   int32_t Set_On_Deactivate;
   int32_t Unset_On_Deactivate;
};
struct i343__Narrative__BeatLightProperties{
   _s_tagref Light_Tag;
   i343__Narrative__CageLightTransformProperties Light_Transform;
   i343__Narrative__CageLightTransition Activate_Transition;
   i343__Narrative__CageLightProximityProperties Proximity;
   _s_tagblock<i343__Narrative__CageLightTransformProperties> Proximity_Advanced_Lighting;
};
struct i343__Narrative__BeatPersistenceChanges{
   _s_tagblock<i343__Narrative__BeatPersistenceChange> At_Activation;
   _s_tagblock<i343__Narrative__BeatPersistenceChange> At_Deactivation;
};
struct i343__Narrative__BeatPlayerHUDProperties{
   i343__Narrative__BeatPlayerHUDFlags Flags;
   uint32_t Broadcast_Activation_Event_Name;
   float Broadcast_Activation_Event_Delay;
   uint32_t Broadcast_Deactivation_Event_Name;
   float Broadcast_Deactivation_Event_Delay;
};
struct i343__Narrative__BeatPlayerControlProperties{
   i343__Narrative__BeatPlayerControlFlags Flags;
   uint32_t Animation_Mode;
   i343__Narrative__eBeatPlayerControlWeaponState Weapon_State;
   uint8_t generated_pad5e1a[3];
   float Activate_Transition_Time;
   float Deactivate_Transition_Time;
   uint8_t Movement_Speed;
   uint8_t generated_padaacf[3];
   float Movement_Speed_Blend_Time;
   uint8_t Sprint_Speed;
   uint8_t generated_padf784[3];
   _s_tagblock<i343__Narrative__PlayerControlMoveToComponent> Move_To_Component;
};
struct i343__Narrative__BeatNewPlayerControlProperties{
   _s_tagblock<i343__Narrative__MalleablePropertyDataBlockDef> Malleable_Properties;
   _s_tagblock<i343__Narrative__ActivationCurveDefAndNamesDef> Weapon_Disable;
   _s_tagblock<i343__Narrative__ActivationCurveDefAndNamesDef> Grenade_Disable;
   uint32_t Animation_Mode;
   _s_tagblock<i343__Narrative__ActivationCurveDefAndNamesDef> Animation_Mode_Curves;
   i343__Narrative__eBeatPlayerControlWeaponState Weapon_State;
   uint8_t generated_pad1840[3];
   float Weapon_State_Activate_Transition_Time;
   float Weapon_State_Deactivate_Transition_Time;
   _s_tagblock<i343__Narrative__ActivationCurveDefAndNamesDef> Weapon_State_Curves;
   _s_tagblock<i343__Narrative__NewPlayerControlMoveToComponent> Move_To_Component;
};
struct i343__Narrative__BeatAiControlProperties{
   i343__Narrative__BeatAiControlFlags Flags;
};
struct i343__Narrative__BeatNarrativeSequence{
   char Sequence_Name[256];
   _s_tagblock<i343__Narrative__NarrativeSequenceAssociatedObject> Associated_Objects;
};
struct i343__Narrative__BeatCompositionProperties{
   LevelObjectReference Placed_Composition;
   _s_tagref Composition;
   i343__Narrative__CagePointProperties Anchor_Point;
   i343__Narrative__BeatCompositionPropertiesFlags Flags;
   uint8_t generated_pad62be[3];
   float Cage_Blend_In_Time;
   float Cage_Blend_Out_Time;
};
struct i343__Narrative__BeatCameraProperties{
   i343__Narrative__CageCameraProperties Blend_In_Properties;
   _s_tagblock<i343__Narrative__CageBlendProximity> Blend_In_Proximity;
   i343__Narrative__CageCameraProperties Blend_Out_Properties;
   i343__Narrative__CageCameraProperties Blend_From_Properties;
};
struct i343__Narrative__BeatNewCameraProperties{
   i343__Narrative__CageBeatFlags Flags;
   uint8_t generated_padf0b3[3];
   i343__Narrative__CageCameraTransformProperties Camera_Transform;
   float Starting_Focal_Length;
   float Starting_Focus_Distance;
   float Starting_F_Stop;
   int32_t Starting_Bokeh_Side_Count;
   float Blend_In_Time;
   float Blend_Out_Time;
   i343__Curve__CurveReference Transform_Blend_Curve;
   i343__Curve__CurveReference Properties_Blend_Curve;
   i343__CageSystem__CageTransitionCurve From_Gameplay_Transition;
   i343__CageSystem__CageTransitionCurve To_Gameplay_Transition;
   i343__Narrative__CageCameraProximityProperties Proximity;
   _s_tagblock<i343__Narrative__CageCameraTransformProperties> Proximity_Advanced_Camera;
   _s_tagblock<i343__Narrative__CageCameraZoomSettings> Zoom_Settings;
};
struct i343__Narrative__BeatDeactivation{
   i343__Narrative__BeatDeactivationFlags Flags;
   uint8_t generated_pada24a[3];
   int32_t On_Control_Parameter_Set;
   uint32_t On_Trigger_Volume_Enter_Deprecated;
   LevelObjectReference On_Trigger_Volume_Enter;
   uint32_t On_Trigger_Volume_Exit_Deprecated;
   LevelObjectReference On_Trigger_Volume_Exit;
   int32_t On_Beat_Activate;
   int32_t On_Beat_Deactivate;
   int32_t Is_Beat_Inactive;
   int32_t Is_Beat_Active;
   float Time_in_Beat;
   int32_t Persistence_Check;
   int32_t Move_to_Finished;
   int32_t HUD_Off_Finished;
};
struct i343__Narrative__BeatActivation{
   i343__Narrative__BeatActivationFlags Flags;
   uint8_t generated_padd35f[3];
   int32_t On_Control_Parameter_Set;
   uint32_t On_Trigger_Volume_Enter_Deprecated;
   LevelObjectReference On_Trigger_Volume_Enter;
   uint32_t On_Trigger_Volume_Exit_Deprecated;
   LevelObjectReference On_Trigger_Volume_Exit;
   int32_t On_Beat_Activate;
   int32_t On_Beat_Deactivate;
   int32_t Is_Beat_Inactive;
   int32_t Is_Beat_Active;
   int32_t Persistence_Check;
   int32_t Move_to_Finished;
   int32_t HUD_Off_Finished;
};
struct i343__AI__AirDrop__SquadSpawnerFlightPathSettings{
   i343__AI__AirDrop__FlightTravelType Travel_Type;
   uint8_t generated_pad6c86[3];
   i343__AI__AirDrop__FlightTransitionData Transition;
   i343__AI__AirDrop__SquadSpawnerFlightPathSplineType Flight_Path_Spline_Type;
   i343__AI__AirDrop__UseSpawnerDirectionAsSpawnerDirectionFlags Use_Spawner_Direction_as_Destination_Direction;
   uint8_t generated_padb93b[2];
   _s_tagref Flight_Path_Kit;
   _s_tagblock<i343__AI__AirDrop__FlightPathSpline> Flight_Path_Splines;
};
struct LevelObjectReferenceElement{
   int32_t guid;
   uint32_t name;
};
struct FunctionDefinition{
   _s_data data;
};
struct GenericVolumeNativePoint2D{
   _s_doublefloat point;
};
struct s_real_sector_point_generic_volume{
   _s_triplefloat position;
};
struct i343__Curve__SplineFlightPathMetadata{
   float Preference;
   uint8_t Lines_per_spline_segment;
   uint8_t generated_padfb3b[3];
};
struct i343__Curve__SplineRoadMetadata{
   float width;
   float opacity;
   float falloffLeft;
   float falloffRight;
   float bank;
   int16_t subdivision_count;
   uint8_t generated_pad6df6[2];
   _s_tagblock<i343__Curve__RoadDecalMetadata> Road_Decal_Metadata;
   _s_tagref terrain_system;
};
struct i343__Curve__Curve3dControlPoint{
   _s_triplefloat value;
   _s_triplefloat tangent_in;
   _s_triplefloat tangent_out;
   float curviness;
   i343__Curve__SegmentType segment_type_x;
   i343__Curve__SegmentType segment_type_y;
   i343__Curve__SegmentType segment_type_z;
   i343__Curve__TangentMode tangent_mode_x;
   i343__Curve__TangentMode tangent_mode_y;
   i343__Curve__TangentMode tangent_mode_z;
   uint8_t generated_pad30cd[2];
   _s_tagblock<i343__Curve__CurveControlPointMetadata> pointMetadata;
};
struct TerminalRedeemableObjectDefinition{
   _s_tagref redeemable_object;
   int32_t level_requirement;
};
struct SpawnPointMultiplayerProperties{
   SpawnPointFlags Spawn_Point_Flags;
};
struct SplineNode{
   _s_triplefloat position;
   _s_triplefloat rotation;
   float scale;
};
struct i343__Objects__Association{
   i343__Objects__AssociationFlags association_types;
   uint8_t generated_padee80[2];
   int32_t target_index;
   uint32_t target_object_name;
   uint32_t target_marker_name;
   uint32_t source_marker_name;
};
struct i343__SpartanTracking__ObjectDefinition{
   i343__SpartanTracking__ObjectDefinition__Flags flags;
   i343__SpartanTracking__ePingType ping_type;
   i343__SpartanTracking__TeamVisibility team_visibility;
   i343__SpartanTracking__ePriority priority;
   uint32_t ping_group;
   uint32_t nav_point_screen;
   uint32_t nav_point_label;
   float nav_point_vertical_offset;
   float range;
   _s_tagref ping_hit_instigator_effect;
   _s_tagref ping_hit_effect;
   _s_tagref outline_override;
};
struct i343__Physics__ManCannonBallisticArcData{
   _s_triplefloat Man_Cannon_End_Point;
   float Man_Cannon_Apex_Height;
   int32_t Man_Cannon_Phantom_Index;
};
struct s_scenario_object_parent{
   int32_t parent_object;
   uint32_t parent_name;
   uint32_t parent_marker;
   uint32_t connection_marker;
};
struct c_object_identifier{
   int32_t unique_id;
   int16_t origin_bsp_index;
   ScenarioObjectTypeEnum type;
   e_object_source source;
};
struct ModuleComponentLookupEntry{
   uint64_t Hash;
   uint16_t HS_Type;
   uint8_t generated_paddf9f[2];
   uint32_t Compressed_Placement_Handle;
   uint32_t Block_Id;
   uint8_t generated_pad92ea[4];
};
struct s_collision_kd_hierarchy_static{
   int32_t hash_total_count;
   _s_tagblock<CollisionKdHierarchyStaticHashTableData> hash_data;
   _s_tagblock<CollisionKdHierarchyStaticHashTableShort> hash_entry_count;
   _s_tagblock<CollisionKdHierarchyStaticHashTableShort> original_hash_entry_count;
   _s_tagblock<s_collision_kd_hierarchy_static_node> nodes;
   _s_tagblock<CollisionKdHierarchyStaticInUseMasks> in_use_masks;
   _s_tagblock<s_cluster_table> cluster_table;
};
struct StructureDesignReference{
   _s_tagref structure_design;
};
struct ScenarioBspReference{
   _s_tagref structure_bsp;
};
struct s_scenario_zone_set_cluster_seam_cluster_mappings{
   _s_tagblock<BspClusterReference> root_clusters;
   _s_tagblock<BspClusterReference> attached_clusters;
   _s_tagblock<BspClusterReference> connected_clusters;
};
struct LightingObjectsIndex{
   int16_t index;
};
struct i343__TerrainDefinition{
   _s_tagref terrain_system;
   GenericVolume Volume;
};
struct LightDefinition{
   uint32_t haloLightNode;
   e_light_type Type;
   _s_rgbfloat Color;
   float Source_Energy;
   float Baked_Indirect_Intensity_Scalar;
   float Dimmer;
   float Far_Attenuation;
   float Near_Begin;
   LightPropertiesOverrideSource Properties_Override_Source;
   uint8_t generated_pade39f[3];
   float Override_Source_Intensity_Multiplier;
   ScalarLightFunction Intensity_Function;
   _s_tagref Light_Group;
   ScalarLightFunction Dimmer_Function;
   float Near_Attenuation;
   ScalarLightFunction Outer_Attenuation_Function;
   float Far_Begin;
   float Base_position_modifier_for_fading;
   float Camera_Near_Distance_Fade_End;
   float Camera_Near_Distance_Fade_Start;
   float Camera_Distance_Fade_Start;
   float Camera_Distance_Fade_End;
   float Light_Screen_Size_Fade_Start;
   float Light_Screen_Size_Fade_End;
   float Fog_Intensity;
   float Particle_Intensity;
   float Minimum_Roughness;
   float Planar_Light_Width;
   float Planar_Light_Height;
   float Area_Light_Radius;
   float Area_Light_Length;
   float Inner_Cone_Angle;
   float Outer_Cone_Angle;
   ScalarLightFunction Outer_Cone_Angle_Function;
   e_light_projection_type Cone_Projection_Shape;
   LightBoolean Static_Shadows;
   LightBoolean Dynamic_Shadows;
   int16_t Static_Shadow_Resolution;
   int16_t Dynamic_Shadow_Resolution;
   int16_t Minimum_Static_Shadow_Resolution;
   int16_t Minimum_Dynamic_Shadow_Resolution;
   LightBoolean Enable_Static_Shadow_Caching;
   LightBoolean Enable_Dynamic_Objects_Shadow_Caching;
   LightBoolean Composer_Shadows;
   LightBoolean Contact_Shadows_for_CVW;
   LightBoolean Contact_Shadows_for_First_Person;
   LightBoolean Contact_Shadows_for_Environment;
   float Shadow_Resolution_Distance_Scaler;
   float Camera_Distance_Static_Shadow___Gobo_Fade_Start;
   float Camera_Distance_Static_Shadow___Gobo_Fade_End;
   float Camera_Distance_DO_Shadow_Fade_Start;
   float Camera_Distance_DO_Shadow_Fade_End;
   float Inner_DO_Shadow_Cone_Angle__;
   float Outer_DO_Shadow_Cone_Angle__;
   float DO_Shadow_Far_Attenuation_Start__;
   float DO_Shadow_Far_Attenuation_End__;
   float Static_Object_Shadow_LOD_Scaler;
   float Dynamic_Object_Shadow_LOD_Scaler;
   float Shadow_Near_Clip_Plane;
   float Shadow_Far_Clip_Plane;
   LightBoolean Enable_light_OBB;
   uint8_t generated_pad96ea[3];
   _s_triplefloat OBB_Center_Offset;
   _s_triplefloat OBB_Scale_Factor;
   _s_triplefloat OBB_Orientation_Adjust;
   float Shadow_Bias_Offset;
   float Shadow_Filter_Width;
   float Minimum_Shadow_Filter_Width;
   float PCSS_Light_Size;
   float PCSS_Min_Filter_Size;
   float PCSS_Max_Filter_Size;
   LightBoolean Force_Forward_Lighting;
   LightBoolean Ignore_Dynamic_Objects;
   LightDefinition__LightAttenuationFlags Attenuation_flags;
   LightBoolean Specular_Contribution;
   LightBoolean Diffuse_Contribution;
   uint8_t generated_pad4a35[1];
   int16_t Minimum_Gobo_Resolution;
   _s_tagref Gobos;
   _s_rgbfloat Target_Color;
   float destroy_light_after;
   ColorLightFunction Interpolation_Function;
   LightDefinitionFlags flags;
   _s_tagref Lens_Flare;
   int32_t Light_Shadow_Priority;
   int8_t needs_update_state;
   int8_t needs_update_bounding_sphere;
   uint8_t generated_pad6328[2];
   int32_t tick_of_last_state_update;
   int32_t tick_of_last_bounding_sphere_update;
};
struct i343__HexGrid__QuadTreeNode{
   _s_triplefloat aabb_min;
   uint32_t start_index;
   _s_triplefloat aabb_max;
   uint32_t count;
};
struct i343__HexGrid__RuntimePlacement{
   _s_triplefloat position;
   uint16_t height;
   uint16_t hideMask;
};
struct i343__HexGrid__Placement{
   _s_doublefloat position;
   float bottom;
   float top;
   i343__HexGrid__HexSideHiddenFlags hidden_sides;
   uint8_t generated_pad5e99[3];
};
struct CachedDecalSystem{
   _s_tagref definition_ref;
   int32_t component_index;
   _s_tagblock<i343__Graphics__Decals__DecalTriangle> decal_triangles;
   uint8_t generated_pad29ea[4];
   int64_t runtimeVertexBuffer;
};
struct LevelObjectParentKitPath{
   _s_tagblock<LevelObjectReferenceElement> path;
};
struct ComposerPuppetOverride{
   uint32_t Puppet_Name;
   ComposerSubject Subject;
};
struct s_task_definition{
   c_task_flags flags;
   c_behavior_inhibit_flags inhibit_groups;
   GameDifficultyFlags inhibit_on_difficulty;
   c_task_movement movement;
   c_task_follow follow;
   int16_t follow_squad;
   float follow_radius;
   c_task_follow_players follow_players;
   uint8_t generated_pad4a13[2];
   _s_tagblock<s_area_reference> areas;
   float maximum_duration;
   float exhaustion_delay;
   uint32_t Entry_Script;
   uint32_t Command_Script;
   uint32_t Exhaustion_Script;
   int16_t Squad_group_filter;
   TaskOrderDialogue dialogue_type;
   task_runtime_flags runtime_flags;
   int16_t Kungfu_count;
   char name[32];
   int16_t priority;
   int16_t first_child;
   int16_t next_sibling;
   int16_t parent;
   _s_tagblock<s_script_fragment> activation_script;
   uint32_t script_crc;
   int16_t lifetime_count;
   c_filter_flags filter_flags;
   c_objective_filter filter;
   _s_shortrange capacity;
   int16_t max_body_count;
   c_task_attitude attitude;
   uint8_t generated_padfd5e[2];
   float min_strength;
   _s_tagblock<s_task_direction> direction;
};
struct s_opposing_objective{
   int16_t objective;
};
struct s_property_collection{
   _s_tagblock<s_bool_property> bool_properties;
   _s_tagblock<s_numeric_property> numeric_properties;
   _s_tagblock<s_string_property> string_properties;
   _s_tagblock<s_tag_property> tag_properties;
   _s_tagblock<s_color_property> color_properties;
   _s_tagblock<s_vector_property> vector_properties;
};
struct s_flock_destination{
   uint32_t name;
   e_destination_type type;
   uint8_t generated_pad2d54[3];
   _s_triplefloat position;
   float radius;
   float max_destination_volume_penetration;
   int16_t destination_volume;
   int16_t next_destination;
};
struct s_flock_source{
   uint32_t name;
   c_flock_source_flags source_flags;
   _s_triplefloat position;
   _s_doublefloat starting_yaw__pitch;
   float radius;
   float weight;
   int16_t bsp_index;
   int16_t cluster_index;
   int16_t source_volume;
   int16_t initial_destination;
};
struct cs_point{
   char name[32];
   uint32_t name_id;
   _s_triplefloat position;
   int32_t _navMeshUIDOffaceref;
   int32_t _packedKeyOffaceref;
   _s_doublefloat facing_direction;
   float wait_time;
   float reached_radius;
};
struct OpportunityTaskLink{
   int16_t Objective;
   int16_t Task;
};
struct s_cookie_cutter__ObjectIdentifier{
   c_object_identifier object_ID;
};
struct AIHintSectorPoint{
   _s_triplefloat point;
   int32_t _navMeshUIDOffaceref;
   int32_t _packedKeyOffaceref;
};
struct user_hint_parallelogram{
   _s_triplefloat Point_0;
   _s_triplefloat Point_1;
   _s_triplefloat Point_2;
   _s_triplefloat Point_3;
   ParallelogramInvalidFlags invalid_points;
   uint8_t generated_pad733f[2];
};
struct NavMeshAttachment{
   _s_tagblock<NavMeshAttachment__NavMeshAttachmentId> attachments;
};
struct area_definition{
   char name[32];
   AIAreaFlags area_flags;
   _s_triplefloat runtime_relative_mean_point;
   int32_t _navMeshUIDOffaceref;
   int32_t _packedKeyOffaceref;
   float runtime_standard_deviation;
   NavMeshAttachment Nav_Mesh_Attachments;
   _s_tagblock<s_ai_sector_point> points;
   AIAreaGenerateFlags flags;
   float extrusion;
   float sink;
   float air_firing_point_density;
};
struct s_squad_definition_internal{
   _s_tagblock<s_cell_definition> cells;
};
struct s_spawn_point_definition{
   s_ai_spawn_conditions place_on;
   uint32_t name;
   int16_t cell;
   uint8_t generated_pad6f52[2];
   _s_triplefloat position;
   int32_t _navMeshUIDOffaceref;
   int32_t _packedKeyOffaceref;
   _s_doublefloat facing__yaw__pitch_;
   float roll;
   AISpawnPointFlags flags;
   uint8_t generated_padbc07[2];
   _s_tagref character;
   _s_tagref primary_weapon;
   _s_tagref secondary_weapon;
   _s_tagref equipment;
   _s_tagref vehicle;
   _s_tagref vehicle_configuration;
   AISeatPreference seat_type;
   UnitGrenadeType grenade_type;
   uint8_t generated_pad08bc[1];
   int16_t swarm_count;
   uint8_t generated_pad5571[2];
   uint32_t actor_variant_name;
   uint32_t vehicle_variant_name;
   uint32_t voice_designator;
   float initial_movement_distance;
   eStartingMovementType initial_movement_mode;
   int16_t emitter_vehicle;
   int16_t giant_body;
   int16_t biped_body;
   uint32_t placement_script;
   uint32_t activity_name;
   uint32_t movement_set;
   int16_t point_set;
   PatrolMode patrol_mode;
   _s_tagblock<s_patrol_point> points;
   int16_t vehicle_body;
   uint8_t generated_pada226[2];
};
struct s_spawn_formation_definition{
   s_ai_spawn_conditions place_on;
   uint32_t name;
   _s_triplefloat position;
   int32_t _navMeshUIDOffaceref;
   int32_t _packedKeyOffaceref;
   _s_doublefloat facing__yaw__pitch_;
   float roll;
   uint32_t formation;
   float initial_movement_distance;
   eStartingMovementType initial_movement_mode;
   uint8_t generated_padee0b[2];
   uint32_t placement_script;
   uint32_t activity_name;
   uint32_t movement_set;
   int16_t point_set;
   PatrolMode patrol_mode;
   _s_tagblock<s_patrol_point> points;
   c_spawn_formation_flags flags;
   uint8_t generated_pada156[3];
};
struct WarzoneObjectiveDefinitionMembership{
   int16_t warzone_objective_definition;
   char warzone_objective_label[32];
};
struct s_scenario_dumpling{
   _s_tagblock<s_dumpling_sector_point> inner_points;
   _s_tagblock<s_dumpling_sector_point> outer_points;
   float height;
   float sink;
   float inner_value;
   float outer_value;
   _s_triplefloat center_point;
   float trivial_cull_radius_squared;
   float bound_volume;
};
struct AcousticsTagZoneLod{
   float voxel_size;
   float breakpoint;
};
struct s_real_sector_point{
   _s_triplefloat position;
};
struct i343__Narrative__Beat{
   uint32_t Name;
   i343__Narrative__BeatActivation Activation;
   _s_tagblock<i343__Narrative__BeatActivation> Additional_Activations;
   i343__Narrative__BeatDeactivation Deactivation;
   _s_tagblock<i343__Narrative__BeatDeactivation> Additional_Deactivations;
   i343__Narrative__BeatFlags Flags;
   uint8_t generated_pad0447[3];
   _s_tagblock<i343__Narrative__BeatNewCameraProperties> New_Camera_Properties;
   _s_tagblock<i343__Narrative__BeatCameraProperties> Camera_Properties;
   _s_tagblock<i343__Narrative__BeatCompositionProperties> Composition_Properties;
   _s_tagblock<i343__Narrative__BeatNarrativeSequence> Narrative_Sequences;
   _s_tagblock<i343__Narrative__BeatAiControlProperties> AI_Control;
   _s_tagblock<i343__Narrative__BeatNewPlayerControlProperties> New_Player_Control;
   _s_tagblock<i343__Narrative__BeatPlayerControlProperties> Player_Control;
   _s_tagblock<i343__Narrative__BeatPlayerHUDProperties> Player_HUD_Properties;
   _s_tagblock<i343__Narrative__BeatPersistenceChanges> Persistence;
   _s_tagblock<i343__Narrative__BeatLightProperties> Light_Properties;
   _s_tagblock<i343__Narrative__BeatControlParameterProperties> Control_Parameter_Properties;
   _s_tagblock<i343__Narrative__BeatTransitionProperties> Transition_Properties;
};
struct i343__Narrative__PersistenceCheckDef{
   uint32_t Persistence_Key;
   i343__Narrative__PersistenceCompareType Compare_Type;
   uint8_t generated_pad6e63[3];
   int32_t Value;
};
struct i343__Narrative__CageAttachment{
   uint32_t Name;
   LevelObjectReference Object_Reference;
   i343__Narrative__CagePlacementType Placement_Type;
   uint8_t generated_pad643c[3];
   _s_tagref Cage_Definition;
   uint32_t Cage_Center_Point;
};
struct i343__Narrative__ControlParameter{
   uint32_t Parameter;
};
struct s_trigger_volume_triangle{
   _s_quadfloat plane_0;
   _s_quadfloat plane_1;
   _s_quadfloat plane_2;
   _s_quadfloat plane_3;
   _s_quadfloat plane_4;
   _s_doublefloat vertex_0;
   _s_doublefloat vertex_1;
   _s_doublefloat vertex_2;
   uint8_t pad[8];
};
struct i343__AI__SpawnPoint{
   LevelObjectReference Ref;
};
struct i343__AI__ReinforcementSquad{
   _s_tagref Squad_Specification;
};
struct i343__AI__SquadKeyword{
   uint32_t Keyword;
};
struct i343__AI__AirDrop__SquadSpawnerAirDropSettings{
   _s_tagref Air_Drop_Vehicle;
   _s_tagref Drop_Ship_Vehicle_Configuration;
   _s_tagref Air_Drop_Pilot_Character;
   i343__AI__AirDrop__PassengerSeatPreference Passenger_Seat_Preference;
   uint8_t generated_pade94c[3];
   float Passenger_Drop_Height;
   float Vehicle_Drop_Height;
   float Attack_After_Operations_Duration;
   i343__AI__AirDrop__SquadSpawnerOptionsFlags Flags;
   uint8_t generated_pad032d[3];
   i343__AI__AirDrop__SquadSpawnerFlightPathSettings Air_Drop_Fly_In_Settings;
   i343__AI__AirDrop__SquadSpawnerFlightPathSettings Air_Drop_Fly_Out_Settings;
};
struct i343__AI__PrecombatLink{
   LevelObjectReference PrecombatRef;
};
struct i343__AI__SquadFallbackCombatTetherPoint{
   LevelObjectReference Ref;
   int32_t Abandon_Previous_Tether_Point_Body_Count_Condition__Invalid_if_less_than_1_;
   i343__AI__SquadCombatTetherType Squad_Combat_Tether_Type;
   uint8_t generated_padcce6[3];
   float Squad_Combat_Tether_Distance;
   float Squad_Abandon_Tether_Distance;
   float Squad_Re_Tether_Distance;
};
struct i343__AI__EncounterBehaviorTreeInputReference{
   uint32_t Label;
   LevelObjectReference Ref;
};
struct i343__AI__CompositeChild{
   LevelObjectReference Ref;
};
struct i343__AI__ChildGUID{
   int32_t GUID;
};
struct LevelObjectReference{
   _s_tagblock<LevelObjectReferenceElement> path;
   int32_t guid;
};
struct i343__AI__EncounterZoneCondition{
   i343__AI__DecoratorType Decorator_Type;
   uint8_t generated_pada19b[1];
   i343__AI__DecoratorFlags Flags;
   int32_t Max_Limit;
   i343__AI__BoolComparison Assignment_Limit_Compare_Condition;
   uint8_t generated_paddcdf[3];
   int32_t Max_Bodies;
   i343__AI__BoolComparison Combat_Filter_Compare_Condition;
   uint8_t generated_pad7f6b[1];
   ActorCombatStatus Combat_Status;
   uint32_t Keyword;
   int32_t Min_Living_Count;
   i343__AI__VehicleTypeFilterFlags Vehicle_Compare_Condition;
   uint8_t generated_pad54e6[2];
   LevelObjectReference Player_Trigger_Volume_Reference;
   uint32_t Label;
   i343__AI__BehaviorTree__Relevance Min_Relevance;
   uint8_t generated_pad0831[3];
};
struct i343__AI__ChildEncounterElement{
   LevelObjectReference Ref;
};
struct i343__Bots__ExploreNeighbor{
   LevelObjectReference Neighbor_Ref;
};
struct i343__AI__ObjectiveTarget{
   LevelObjectReference Target;
};
struct i343__AI__BotExploreNeighbor{
   LevelObjectReference Neighbor_Ref;
};
struct PathingCostModifierFilter{
   NavigationType Navigation_Type;
   CharacterFilterType Character_Filter_Type;
   ObjectAISize AI_Size;
};
struct i343__AI__AIMarkupFilter{
   ActorType Actor_Type;
};
struct WindGustingFunction{
   FunctionDefinition Mapping;
};
struct HlodSimplygonCustomSphereCameraPath{
   uint32_t Quality;
   float Semisphere_Center_Pitch_Angle;
   float Semisphere_Center_Yaw_Angle;
   float Sphere_Coverage;
};
struct NamedHlodSettings{
   _s_tagref HLOD_settings_preset_list;
   uint32_t HLOD_settings_name;
};
struct GenericVolume{
   _s_tagblock<s_real_sector_point_generic_volume> Points;
   float height;
   float sink;
   _s_triplefloat center_point;
   float trivial_cull_radius_squared;
   _s_triplefloat aabbCenter;
   _s_triplefloat aabbExtents;
   _s_tagblock<GenericVolumeNativePoint2D> nativePoints2D;
};
struct SoundPlacementSplineControlPoint{
   _s_triplefloat position;
};
struct PlacementShapeOverride{
   float radius;
};
struct CompressedBspReferenceFlags{
   _s_tagblock<ScenarioBspReference> references;
   _s_data flags;
   int32_t bsp_index;
};
struct WarzoneObjectiveDefinitionTriggerVolume{
   char label[32];
   int16_t trigger_volume;
};
struct i343__Curve__SplinePlacementMetadata{
   _s_tagblock<i343__Curve__SplineRoadMetadata> spline_road_metadata;
   _s_tagblock<i343__Curve__SplineFlightPathMetadata> spline_flight_path_metadata;
};
struct i343__Curve__Curve3dDefinition{
   _s_tagblock<i343__Curve__Curve3dControlPoint> control_points;
};
struct BspMapRuntimeRefCounter{
   int16_t Bsp_Ref_Count;
   int16_t Layer_Ref_Count;
};
struct s_scenario_crate_datum{
   ObjectPathfindingPolicy Pathfinding_policy;
};
struct ScenarioEffectSceneryDatum{
   float effect_size_scale;
};
struct s_scenario_giant_datum{
   ObjectPathfindingPolicy Pathfinding_policy;
};
struct ScenarioDispenserDatum{
   ScenarioDispenserFlags flags;
};
struct s_scenario_control_datum{
   ScenarioControlFlags flags;
   int16_t DON_T_TOUCH_THIS;
   int16_t health_station_charges;
   ScenarioControlCharacterTypes allowed_players;
   uint8_t generated_padace0[2];
};
struct s_scenario_terminal_datum{
   int32_t pah_pah;
};
struct s_scenario_machine_datum{
   DeviceMachineFlags flags;
   ObjectPathfindingPolicy pathfinding_policy;
   uint8_t generated_padce30[2];
};
struct s_scenario_device_datum{
   int16_t power_group;
   int16_t position_group;
   float initial_animation_position;
   ScenarioDeviceFlags flags;
};
struct s_scenario_weapon_datum{
   int16_t rounds_left;
   int16_t rounds_loaded;
   WeaponAccelerateOverride Does_accelerate__moves_due_to_explosions__;
   uint8_t generated_pad5bcf[2];
   _s_tagref configuration;
};
struct s_scenario_equipment_datum{
   ScenarioEquipmentFlags equipment_flags;
};
struct s_scenario_vehicle_datum{
   ObjectPathfindingPolicy Pathfinding_policy;
   uint8_t generated_pad3f53[2];
   _s_tagref configuration;
};
struct s_scenario_unit_datum{
   float body_vitality;
   ScenarioUnitFlags flags;
};
struct s_scenario_multiplayer_object_properties{
   uint32_t megalo_label;
   uint32_t megalo_label_2;
   uint32_t megalo_label_3;
   uint32_t megalo_label_4;
   i343__NetProtocol__BondEnumHelper_i343__NetProtocol__MapVariant__PlacementMode___Enum game_engine_symmetric_placement;
   i343__NetProtocol__GameOptions__MultiplayerTeamDesignatorEnum owner_team;
   i343__NetProtocol__GameOptions__MultiplayerSquadEnum_FaberSafe owner_squad;
   uint8_t generated_pad2291[1];
   c_multiplayer_object_placement_spawn_flags spawn_flags;
   i343__NetProtocol__BondEnumHelper_i343__NetProtocol__Phonetic___Enum teleporter_channel;
   c_teleporter_passability teleporter_passability;
   i343__NetProtocol__BondEnumHelper_i343__NetProtocol__Phonetic___Enum trait_zone_channel;
   uint8_t generated_pad08b0[3];
   float trait_zone_seconds_to_apply;
   float phantomVelocityMultiplier;
   float phantomAccelerationMultiplier;
   float boundary_width_or_radius;
   float boundary_box_length;
   float boundary_positive_height;
   float boundary_negative_height;
   i343__NetProtocol__BondEnumHelper_i343__NetProtocol__BoundaryType___Enum boundary_shape;
   uint8_t boundary_pad[1];
   uint8_t boundary_pad2[2];
   int16_t initial_spawn_delay;
   int16_t spawn_time;
   int16_t abandonment_time;
   uint8_t generated_padbbfb[2];
   uint32_t location_name;
   _s_tagblock<SplineNode> spline;
   _s_tagblock<SpawnPointMultiplayerProperties> SpawnPointProperties;
   float respawn_weight;
   WarzoneObjectiveDefinitionMembership warzone_objective_definition_membership;
   uint8_t spawn_order;
   MultiplayerObjectPropertyFlags Multiplayer_Property_Flags;
   _s_tagref WeaponPad_object_to_spawn;
   _s_tagref WeaponPad_object_to_spawn_configuration;
   float WeaponPad_respawn_time;
   _s_tagblock<TerminalRedeemableObjectDefinition> terminal_redeemable_objects;
   MultiplayerProperties__MapZoneFlags MapZones;
   MultiplayerProperties__MapZoneConfigurationFlags MapZoneConfigurations;
   uint8_t generated_pad3c72[2];
};
struct s_scenario_scenery_datum{
   ObjectPathfindingPolicy Pathfinding_policy;
   int16_t havok_mopp_index;
   int16_t ai_spawning_squad;
};
struct s_scenario_object_permutation{
   uint32_t variant_name;
   c_object_change_color_flags active_change_colors;
   uint8_t generated_paddcc3[3];
   uint32_t Style_Id;
   _s_rgb primary_color;
   _s_rgb secondary_color;
   _s_rgb tertiary_color;
   _s_rgb quaternary_color;
};
struct s_scenario_object_datum{
   c_scenario_object_placement_flags placement_flags;
   _s_triplefloat position;
   _s_triplefloat rotation;
   float scale;
   float gravity_override;
   c_scenario_object_gravity_flags gravity_flags;
   c_object_bsp_placement_policy bsp_policy;
   ScenarioObjectScriptFlags script_flags;
   uint8_t generated_pad1c32[1];
   s_property_collection scriptable_properties;
   CompressedBspReferenceFlags bsp_flags;
   TransformFlags transform_flags;
   NavMeshCuttingOverride Nav_Mesh_Cutting;
   c_scenario_object_navmesh_flags Nav_Mesh_Flags;
   int32_t editor_folder;
   c_object_identifier object_id;
   uint8_t runtimeObjectHandle[4];
   uint32_t module_id;
   s_scenario_object_parent parent_id;
   uint32_t in_game_maps_material_id;
   float Directional_Acceleration_Mult__;
   _s_tagref Custom_Object_Lighting_Reference;
   _s_tagblock<i343__Physics__ManCannonBallisticArcData> Man_Cannon_Ballistic_Arc_Data;
   _s_tagblock<i343__SpartanTracking__ObjectDefinition> Spartan_Tracking;
   c_scenario_object_layer_flags Layer_flags;
   uint8_t generated_pad68e7[3];
   _s_tagblock<i343__Objects__Association> associates;
};
struct EditorMetadata{
   char folder_name[256];
   _s_triplefloat local_space_pivot_point_position;
};
struct AcousticPortalPlacementMapEntry{
   int32_t acoustic_portal_placement_reference;
};
struct AcousticZonePlacementMapEntry{
   int32_t acoustic_zone_placement_reference;
};
struct EffectPlacementMapEntry{
   int32_t effect_placement_reference;
};
struct NodeGraphPlacementMapEntry{
   int32_t node_graph_placement_reference;
};
struct SoundPlacementMapEntry{
   int32_t sound_placement_reference;
};
struct PlacementIndexData{
   uint32_t compressedHandle;
};
struct ModuleComponentLookupTable{
   _s_tagblock<ModuleComponentLookupEntry> Component_Table;
};
struct BlockRange{
   uint32_t Begin;
   uint32_t End;
};
struct LegacyBspKDTree{
   _s_tagblock<s_structure_super_node_mapping> super_node_parent_mappings;
   _s_tagblock<SuperNodeRecursableMasks> super_node_recursable_masks;
   _s_tagblock<s_structure_super_node_traversal_geometry> structure_super_node_traversal_geometry_block;
   s_collision_kd_hierarchy_static instance_kd_hierarchy;
};
struct ScenarioClusterPointsBlock{
   _s_triplefloat centroid;
};
struct ScenarioZoneSetLipsyncBlock{
   _s_tagref dummy;
};
struct ScenarioZoneSetBudgetOverride{
   int32_t env_bitmap;
   int32_t env_object_bitmap;
   int32_t env_geometry;
   int32_t env_object_geometry;
};
struct StructureDesignFlagStorageArray{
   uint32_t flag_data;
};
struct StructureDesignReferenceFlags{
   _s_tagblock<StructureDesignReference> references;
   StructureDesignFlagStorageArray flags[];
};
struct BspReferenceFlags{
   _s_tagblock<ScenarioBspReference> references;
   BspFlagStorageArray flags[];
};
struct BspClusterToRoomIndices{
   int16_t room_index;
};
struct s_game_audibility_bsp_mapping{
   int32_t first_room_index;
   int32_t room_index_count;
};
struct s_game_audibility_bsp_game_portal_mapping{
   int32_t first_door_occluder_index;
   int32_t door_occluder_count;
};
struct EncodedRoomDistancesBlock{
   int8_t encoded_data;
};
struct AiDeafeningEncodedPasBlock{
   int32_t encoded_data;
};
struct RoomDoorPortalEncodedPasBlock{
   int32_t encoded_data;
};
struct DoorEncodedPasBlock{
   int32_t encoded_data;
};
struct s_scenario_zone_set_structure_bsp_pvs{
   _s_tagblock<s_scenario_zone_set_cluster_seam_cluster_mappings> bsp_cluster_mapings;
};
struct BspFlagStorageArray{
   uint32_t flag_data;
};
struct LightingVariant{
   uint32_t variant_name;
   _s_tagref structure_lightmap;
   _s_tagref lighting_settings;
   _s_tagblock<LightingObjectsIndex> Light_Indices;
   _s_tagblock<LightingObjectsIndex> Region_Volume_Indices;
   _s_tagblock<LightingObjectsIndex> Cubemap_Volume_Indices;
   int16_t sky_reference;
   uint8_t generated_pad17c3[2];
};
struct CompositionDefinitionReference{
   _s_tagref Composition_Reference;
};
struct i343__TerrainVolume{
   uint32_t Name;
   i343__TerrainDefinition Terrain_Definition;
   int32_t Volume_Composition_Order;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct i343__TerrainPlacement{
   i343__TerrainDefinition Terrain_Definition;
   _s_tagref runtime_terrain;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct CubemapVolume{
   uint32_t Name;
   int32_t Guid;
   CubemapFlagsClass Flags;
   s_scenario_dumpling Dumpling;
   _s_tagref Cubemap_Bitmap;
   CubemapBoolean Enable_Parallax_Correction;
   int16_t Cubemap_Volume_Priority;
   _s_triplefloat Cubemap_Origin;
   _s_triplefloat Depth_Positive;
   _s_triplefloat Depth_Negative;
   CubemapBoolean Active_Volume;
   CubemapSizeClassification Maximum_cubemap_size;
   _s_triplefloat Intensity;
   float Self_illum_Scale_Down;
   _s_tagblock<EditorMetadata> EditorMetadata;
   _s_tagref owner_bsp;
   uint32_t owner_variant;
   int16_t runtime_bsp_index;
   int16_t runtime_variant_index;
   float Blend_Distance;
   CubemapVolumeType Cubemap_Volume_Type;
   float Orientation;
   _s_tagref Cubemap_Depth_Bitmap;
   float Depth_Blend_Range;
   float Intensity_Scale;
   CubemapBoolean Tintable;
   CubemapBoolean Runtime_Force_Add_Inactive;
   float Relevancy_Radius;
};
struct AirProbeRegionVolume{
   uint32_t Name;
   GenericVolume Volume;
   _s_tagblock<EditorMetadata> EditorMetadata;
   _s_tagref owner_bsp;
   uint32_t owner_variant;
   int16_t runtime_bsp_index;
   int16_t runtime_variant_index;
   float Probe_XY_spacing;
   float Probe_Z_spacing;
   int32_t Volume_priority;
   float Blend_radius_XY;
   float Blend_radius_Z;
   AirProbeRegionVolumeFlags Flags;
   uint8_t generated_pad0802[2];
   float Probe_offset_above_ground;
   int32_t Number_of_Z_layers;
};
struct StructureLightDefinition{
   int32_t guid;
   _s_triplefloat position;
   _s_triplefloat facing;
   LightBoolean Active;
   uint8_t generated_pad2288[3];
   LightDefinition Midnight_Light_Parameters;
   _s_tagblock<EditorMetadata> EditorMetadata;
   _s_tagref owner_bsp;
   uint32_t owner_variant;
   int16_t runtime_bsp_index;
   int16_t runtime_variant_index;
   int32_t editor_folder;
   uint32_t module_id;
};
struct i343__HexGrid__HexRuntime{
   _s_tagref runtime_geo;
   _s_tagref material_palette;
   _s_tagblock<i343__HexGrid__RuntimePlacement> placements;
   _s_tagblock<i343__HexGrid__QuadTreeNode> quadtree;
   int64_t hex_runtime;
   int32_t m_maximumVisibleSides;
   int32_t m_maximumVisibleCaps;
};
struct i343__HexGrid__HexPlacements{
   _s_tagblock<i343__HexGrid__Placement> placements;
   _s_tagref hex_grid_asset;
   _s_tagref generatedModel;
   _s_tagref generatedCollisionModel;
   _s_tagref generatedMaterialPalette;
};
struct FoliageAssetPlacement{
   uint32_t name;
   int32_t guid;
   _s_tagref prefab_reference;
   uint32_t variant_name;
   _s_triplefloat position;
   _s_triplefloat rotation;
   _s_triplefloat scale;
   ScenarioPrefabPlacementFlags flags;
   PrefabFlagOverride cinema_only;
   PrefabFlagOverride exclude_from_cinema;
   PrefabFlagOverride remove_from_dynamic_shadow_map;
   PrefabFlagOverride exclude_from_intel_map;
   uint8_t generated_pad651e[2];
   uint32_t in_game_maps_material;
   PrefabFlagOverride ignore_cubemap_volume;
   PrefabFlagOverride Exclude_from_broadphase_calculation;
   PrefabPathfindingPolicy pathfinding_policy;
   PrefabLightmappingPolicy lightmapping_policy;
   StaticCollisionDecalsOverridePolicy collision_decals_policy;
   uint8_t generated_padb1d3[3];
   _s_triplefloat probe_grid_capture_offset;
   float override_lightmap_resolution_scale;
   float decorator_generator_density;
   float LOD_distance_override_1;
   float LOD_distance_override_2;
   float LOD_distance_override_3;
   float LOD_distance_override_4;
   float LOD_distance_override_5;
   float LOD_distance_override_6;
   float LOD_distance_override_7;
   float LOD_distance_override_8;
   float LOD_distance_override_9;
   float LOD_distance_override_10;
   float LOD_distance_override_11;
   float LOD_distance_override_12;
   float LOD_distance_override_13;
   float LOD_distance_override_14;
   float LOD_distance_override_15;
   float LOD_distance_override_16;
   float LOD_fade_after_override;
   _s_tagblock<MaterialOverrideEntry> instance_material_overrides;
   _s_tagblock<MaterialOverrideEntry> material_overrides;
   _s_tagblock<EditorMetadata> EditorMetadata;
   _s_tagref owner_bsp;
   i343__Physics__TriggerVolumeCallbackType Trigger_Volume_Callback;
   uint8_t generated_padfe88[3];
   _s_tagref foliage_asset;
};
struct ScenarioAssetCollectionPlacement{
   uint32_t name;
   int32_t guid;
   _s_tagref prefab_reference;
   uint32_t variant_name;
   _s_triplefloat position;
   _s_triplefloat rotation;
   _s_triplefloat scale;
   ScenarioPrefabPlacementFlags flags;
   PrefabFlagOverride cinema_only;
   PrefabFlagOverride exclude_from_cinema;
   PrefabFlagOverride remove_from_dynamic_shadow_map;
   PrefabFlagOverride exclude_from_intel_map;
   uint8_t generated_pad651e[2];
   uint32_t in_game_maps_material;
   PrefabFlagOverride ignore_cubemap_volume;
   PrefabFlagOverride Exclude_from_broadphase_calculation;
   PrefabPathfindingPolicy pathfinding_policy;
   PrefabLightmappingPolicy lightmapping_policy;
   StaticCollisionDecalsOverridePolicy collision_decals_policy;
   uint8_t generated_padb1d3[3];
   _s_triplefloat probe_grid_capture_offset;
   float override_lightmap_resolution_scale;
   float decorator_generator_density;
   float LOD_distance_override_1;
   float LOD_distance_override_2;
   float LOD_distance_override_3;
   float LOD_distance_override_4;
   float LOD_distance_override_5;
   float LOD_distance_override_6;
   float LOD_distance_override_7;
   float LOD_distance_override_8;
   float LOD_distance_override_9;
   float LOD_distance_override_10;
   float LOD_distance_override_11;
   float LOD_distance_override_12;
   float LOD_distance_override_13;
   float LOD_distance_override_14;
   float LOD_distance_override_15;
   float LOD_distance_override_16;
   float LOD_fade_after_override;
   _s_tagblock<MaterialOverrideEntry> instance_material_overrides;
   _s_tagblock<MaterialOverrideEntry> material_overrides;
   _s_tagblock<EditorMetadata> EditorMetadata;
   _s_tagref owner_bsp;
   i343__Physics__TriggerVolumeCallbackType Trigger_Volume_Callback;
   uint8_t generated_padfe88[3];
   _s_tagref asset_collection;
};
struct ScenarioStaticAssetPlacement{
   uint32_t name;
   int32_t guid;
   _s_tagref prefab_reference;
   uint32_t variant_name;
   _s_triplefloat position;
   _s_triplefloat rotation;
   _s_triplefloat scale;
   ScenarioPrefabPlacementFlags flags;
   PrefabFlagOverride cinema_only;
   PrefabFlagOverride exclude_from_cinema;
   PrefabFlagOverride remove_from_dynamic_shadow_map;
   PrefabFlagOverride exclude_from_intel_map;
   uint8_t generated_pad651e[2];
   uint32_t in_game_maps_material;
   PrefabFlagOverride ignore_cubemap_volume;
   PrefabFlagOverride Exclude_from_broadphase_calculation;
   PrefabPathfindingPolicy pathfinding_policy;
   PrefabLightmappingPolicy lightmapping_policy;
   StaticCollisionDecalsOverridePolicy collision_decals_policy;
   uint8_t generated_padb1d3[3];
   _s_triplefloat probe_grid_capture_offset;
   float override_lightmap_resolution_scale;
   float decorator_generator_density;
   float LOD_distance_override_1;
   float LOD_distance_override_2;
   float LOD_distance_override_3;
   float LOD_distance_override_4;
   float LOD_distance_override_5;
   float LOD_distance_override_6;
   float LOD_distance_override_7;
   float LOD_distance_override_8;
   float LOD_distance_override_9;
   float LOD_distance_override_10;
   float LOD_distance_override_11;
   float LOD_distance_override_12;
   float LOD_distance_override_13;
   float LOD_distance_override_14;
   float LOD_distance_override_15;
   float LOD_distance_override_16;
   float LOD_fade_after_override;
   _s_tagblock<MaterialOverrideEntry> instance_material_overrides;
   _s_tagblock<MaterialOverrideEntry> material_overrides;
   _s_tagblock<EditorMetadata> EditorMetadata;
   _s_tagref owner_bsp;
   i343__Physics__TriggerVolumeCallbackType Trigger_Volume_Callback;
   uint8_t generated_padfe88[3];
};
struct i343__UnitRecorder__UnitRecordingReferences{
   _s_tagref recording;
};
struct StaticDecalCache{
   int32_t bsp_number;
   _s_tagblock<CachedDecalSystem> decal_system;
};
struct ComposerShowStage{
   _s_tagref Composition;
   uint32_t Instance_Name;
   _s_triplefloat position;
   _s_triplefloat orientation;
   uint32_t Zone_Set_Name;
   LevelObjectReference Streaming_Reference_Override;
   c_object_bsp_placement_policy bsp_policy;
   uint8_t generated_pad8015[3];
   CompressedBspReferenceFlags Manual_Bsp_Flags;
   _s_tagblock<ComposerPuppetOverride> Puppets;
   _s_tagblock<EditorMetadata> EditorMetadata;
   int32_t editor_folder;
   uint32_t module_id;
   ComposerShowStageFlags Composer_Show_Stage_Flags;
   GenericVolume Stage_Volume;
   StageVolumeFlags Stage_Volume_Flags;
   StageStreamingFlags Streaming_Flags;
   uint8_t generated_pad6634[3];
   float Stream_Composition_Resources_Radius_Override;
   float Stream_Pinned_Resources_Radius_Override;
   int32_t Guid;
   LevelObjectParentKitPath Parent_Kits;
};
struct s_scenario_cheap_particle_system{
   int16_t palette_index;
   uint8_t generated_pad3d05[2];
   _s_triplefloat position;
   _s_triplefloat rotation;
};
struct s_objective{
   char name[32];
   _s_tagblock<s_opposing_objective> opposing_objectives;
   c_objective_flags objective_flags;
   int16_t zone_index;
   int16_t first_task_index;
   int16_t editor_folder;
   _s_tagblock<s_task_definition> tasks;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct s_scenario_editor_folder{
   int32_t parent_folder;
   uint32_t name;
   _s_tagref prototype_script;
   s_property_collection scriptable_properties;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_editor_folder__ModuleFlags flags;
   uint8_t generated_pad9b2d[3];
};
struct s_flock_instance{
   uint32_t Flock_Name;
   _s_tagblock<EditorMetadata> EditorMetadata;
   _s_triplefloat Position;
   _s_tagref Flock_Asset;
   CompressedBspReferenceFlags active_BSPs;
   int16_t bounding_volume;
   uint8_t generated_pad2fe7[2];
   _s_tagblock<s_flock_source> Flock_Sources;
   eDestinationSystemType Destination_System_Type;
   EnableFlag Looped_Path;
   c_flock_instance_flags Placement_Flags;
   _s_tagref Creature_Asset;
   uint32_t Creature_Variant_Name;
   int32_t Boid_Count;
   FlockBehaviorType Initial_Behavior;
   FlockBehaviorType Second_Behavior;
   FlockReactionBehaviorType Reaction_Behavior;
   FlockBehaviorType Reaction_Navigation_Behavior;
   FlockReactionBehaviorType Second_Reaction_Behavior;
   FlockBehaviorType Second_Reaction_Navigation_Behavior;
   FlockReactionBehaviorType Despawn_Reaction_Behavior;
   FlockBehaviorType Despawn_Reaction_Navigation_Behavior;
   GeneralOverrideFlags General_Override_Flags;
   uint8_t generated_pad7bfc[3];
   float Torus_Inner_Radius;
   float Torus_Cross_Section_Radius;
   CirclingDirectionType Circling_Direction;
   uint8_t generated_padf423[3];
   float Leveling_Coefficient;
   CirclingOverrideFlags Circling_Override_Flags;
   uint8_t generated_padf6f9[3];
   float Spawn_Cylinder_Radius;
   float Spawn_Cylinder_Height;
   PerchingWanderingOverrideFlags Perching_Wandering_Override_Flags;
   uint8_t generated_padeb3d[3];
   _s_floatrange Wandering_Time;
   _s_floatrange Grazing_Time;
   float Change_of_Direction_Time;
   WanderingBehaviorFlags Flags;
   EnableFlag Wandering_to_same_source_point_is_allowed;
   uint8_t generated_pad094b[2];
   WanderingOverrideFlags Wandering_Override_Flags;
   uint8_t generated_pad7a11[3];
   SpawnSettingsFlags Spawn_Flags;
   EnableFlag Generate_Spawn_Point_for_Each_Boid;
   uint8_t generated_padd75d[2];
   int32_t Number_of_Spawn_Points;
   float Distance_of_Importance;
   float Despawn_Distance;
   float Spawn_Distance;
   float Minimum_Respawn_Delay;
   _s_floatrange Time_Before_Dehydration_Hide_is_Forced;
   float Distance_Enough_for_Dehydration_Hide;
   SpawnPriority Spawn_Priority;
   EnableFlag Disable_Backward_Flock_Relevancy_Reduce;
   uint8_t generated_padbd7c[2];
   _s_floatrange Production_Frequency_Bounds;
   float High_LOD_Distance;
   SpawnOverrideFlags Spawn_Override_Flags;
   EnableFlag Not_Initially_Spawned;
   int16_t Spawn_trigger_volume;
   EnableFlag Procedural_Spawn_In_Player_Visibility;
   uint8_t generated_padd74b[3];
   _s_floatrange Procedural_Spawn__Delay_Bounds;
   float ecology_margin;
   float source_scale_to_0_radius;
   float sink_scale_to_0_radius;
   float flock_destroy_duration;
   int32_t enemy_flock;
   float enemy_flock_max_target_distance;
   float constant_throttle_override;
   int32_t editor_folder;
   uint32_t module_id;
   _s_tagblock<s_flock_destination> Flock_Destinations;
};
struct s_scenario_cutscene_title{
   uint32_t name;
   int32_t guid;
   uint32_t objective_title;
   uint32_t objective_description;
   _s_floatrange text_bounds_X;
   _s_floatrange text_bounds_Y;
   FontList__TextJustification justification;
   TextVerticalJustification vertical_justification;
   FontList__FontId font;
   uint8_t generated_pad7734[2];
   _s_rgb text_color;
   _s_rgb shadow_color;
   float fade_in_time__seconds_;
   float up_time__seconds_;
   float fade_out_time__seconds_;
   float letter_print_time;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct scenario_cutscene_camera_point{
   ScenarioCutsceneCameraPointFlags flags;
   ScenarioCameraType type;
   char name[32];
   _s_triplefloat position;
   _s_triplefloat orientation;
   int16_t zone_set;
   uint8_t generated_pad2c94[2];
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct scenario_cutscene_flag{
   uint32_t name;
   _s_triplefloat position;
   _s_triplefloat facing;
   uint32_t module_id;
   int32_t editor_folder;
   int16_t source_bsp;
   uint8_t generated_padce64[2];
   _s_tagblock<EditorMetadata> EditorMetadata;
   int32_t Guid;
};
struct cs_point_set{
   char name[32];
   _s_tagblock<cs_point> points;
   int16_t bsp_index;
   uint8_t generated_pad901e[2];
   AIPointSetFlags flags;
   AIPointSetTraversalFlags traversal_flags;
   int32_t editor_folder;
   uint32_t module_id;
   _s_tagblock<EditorMetadata> EditorMetadata;
   WarzoneObjectiveDefinitionMembership warzone_objective_definition_membership;
   uint8_t generated_paddcd3[2];
};
struct ai_recording_reference_definition{
   char recording_name[32];
};
struct OpportunityAreaData{
   _s_tagblock<AIHintSectorPoint> points;
   float z_height;
   float z_sink;
   uint32_t Name;
   _s_triplefloat Mean_Position;
   float Std_Deviation;
   uint8_t Area_Bounds[24];
   _s_tagblock<OpportunityTaskLink> Tasks;
   int32_t Priority;
   float Distribution_Range;
   float Distribution_Probability;
   OpportunityAreaData__DistributionType Distribution_Type;
   int8_t Max_Uses;
   int8_t User_Limit;
   uint8_t generated_padc2c0[1];
   _s_tagref Character_Filter_Tag;
   _s_tagref Weapon_Filter_Tag;
   OpportunityAreaData__CombatEffect Combat_Effect;
   uint8_t generated_paddca1[3];
   uint32_t Stimulus;
   uint32_t Script;
   int8_t isValid;
   uint8_t generated_pad2956[3];
   _s_triplefloat position;
   int32_t _navMeshUIDOffaceref;
   int32_t _packedKeyOffaceref;
   float attraction_radius;
   OpportunityAreaData__OpportunityType Opportunity_Type;
   uint8_t generated_pad4337[3];
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct i343__AI__NavSeedPoint{
   uint32_t Name;
   _s_triplefloat Position;
};
struct NavMeshArea{
   _s_tagblock<AIHintSectorPoint> points;
   uint32_t name;
   float z_height;
   float z_sink;
   NavMeshAreaType type;
   uint8_t isValid;
   uint8_t generated_pad7d37[3];
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct s_cookie_cutter{
   uint32_t name;
   _s_tagblock<AIHintSectorPoint> points;
   _s_tagblock<s_cookie_cutter__ObjectIdentifier> pointsObjectIds;
   float z_height;
   float z_sink;
   CookieCutterType type;
   int16_t pad;
   _s_tagblock<EditorMetadata> EditorMetadata;
   int8_t invalid;
   uint8_t generated_pad8e8a[3];
};
struct user_hint_jump{
   PathfindingHintType link_type;
   int16_t Squad_group_filter;
   int32_t hint_data_0;
   int16_t hint_data_1;
   uint8_t hint_data_2;
   uint8_t pad1;
   uint32_t name;
   UserHintGeometryFlags Flags;
   CharacterJumpHeight force_jump_height;
   UserHintJumpTypeFlags control_flags;
   uint8_t generated_pad04d0[2];
   user_hint_parallelogram geometry;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct zone_definition{
   char name[32];
   AIZoneFlags flags;
   uint8_t generated_pad0eda[2];
   int32_t editor_folder_index;
   _s_tagblock<area_definition> areas;
   NavMeshAttachment Nav_Mesh_Attachments;
   CompressedBspReferenceFlags disallowed_attachment_bsps;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct s_squad_definition{
   char name[32];
   c_squad_flags flags;
   e_campaign_team team;
   int16_t parent;
   CompressedBspReferenceFlags bsp_flags;
   int16_t initial_zone;
   int16_t initial_objective;
   int16_t initial_task;
   uint8_t generated_pad8aa2[2];
   int32_t editor_folder;
   _s_tagblock<s_spawn_formation_definition> spawn_formations;
   _s_tagblock<s_spawn_point_definition> spawn_points;
   uint32_t module_id;
   uint32_t template;
   int32_t squad_template_index;
   s_squad_definition_internal designer;
   s_squad_definition_internal templated;
   WarzoneObjectiveDefinitionMembership warzone_objective_definition_membership;
   c_object_bsp_placement_policy bsp_policy;
   uint8_t generated_padd757[1];
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct squad_group_definition{
   char name[32];
   int16_t parent;
   int16_t initial_objective;
   int32_t editor_folder;
   uint32_t module_id;
   WarzoneObjectiveDefinitionMembership warzone_objective_definition_membership;
   uint8_t generated_pad5300[2];
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct AreaGeneratorDefinition{
   char name[32];
   _s_tagblock<EditorMetadata> EditorMetadata;
   _s_triplefloat position;
   _s_triplefloat orientation;
   float radius;
   float vertical_radius;
   float area_min_radius;
   float area_max_radius;
   float area_height;
   float area_spacing;
   float area_point_count;
};
struct scenario_decal{
   _s_tagref asset;
   scenario_decal__c_decalPlacementFlags flags;
   uint8_t generated_pad9ec6[3];
   CompressedBspReferenceFlags manual_bsp_flags;
   _s_triplefloat orientation;
   _s_triplefloat position;
   float scale_x;
   float scale_y;
   float cull_angle;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct recorded_animation_definition{
   char name[32];
   int8_t version;
   int8_t raw_animation_data;
   int8_t unit_control_data_version;
   uint8_t generated_pade32d[1];
   int16_t length_of_animation;
   uint8_t generated_padc94c[2];
   _s_data recorded_animation_event_stream;
};
struct AcousticsTagPortal{
   int32_t guid;
   uint32_t name;
   AcousticsTagPortal__AcousticPortalTransmissivityType transmissivity_type;
   uint8_t generated_pad3408[3];
   LevelObjectReference manual_zone_front;
   LevelObjectReference manual_zone_back;
   int32_t detail;
   float tolerance;
   AcousticsTagPortal__AcousticPortalFlags flags;
   uint8_t generated_pad4de9[2];
   float min_transmissivity;
   float max_transmissivity;
   float min_openness;
   float max_openness;
   _s_triplefloat door_center_offset;
   _s_tagref front_entry_sound;
   _s_tagref front_exit_sound;
   _s_tagref back_entry_sound;
   _s_tagref back_exit_sound;
   _s_triplefloat position;
   _s_triplefloat rotation;
   _s_doublefloat shearX;
   _s_doublefloat shearY;
   _s_doublefloat shearZ;
   _s_triplefloat extents;
   _s_tagblock<EditorMetadata> EditorMetadata;
   BspMapRuntimeRefCounter BspMapRuntimeRefCounter;
};
struct AcousticsTagZone{
   int32_t guid;
   uint32_t name;
   AcousticsTagZone__AcousticZonePlacementFlags placement_flags;
   AcousticsTagZone__AcousticZoneConfigFlags zone_config_flags;
   AcousticsTagZone__AcousticZonePropagateType type;
   uint8_t generated_pada6e0[1];
   _s_tagblock<AcousticsTagZoneLod> voxel_LODs;
   float voxel_LOD_Z_ratio;
   float transition_speed;
   _s_tagref base_air_sound;
   _s_tagref base_air_sweetener_sound;
   AcousticsTagZone__AcousticZoneSpaceCategory environment_type;
   _s_tagref reverb_settings;
   uint32_t mix_state_group;
   uint32_t mix_state_value;
   _s_triplefloat position;
   _s_triplefloat rotation;
   _s_triplefloat scale;
   s_scenario_dumpling Dumpling;
   int16_t local_Priority;
   uint8_t kit_depth;
   uint8_t generated_padc0c1[1];
   _s_tagblock<EditorMetadata> EditorMetadata;
   BspMapRuntimeRefCounter BspMapRuntimeRefCounter;
};
struct scenario_trigger_volume{
   uint32_t name;
   uint32_t object;
   int32_t object_name;
   int16_t runtime_node_index;
   uint8_t generated_padb464[2];
   uint32_t node_name;
   e_trigger_volume_type type;
   eTriggerVolumeBehavior behavior;
   TriggerVolumeFlags flags;
   uint32_t zone_set_name;
   uint32_t module_id;
   _s_triplefloat forward;
   _s_triplefloat up;
   _s_triplefloat orientation;
   _s_triplefloat position;
   int32_t _navMeshUIDOffaceref;
   int32_t _packedKeyOffaceref;
   _s_triplefloat extents;
   float z_height;
   float z_sink;
   _s_tagblock<s_real_sector_point> sector_points;
   _s_tagblock<s_trigger_volume_triangle> runtime_triangles;
   float runtime_sector_bounds_x0;
   float runtime_sector_bounds_x1;
   float runtime_sector_bounds_y0;
   float runtime_sector_bounds_y1;
   float runtime_sector_bounds_z0;
   float runtime_sector_bounds_z1;
   float C;
   int16_t kill_trigger_volume;
   uint8_t generated_padce45[2];
   int32_t editor_folder;
   _s_tagblock<EditorMetadata> EditorMetadata;
   int32_t Guid;
};
struct AmbientActionPointInstance{
   uint32_t ambient_action_point_name;
   _s_triplefloat position;
   _s_doublefloat yaw__pitch;
   _s_tagref asset;
   float max_distance_override;
   uint32_t debug_squad_override__only_used_for_debugging_compositions_;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct scenario_player_starting_location{
   _s_triplefloat position;
   int32_t _navMeshUIDOffaceref;
   int32_t _packedKeyOffaceref;
   float facing;
   float pitch;
   uint32_t name;
   int32_t editor_folder;
   uint32_t module_id;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct scenario_starting_profile{
   char name[32];
   float starting_health_damage;
   float starting_shield_damage;
   _s_tagref primary_weapon;
   int16_t primaryrounds_loaded;
   int16_t primaryrounds_total;
   _s_tagref primary_weapon_configuration;
   uint32_t primary_weapon_variant_name;
   _s_tagref secondary_weapon;
   int16_t secondaryrounds_loaded;
   int16_t secondaryrounds_total;
   _s_tagref secondary_weapon_configuration;
   uint32_t secondary_weapon_variant_name;
   int8_t starting_fragmentation_grenade_count;
   int8_t starting_plasma_grenade_count;
   int8_t starting_lightning_grenade_count;
   int8_t starting_gravity_grenade_count;
   int8_t starting_spike_grenade_count;
   int8_t starting_pulse_grenade_count;
   int8_t starting_grenade_type_7_count;
   int8_t starting_grenade_type_8_count;
   _s_tagref starting_equipment;
   uint32_t starting_tactical_package;
   uint32_t starting_support_upgrade;
   int16_t editor_folder;
   uint8_t generated_padc11b[2];
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct s_scenario_soft_ceiling{
   ScenarioSoftCeilingFlags flags;
   ScenarioSoftCeilingRuntimeFlags runtime_flags;
   uint32_t name;
   e_soft_ceiling_type type;
   uint8_t generated_paddf27[2];
};
struct i343__Example__Entity{
   uint32_t Name;
   _s_triplefloat Position;
   int32_t editor_folder;
   uint32_t moduleId;
};
struct i343__Narrative__Moment{
   uint32_t Name;
   GenericVolume Volume;
   i343__Narrative__MomentFlags Flags;
   uint8_t generated_pad9bbf[3];
   LevelObjectReference Blink_Location;
   _s_tagblock<i343__Narrative__ControlParameter> Control_Parameters;
   _s_tagblock<i343__Narrative__CageAttachment> Cage_Attachments;
   _s_tagblock<i343__Narrative__PersistenceCheckDef> Persistence_Checks;
   _s_tagblock<i343__Narrative__Beat> Beats;
   _s_tagblock<s_trigger_volume_triangle> Runtime_Triangles;
   _s_tagblock<EditorMetadata> Editor_Metadata;
   int32_t Editor_Folder;
   uint32_t Module_ID;
   int32_t Guid;
};
struct i343__ActivationVolume{
   uint32_t Name;
   GenericVolume Volume;
   i343__ActivationVolumeFlags Flags;
   i343__eActivationVolumeActivatorType Activator_Type;
   uint8_t generated_padc56b[2];
   float Exit_Delay;
   float Vicinity_Trigger_Distance;
   float Up_Vicinity_Trigger_Additional_Distance;
   _s_tagblock<s_trigger_volume_triangle> Runtime_Triangles;
   _s_tagblock<EditorMetadata> Editor_Metadata;
   int32_t Editor_Folder;
   uint32_t Module_ID;
};
struct i343__ActivatableRegion__ActivatableRegion{
   uint32_t Name;
   _s_triplefloat Position;
   _s_tagblock<EditorMetadata> Editor_Metadata;
   i343__ActivatableRegion__ActivatableRegionType Region_Type;
   uint8_t generated_pad1d75[3];
   float Radius;
   i343__ActivatableRegion__RegionState Active;
   uint8_t generated_pad0394[3];
   int32_t editor_folder;
   uint32_t module_id;
};
struct i343__AI__ReinforcementPoint{
   i343__AI__ReinforcementPointFlags Reinforcement_Point_Flags;
   uint8_t generated_pad545c[2];
   uint32_t Name;
   _s_triplefloat Position;
   _s_triplefloat Orientation;
   i343__AI__ReinforcementActivationCondition Reinforcement_Activation_Condition;
   i343__AI__ReinforcementStyle Reinforcement_Point_Type;
   i343__AI__ReinforcementSquadIterationStyle Reinforcement_Squad_Iteration_Style;
   uint8_t generated_pad6e3d[1];
   _s_tagblock<i343__AI__ReinforcementSquad> Reinforcement_Squads;
   i343__AI__ReinforcementSpawnPointSelectionStyle Reinforcement_Spawn_Point_Selection_Style;
   uint8_t generated_padbaf2[3];
   _s_tagblock<i343__AI__SpawnPoint> Spawn_Points;
   _s_tagblock<EditorMetadata> Editor_Metadata;
   int32_t editor_folder;
   uint32_t moduleId;
   int32_t Guid;
};
struct i343__AI__SquadSpawner{
   uint32_t Name;
   _s_triplefloat Position;
   _s_triplefloat Orientation;
   _s_tagref Squad_Specification;
   i343__AI__SquadCombatTetherType Squad_Combat_Tether_Type;
   uint8_t generated_padcce6[3];
   float Squad_Combat_Tether_Distance;
   float Squad_Abandon_Tether_Distance;
   float Squad_Re_Tether_Distance;
   _s_tagblock<i343__AI__SquadFallbackCombatTetherPoint> Fallback_Combat_Tether_AI_Markup_Points;
   _s_tagblock<i343__AI__PrecombatLink> Precombat_Links;
   _s_tagblock<EditorMetadata> Editor_Metadata;
   int32_t Encounter_Zone_Instance__DEPRECATED_;
   LevelObjectReference Parent_Encounter_Zone_Instance__DEPRECATED_;
   i343__AI__SpawnMethod Spawn_Method;
   i343__AI__UseSpawnerOrientation Spawn_Orientation;
   i343__AI__IsInitallyPlaced Is_Initially_Placed;
   uint8_t generated_pad9621[1];
   float Spawn_Radius;
   float Precombat_Activity_Radius;
   _s_tagref Drop_Pod_Device_Machine;
   _s_floatrange Drop_Pod_Spawn_Delay;
   _s_tagref Air_Drop_Vehicle;
   _s_tagref Air_Drop_Pilot_Character;
   i343__AI__AirDrop__SquadSpawnerAirDropSettings Air_Drop_Settings;
   uint32_t Placement_Script;
   i343__AI__InitialCombatState Initial_Combat_State;
   uint8_t generated_pad7c40[3];
   _s_tagblock<i343__AI__SquadKeyword> Squad_Keywords;
   int32_t editor_folder;
   uint32_t module_id;
   int32_t Guid;
   i343__AI__SquadSpawnerFlags Flags;
   uint8_t generated_pad2f8b[2];
};
struct i343__AI__PlacedOrder{
   uint32_t Name;
   GenericVolume Volume;
   _s_tagblock<EditorMetadata> Editor_Metadata;
};
struct i343__AI__EncounterBehaviorTree{
   uint32_t Name;
   _s_triplefloat Position;
   _s_triplefloat Orientation;
   int32_t editor_folder;
   uint32_t moduleId;
   _s_tagblock<EditorMetadata> Editor_Metadata;
   _s_tagref Graph_Tag;
   _s_tagblock<i343__AI__EncounterBehaviorTreeInputReference> Input_References;
   _s_tagblock<i343__AI__EncounterZoneCondition> Conditions;
   int32_t Guid;
   i343__AI__EncounterBehaviorTreeFlags Flags;
   uint8_t generated_pad491e[2];
};
struct i343__AI__EncounterTreeNode{
   uint32_t Name;
   _s_triplefloat Position;
   _s_triplefloat Orientation;
   i343__AI__NodeType Node_Type;
   i343__AI__CompositeType Composite_Type;
   i343__AI__CompositeFlags Composite_Flags;
   i343__AI__DecoratorType Decorator_Type;
   uint8_t generated_padbf04[3];
   int32_t Max_Limit;
   i343__AI__BoolComparison Assignment_Limit_Compare_Condition;
   uint8_t generated_paddcdf[3];
   int32_t Max_Bodies;
   i343__AI__BoolComparison Combat_Filter_Compare_Condition;
   uint8_t generated_pad7f6b[1];
   ActorCombatStatus Combat_Status;
   uint32_t Keyword;
   int32_t Min_Living_Count;
   i343__AI__VehicleTypeFilterFlags Vehicle_Compare_Condition;
   uint8_t generated_padd8e5[2];
   LevelObjectReference Player_Trigger_Volume_Reference;
   uint32_t Label;
   i343__AI__BehaviorTree__Relevance Min_Relevance;
   uint8_t generated_pad259a[3];
   int32_t editor_folder;
   uint32_t moduleId;
   _s_tagblock<EditorMetadata> Editor_Metadata;
   _s_tagblock<i343__AI__ChildGUID> Composite_Child_GUIDs_DEPRECATED;
   int32_t Decorator_Child_GUID_DEPRECATED;
   int32_t Root_Child_GUID_DEPRECATED;
   LevelObjectReference Root_Child;
   _s_tagblock<i343__AI__CompositeChild> Composite_Children;
   LevelObjectReference Decorator_Child;
   int32_t Guid;
   i343__AI__EncounterTreeNodeFlags Flags;
   uint8_t generated_pada523[2];
};
struct i343__AI__EncounterZone{
   uint32_t Name;
   GenericVolume Volume;
   i343__AI__BehaviorTree__Relevance Base_Relevance;
   uint8_t generated_padcbd2[3];
   int32_t editor_folder;
   uint32_t module_id;
   _s_tagblock<EditorMetadata> Editor_Metadata;
   int32_t Guid;
   i343__AI__EncounterZoneFlags Encounter_Zone_Flags;
   uint8_t generated_pad1887[2];
   _s_tagblock<i343__AI__ChildEncounterElement> Children_Encounter_Elements;
   _s_tagblock<i343__AI__EncounterZoneCondition> Conditions;
   i343__AI__FollowType Follow_Type;
   uint8_t generated_pad653c[3];
   float Follow_Range__Radius_;
};
struct i343__Bots__BotMarkupPoint{
   uint32_t Name;
   _s_triplefloat Position;
   _s_triplefloat Orientation;
   i343__Bots__BotMarkupPointType Point_Type;
   uint8_t generated_pad5318[3];
   _s_tagblock<i343__Bots__ExploreNeighbor> Explore_Neighbors;
   char megalo_label[32];
   char megalo_label_2[32];
   char megalo_label_3[32];
   char megalo_label_4[32];
   i343__NetProtocol__GameOptions__MultiplayerTeamDesignatorEnum Owner_Team;
   uint8_t generated_pad6cf9[3];
   _s_tagblock<EditorMetadata> Editor_Metadata;
   uint32_t moduleId;
   int32_t editor_folder;
   int32_t Guid;
   i343__Bots__BotMarkupPointFlags Flags;
   uint8_t generated_padb9ae[3];
};
struct i343__AI__AIMarkupPoint{
   uint32_t Name;
   _s_triplefloat Position;
   _s_triplefloat Orientation;
   _s_tagblock<EditorMetadata> Editor_Metadata;
   i343__AI__AIMarkupPointType Point_Type;
   i343__AI__AIMarkupPrecombatType Point_Precombat_Type;
   uint8_t generated_pad277f[2];
   float Max_Attract_Radius;
   float Cooldown;
   int16_t Max_Characters;
   PatrolMode Patrol_Mode;
   int16_t Patrol_Point_Set;
   uint8_t generated_paddaca[2];
   float Lookout_Wait_Time;
   _s_tagblock<i343__AI__BotExploreNeighbor> Neighbors;
   i343__AI__AIMarkupPlayerObjectiveType Objective_Type;
   uint8_t generated_pad8e15[3];
   _s_tagblock<i343__AI__ObjectiveTarget> Targets;
   _s_tagblock<i343__AI__AIMarkupFilter> Unit_Type_Filters;
   int32_t editor_folder;
   uint32_t moduleId;
   int32_t Guid;
   i343__AI__AIMarkupPointFlags Flags;
   uint8_t generated_pada708[3];
   uint32_t Custom_Animation_Name;
};
struct i343__AI__AIMarkupVolume{
   uint32_t Name;
   GenericVolume Volume;
   float Fortification_Direction;
   i343__AI__AIMarkupVolumeFortIntensity Fortification_Intensity;
   uint8_t generated_pad932e[3];
   uint32_t Fortification_Direction_Name;
   i343__AI__FortificationUseDirectionVectors Should_Use_Direction_Vector;
   uint8_t generated_paddfe3[2];
   _s_tagblock<i343__AI__AIMarkupFilter> Fortification_Filters;
   _s_tagblock<i343__AI__AIMarkupFilter> High_Ground_Filters;
   _s_tagblock<i343__AI__AIMarkupFilter> FleeHide_Filters;
   _s_tagblock<i343__AI__AIMarkupFilter> Low_Priority_Filters;
   _s_tagblock<PathingCostModifierFilter> Pathing_Cost_Modifier_Filters;
   _s_tagblock<i343__AI__AIMarkupFilter> Wander_Priority_Filters;
   i343__AI__AIMarkupPrecombatType Volume_Precombat_Type;
   uint8_t generated_padf760[3];
   float Precombat_Wait_Time;
   int16_t Max_Characters;
   uint8_t generated_pad1141[2];
   _s_tagblock<EditorMetadata> Editor_Metadata;
   i343__AI__AiMarkupFlavors Volume_Flavors;
   uint8_t generated_pad12df[2];
   int32_t editor_folder;
   uint32_t moduleId;
   int32_t Guid;
   i343__AI__AIMarkupVolumeFlags Flags;
   uint8_t generated_padc62a[2];
};
struct PruningVolume{
   uint32_t Name;
   GenericVolume Volume;
   PruningVolumeTypesFlags flags;
   uint8_t generated_padcbcb[2];
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct i343__Physics__PhysicsVolume{
   uint32_t Name;
   i343__Physics__PhysicsVolumeTypeEnumClass Type;
   GenericVolume Volume;
   uint32_t Collision_Layer;
   _s_tagblock<EditorMetadata> EditorMetadata;
   _s_tagref owner_bsp;
   _s_tagref Generated_collision_volume;
};
struct i343__Wind__WindInfluencerVolume{
   uint32_t Name;
   i343__Wind__WindInfluencerVolumeTypeEnum Type;
   _s_doublefloat Direction;
   float Strength;
   float Radius;
   WindInfluencerVolumeMode Mode;
   i343__Wind__WindInfluencerVolumeFlags Flags;
   WindGustingFunction Direction_Function;
   WindGustingFunction Strength_Function;
   float Direction_Function_Period;
   float Strength_Function_Period;
   float Wind_Impulse_Average_Frequency;
   float Wind_Impulse_Average_Duration;
   float Wind_Impulse_Strength;
   float Last_Sleep_Pause;
   float Last_Random_Activity_Timestamp;
   int32_t Wind_Impulse_State;
   i343__Wind__NoiseGustingFunctionTypeEnum Noise_Distribution;
   _s_tagblock<EditorMetadata> EditorMetadata;
   int32_t Editor_Folder;
   uint32_t Module_ID;
   int32_t Datum_Index;
   GenericVolume Volume;
   int32_t Bsp_index;
};
struct HlodVolume{
   int32_t Guid;
   uint32_t Name;
   _s_tagref Owner_BSP;
   _s_tagblock<EditorMetadata> EditorMetadata;
   GenericVolume Volume;
   float SwitchDistance;
   eTargetLOD Maximum_LOD;
   uint8_t generated_pad98b9[2];
   uint32_t Asset_Category;
   NamedHlodSettings Hlod_Settings;
   HlodVolumeFlags Flags;
   uint8_t generated_pad7ed8[1];
   HlodVisibilityEnum Use_Visibility;
   HlodSimplygonCustomSphereCameraPath Visibility_Camera_Sphere_Settings;
   HlodVolumePolicy Volume_Inclusion_Policy;
   uint8_t generated_pad3223[3];
   _s_tagref Hlod_Asset_Override;
   _s_tagref Hlod_Asset;
   _s_tagref Hlod_Metadata__chore_generated_and_always_up_to_date_;
   _s_tagref Hlod_Metadata__baked_with_hlod_asset_;
   int32_t VolumeColorIndex;
};
struct GlobalForcePlacement{
   int32_t force_index;
   uint32_t name;
   int32_t guid;
   _s_triplefloat position;
   _s_triplefloat facing;
   float scale;
   _s_tagref global_force;
   int32_t editor_folder;
   uint32_t moduleId;
};
struct EffectPlacement{
   uint32_t name;
   int32_t guid;
   uint32_t lighting_variant;
   _s_triplefloat position;
   _s_triplefloat facing;
   float scale;
   EffectPlacementFlags flags;
   c_object_bsp_placement_policy bsp_policy;
   uint8_t generated_pad81e4[1];
   int32_t editor_folder;
   float Scale_A_Override_Value;
   float Scale_B_Override_Value;
   _s_tagref effect;
   _s_tagref tag_graph_output;
   uint32_t output_node_name;
   _s_tagblock<TagGraph__TagGraphFloatParam> float_params;
   _s_tagblock<TagGraph__TagGraphBoolParam> bool_params;
   _s_tagblock<TagGraph__TagGraphInstanceVariableString> taggraph_instance_variables___strings;
   _s_tagblock<TagGraph__TagGraphInstanceVariableTagRef> taggraph_instance_variables___tag_references;
   int32_t handle;
   _s_tagblock<EditorMetadata> EditorMetadata;
   uint32_t moduleId;
   BspMapRuntimeRefCounter BspMapRuntimeRefCounter;
};
struct SoundPlacement{
   uint32_t name;
   int32_t guid;
   _s_triplefloat position;
   _s_triplefloat facing;
   SoundPlacementLayerFlags placement_flags;
   SoundPlacementRuntimeFlags flags;
   uint8_t generated_paddbf0[2];
   int32_t editor_folder;
   _s_tagref looping_sound;
   _s_tagblock<PlacementShapeOverride> shape_override;
   _s_tagblock<SoundPlacementSplineControlPoint> spline;
   _s_tagblock<EditorMetadata> EditorMetadata;
   uint32_t moduleId;
   uint32_t Movement_RTPC_name;
   float movement_detection_radius;
   float Movement_distance_scaling_factor;
   BspMapRuntimeRefCounter BspMapRuntimeRefCounter;
};
struct ScenarioAttachedLightCone{
   uint32_t name;
   int32_t guid;
   uint32_t lighting_variant;
   _s_triplefloat position;
   _s_triplefloat facing;
   uint8_t padding[2];
   c_object_bsp_placement_policy bsp_policy;
   uint8_t generated_pad836b[1];
   CompressedBspReferenceFlags manual_bsp_flags;
   _s_tagref light_cone_reference;
   _s_tagblock<EditorMetadata> EditorMetadata;
   _s_argbfloat color;
   float intensity;
   float length;
   float width;
   float Camera_Near_Fade_Start;
   float Camera_Near_Fade_End;
   float Camera_Far_Fade_Start;
   float Camera_Far_Fade_End;
   ScenarioAttachedLightCone__ScenarioAttachedLightConeFlags Flags;
   uint8_t generated_pad36b6[3];
   int32_t editor_folder;
   uint32_t moduleId;
};
struct ScenarioEffectPlacement{
   uint32_t name;
   int32_t guid;
   uint32_t lighting_variant;
   _s_triplefloat position;
   _s_triplefloat facing;
   ScenarioEffectPlacement__ScenarioEffectPlacementFlags Flags;
   c_object_bsp_placement_policy bsp_policy;
   uint8_t generated_pad675e[2];
   CompressedBspReferenceFlags manual_bsp_flags;
   _s_tagref lens_flare_reference;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct WarzoneObjectiveDefinition{
   uint32_t name;
   char label[32];
   char user_facing_name[32];
   i343__NetProtocol__GameOptions__MultiplayerTeamDesignatorEnum initial_team;
   uint8_t generated_pad6d54[3];
   _s_tagblock<WarzoneObjectiveDefinitionTriggerVolume> trigger_volumes;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct i343__Curve__SplinePlacement{
   uint32_t name;
   i343__Curve__Curve3dDefinition curve;
   _s_tagblock<i343__Curve__SplinePlacementMetadata> SplineMetadata;
   _s_tagblock<EditorMetadata> EditorMetadata;
   int32_t Guid;
};
struct i343__Objects__NodeGraphPlacement{
   uint32_t name;
   _s_tagref Object_Node_Graph;
   _s_triplefloat Position;
   i343__Objects__NodeGraphPlacement__NodeGraphPlacementFlags Flags;
   _s_tagblock<EditorMetadata> EditorMetadata;
   BspMapRuntimeRefCounter BspMapRuntimeRefCounter;
};
struct s_scenario_creature{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct s_scenario_crate{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_object_permutation permutation_data;
   s_scenario_crate_datum crate_data;
   uint8_t generated_pad36b2[2];
   _s_tagblock<s_scenario_multiplayer_object_properties> multiplayer_data;
};
struct s_scenario_effect_scenery{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   ScenarioEffectSceneryDatum effect_scenery_data;
   _s_tagblock<s_scenario_multiplayer_object_properties> multiplayer_data;
};
struct s_scenario_giant{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_object_permutation permutation_data;
   s_scenario_unit_datum unit_data;
   s_scenario_giant_datum giant_data;
   uint8_t generated_padea38[2];
};
struct ScenarioDispenser{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_object_permutation permutation_data;
   s_scenario_device_datum device_data;
   ScenarioDispenserDatum dispenser_data;
   uint8_t generated_padf40b[3];
   _s_tagblock<s_scenario_multiplayer_object_properties> multiplayer_data;
};
struct s_scenario_control{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_object_permutation permutation_data;
   s_scenario_device_datum device_data;
   s_scenario_control_datum control_data;
   _s_tagblock<s_scenario_multiplayer_object_properties> multiplayer_data;
};
struct s_scenario_terminal{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_object_permutation permutation_data;
   s_scenario_device_datum device_data;
   s_scenario_terminal_datum terminal_data;
};
struct s_scenario_machine{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_object_permutation permutation_data;
   s_scenario_device_datum device_data;
   s_scenario_machine_datum machine_data;
   _s_tagblock<s_scenario_multiplayer_object_properties> multiplayer_data;
};
struct scenario_device_group{
   char name[32];
   float initial_value;
   ScenarioDeviceGroupFlags flags;
   uint32_t module_id;
   _s_tagblock<EditorMetadata> EditorMetadata;
   int32_t editor_folder;
};
struct s_scenario_weapon{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_object_permutation permutation_data;
   s_scenario_weapon_datum weapon_data;
   _s_tagblock<s_scenario_multiplayer_object_properties> multiplayer_data;
};
struct s_scenario_equipment{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_equipment_datum equipment_data;
   _s_tagblock<s_scenario_multiplayer_object_properties> multiplayer_data;
};
struct s_scenario_vehicle{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_object_permutation permutation_data;
   s_scenario_unit_datum unit_data;
   _s_tagblock<s_scenario_multiplayer_object_properties> multiplayer_data;
   s_scenario_vehicle_datum vehicle_data;
};
struct s_scenario_biped{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_object_permutation permutation_data;
   s_scenario_unit_datum unit_data;
   _s_tagblock<s_scenario_multiplayer_object_properties> multiplayer_data;
};
struct s_scenario_scenery{
   int32_t name;
   uint32_t object_name;
   _s_tagref asset;
   s_scenario_object_datum object_data;
   _s_tagblock<EditorMetadata> EditorMetadata;
   s_scenario_object_permutation permutation_data;
   s_scenario_scenery_datum scenery_data;
   uint8_t generated_pad2908[2];
   _s_tagblock<s_scenario_multiplayer_object_properties> multiplayer_data;
};
struct scenario_object_name{
   uint32_t name;
   int16_t object_type;
   int16_t scenario_datum_index;
   int32_t runtimeObjectIndex;
};
struct ScenarioEditorAnnotation{
   uint32_t name;
   _s_triplefloat Position;
   char Info[256];
   _s_data AdditionalInfo;
   char OptionalAnnotationID[32];
   EditorAnnotationFilterGroups FilterGroup;
   uint8_t generated_padc55c[2];
   _s_tagblock<EditorMetadata> EditorMetadata;
};
struct editor_comment_definition{
   _s_triplefloat position;
   e_editor_comment_type type;
   char name[32];
   char comment[256];
};
struct s_scenario_new_decorator_definition{
   _s_tagblock<s_decorator_scenario_set_placements> sets;
};
struct s_luaUserLibrary{
   _s_tagref lua_library;
};
struct ModuleLookupKey{
   uint64_t Hash;
   int32_t Index;
   uint8_t generated_padceef[4];
};
struct PreimportedAnimNodeGraphReference{
   _s_tagref Reference;
};
struct BspMapEntry{
   _s_tagblock<SoundPlacementMapEntry> sound_placements;
   _s_tagblock<NodeGraphPlacementMapEntry> object_node_graph_placements;
   _s_tagblock<EffectPlacementMapEntry> effect_placements;
   _s_tagblock<AcousticZonePlacementMapEntry> acoustics_zone_placements;
   _s_tagblock<AcousticPortalPlacementMapEntry> acoustics_portal_placements;
};
struct s_basic_spec_control_setting_float{
   float Low;
   float Medium;
   float High;
   float Ultra;
   float _2_Player_Splitscreen;
   float _3_Player_Splitscreen;
   float _4_Player_Splitscreen;
};
struct TagGraph__TagGraphInstanceVariableTagRef{
   uint32_t name;
   _s_tagref value;
};
struct TagGraph__TagGraphInstanceVariableString{
   uint32_t name;
   uint32_t value;
};
struct TagGraph__TagGraphBoolParam{
   uint32_t name;
   TagGraph__TagGraphBoolVariableValue value;
   uint8_t generated_pad0473[3];
};
struct TagGraph__TagGraphFloatParam{
   uint32_t name;
   float value;
};
struct i343__Decorators__DecoratorPaletteTagReference{
   _s_tagref tag;
};
struct LevelRegionData{
   uint32_t ZoneSetName;
   _s_triplefloat RegionMin;
   _s_triplefloat RegionMax;
   _s_tagblock<scenario_layer_reference> inherited_region_layers;
};
struct LevelObjectsBlockOffset{
   uint32_t BlockByteOffset;
   _s_tagblock<PlacementIndexData> PlacementIndex;
};
struct RuntimeLayerData{
   uint32_t Name;
   uint32_t LayerTagName;
   RuntimeLayerFlags Flags;
   _s_tagblock<BlockRange> Blocks;
   int32_t Parent;
   uint32_t LoadVariant;
   BspFlagStorageArray bsps[];
   ModuleComponentLookupTable Module_Component_Lookup_table;
};
struct RuntimeLayerReference{
   _s_tagref tag;
   char Editor_Display_Name[256];
};
struct ScriptString{
   uint32_t id;
   char text[256];
};
struct GarbageCollectionGlobalVariables{
   float Dropped_item;
   float Dropped_special_item;
   float Dropped_item_in_multiplayer;
   float Dead_unit;
   float Dead_player;
   float Dead_MP_Player;
   float Dead_MP_Player_overloaded;
   int32_t Max_dead_body_count_;
};
struct s_scenario_zone_set_switch_trigger_volume{
   ScenarioZoneSetSwitchTriggerVolumeFlags flags;
   int16_t begin_zone_set;
   int16_t trigger_volume;
   int16_t commit_zone_set;
};
struct ScenarioUnsafeSpawnVolume{
   int16_t trigger_volume;
};
struct s_scenario_location_name_trigger_volume{
   int16_t trigger_volume;
   char name[32];
   uint8_t generated_padd416[2];
   uint32_t name_identifier;
};
struct s_scenario_safe_zone_trigger_volume{
   int16_t trigger_volume;
   TriggerVolumeFlags flags;
   uint8_t generated_pad0479[1];
};
struct s_scenario_kill_trigger_volume{
   int16_t trigger_volume;
   TriggerVolumeFlags flags;
   uint8_t generated_pad4499[1];
};
struct s_scenario_cluster_data{
   _s_tagref bsp;
   int32_t bsp_checksum;
   _s_tagblock<ScenarioClusterPointsBlock> cluster_centroids;
   _s_resource<LegacyBspKDTree> Legacy_Bsp_KD_Tree;
};
struct BspLightingOrderElement{
   int16_t bsp_reference;
};
struct s_scenario_zone_set{
   uint32_t name;
   char name_string[256];
   int32_t pvs_index;
   ScenarioZoneSetBitFlag flags;
   BspReferenceFlags bsp_zone_flags;
   BspReferenceFlags streaming_bsp_zone_flags;
   StructureDesignReferenceFlags structure_design_zone_flags;
   BspFlagStorageArray runtime_bsp_zone_flags[];
   StructureDesignFlagStorageArray runtime_structure_design_zone_flags[];
   int32_t parent_zoneset;
   int32_t audibility_index;
   _s_tagblock<ScenarioZoneSetBudgetOverride> budget_overrides;
   _s_tagblock<ScenarioZoneSetLipsyncBlock> lipsync_sounds;
   _s_tagref cinematic_soundbank;
   _s_rgbfloat sky_clear_color;
   _s_tagref baked_pvs_reference_tag;
   _s_triplefloat aabbBoundsMin;
   _s_triplefloat aabbBoundsMax;
   uint32_t load_variant_name;
};
struct s_game_audibility{
   int32_t door_portal_count;
   int32_t room_count;
   _s_floatrange room_distance_bounds;
   _s_tagblock<DoorEncodedPasBlock> encoded_door_pas;
   _s_tagblock<RoomDoorPortalEncodedPasBlock> room_door_portal_encoded_pas;
   _s_tagblock<AiDeafeningEncodedPasBlock> ai_deafening_pas;
   _s_tagblock<EncodedRoomDistancesBlock> room_distances;
   _s_tagblock<s_game_audibility_bsp_game_portal_mapping> game_portal_to_door_occluder_mapping;
   _s_tagblock<s_game_audibility_bsp_mapping> bsp_cluster_to_room_bounds;
   _s_tagblock<BspClusterToRoomIndices> bsp_cluster_to_room_indices;
};
struct s_scenario_zone_set_pvs{
   BspFlagStorageArray structure_bsp_mask[];
   _s_tagblock<s_scenario_zone_set_structure_bsp_pvs> structure_bsp_pvs;
};
struct s_scenario_sky_reference{
   _s_tagref sky;
   int16_t name;
   uint8_t generated_pad4092[2];
   uint32_t sky_name;
   BspFlagStorageArray active_on_bsps[];
};
struct s_scenario_structure_design_reference{
   _s_tagref structure_design;
};
struct scenario_structure_bsp_reference{
   _s_tagref structure_bsp;
   _s_tagref structure_metadata;
   uint32_t load_variant_name;
   float streaming_distance_expansion;
   ScenarioStructureBspReferenceFlags flags;
   uint8_t generated_pad5da6[2];
   _s_triplefloat aabbBoundsMin;
   _s_triplefloat aabbBoundsMax;
   float custom_gravity_scale;
   _s_tagblock<LightingVariant> structure_lighting_info_variants;
   _s_tagref Auto_Generated_HLODs_settings_override;
   _s_tagblock<scenario_layer_reference> layers;
   _s_tagref hexGridCollisionRef;
   _s_tagref hexGridMaterialPaletteRef;
};
struct MultiplayerScenarioIntroDefinition{
   uint32_t Name;
   _s_tagblock<CompositionDefinitionReference> Intro_Compositions;
};
struct DefaultPlayerStartIndex{
   int32_t index;
};
struct scenario_layer_reference{
   _s_tagref tag;
   char Editor_Display_Name[256];
   LayerUsageFlags Layer_Usage_Flags;
   uint8_t generated_pad26e0[3];
};
struct LevelObjects{
   BLANK AnyTag;
   s_scenario_new_decorator_definition decorators;
   _s_tagblock<editor_comment_definition> comments;
   _s_tagblock<ScenarioEditorAnnotation> editor_annotations;
   _s_tagblock<scenario_object_name> object_names;
   _s_tagblock<s_scenario_scenery> scenery;
   _s_tagblock<s_scenario_biped> bipeds;
   _s_tagblock<s_scenario_vehicle> vehicles;
   _s_tagblock<s_scenario_equipment> equipment;
   _s_tagblock<s_scenario_weapon> weapons;
   _s_tagblock<scenario_device_group> device_groups;
   _s_tagblock<s_scenario_machine> machines;
   _s_tagblock<s_scenario_terminal> terminals;
   _s_tagblock<s_scenario_control> controls;
   _s_tagblock<ScenarioDispenser> dispensers;
   _s_tagblock<s_scenario_giant> giants;
   _s_tagblock<s_scenario_effect_scenery> effect_scenery;
   _s_tagblock<s_scenario_crate> crates;
   _s_tagblock<s_scenario_creature> creatures;
   _s_tagblock<i343__Objects__NodeGraphPlacement> object_node_graph_placements;
   _s_tagblock<i343__Curve__SplinePlacement> splines;
   _s_tagblock<WarzoneObjectiveDefinition> warzone_objective_definitions;
   _s_tagblock<ScenarioEffectPlacement> scenario_attached_lens_flares;
   _s_tagblock<ScenarioAttachedLightCone> scenario_attached_light_cones;
   _s_tagblock<SoundPlacement> sound_placements;
   _s_tagblock<EffectPlacement> effect_placements;
   _s_tagblock<GlobalForcePlacement> Global_Forces;
   _s_tagblock<HlodVolume> HLOD_Volumes;
   _s_tagblock<i343__Wind__WindInfluencerVolume> Wind_Influencer_Volumes;
   _s_tagblock<i343__Physics__PhysicsVolume> Physics_Volumes;
   _s_tagblock<PruningVolume> Pruning_Volumes;
   _s_tagblock<i343__AI__AIMarkupVolume> AI_Markup_Volumes;
   _s_tagblock<i343__AI__AIMarkupPoint> AI_Markup_Points;
   _s_tagblock<i343__Bots__BotMarkupPoint> Bot_Markup_Points;
   _s_tagblock<i343__AI__EncounterZone> Encounter_Zones;
   _s_tagblock<i343__AI__EncounterTreeNode> Encounter_Tree_Nodes;
   _s_tagblock<i343__AI__EncounterBehaviorTree> Encounter_Behavior_Trees;
   _s_tagblock<i343__AI__PlacedOrder> Placed_Orders;
   _s_tagblock<i343__AI__SquadSpawner> Squad_Spawners;
   _s_tagblock<i343__AI__ReinforcementPoint> Reinforcement_Points;
   _s_tagblock<i343__ActivatableRegion__ActivatableRegion> Activatable_Regions;
   _s_tagblock<i343__ActivationVolume> Activation_Volumes;
   _s_tagblock<i343__Narrative__Moment> Narrative_Moments;
   _s_tagblock<i343__Example__Entity> Example_Entities;
   _s_tagblock<s_scenario_soft_ceiling> soft_ceilings;
   _s_tagblock<scenario_starting_profile> player_starting_profile;
   _s_tagblock<scenario_player_starting_location> player_starting_locations;
   _s_tagblock<AmbientActionPointInstance> ambient_action_points;
   _s_tagblock<scenario_trigger_volume> trigger_volumes;
   _s_tagblock<AcousticsTagZone> acoustic_zones;
   _s_tagblock<AcousticsTagPortal> acoustic_portals;
   _s_tagblock<recorded_animation_definition> recorded_animations;
   _s_tagblock<scenario_decal> decals;
   _s_tagblock<AreaGeneratorDefinition> area_generators;
   _s_tagblock<squad_group_definition> squad_groups;
   _s_tagblock<s_squad_definition> squads;
   _s_tagblock<zone_definition> zones;
   _s_tagblock<user_hint_jump> nav_links;
   _s_tagblock<s_cookie_cutter> cookie_cutters;
   _s_tagblock<NavMeshArea> navmesh_areas;
   _s_tagblock<i343__AI__NavSeedPoint> NavSeedPoints;
   _s_tagblock<OpportunityAreaData> ai_opportunity_areas;
   _s_tagblock<ai_recording_reference_definition> ai_recording_references;
   _s_tagblock<cs_point_set> point_sets;
   _s_tagblock<scenario_cutscene_flag> cutscene_flags;
   _s_tagblock<scenario_cutscene_camera_point> cutscene_camera_points;
   _s_tagblock<s_scenario_cutscene_title> cutscene_titles;
   _s_tagblock<s_flock_instance> flocks;
   _s_tagblock<s_scenario_editor_folder> editor_folders;
   _s_tagblock<s_objective> ai_objectives;
   _s_tagblock<s_scenario_cheap_particle_system> neuticles;
   _s_tagblock<ComposerShowStage> Composer_Shows;
   _s_tagblock<StaticDecalCache> static_decal_cache;
   _s_tagblock<i343__UnitRecorder__UnitRecordingReferences> unit_recording_references;
   _s_tagblock<ScenarioStaticAssetPlacement> prefab_placements;
   _s_tagblock<ScenarioAssetCollectionPlacement> asset_collection_placements;
   _s_tagblock<FoliageAssetPlacement> foliage_placements;
   _s_tagblock<i343__HexGrid__HexPlacements> hex_placements;
   _s_tagblock<i343__HexGrid__HexRuntime> hex_runtime_data;
   _s_tagblock<StructureLightDefinition> generic_light_definitions;
   _s_tagblock<AirProbeRegionVolume> Air_Probe_Region_Volumes;
   _s_tagblock<CubemapVolume> Cubemap_Volumes;
   _s_tagblock<i343__TerrainPlacement> Terrains;
   _s_tagblock<i343__TerrainVolume> Terrain_Volumes;
   uint8_t generated_pad5914[4];
};
struct Level{
   LevelObjects LevelObjects;
   _s_tagblock<scenario_layer_reference> child_scenarios;
   e_scenario_type type;
   i343__CollectibleMission mission;
   ScenarioFlags flags;
   ScenarioRuntimeTriggerVolumeFlags runtime_trigger_volume_flags;
   int32_t campaign_id;
   int32_t map_id;
   uint32_t map_name;
   _s_tagblock<DefaultPlayerStartIndex> default_player_start_indices;
   _s_tagref Sound_Constants;
   _s_tagref Musketeer_TOE;
   int32_t conversion_version;
   float local_north;
   float local_sea_level;
   float altitude_cap;
   _s_doublefloat grid_world_anchor_point;
   int16_t grid_cell_size;
   _s_point2d grid_size;
   uint8_t generated_pad226a[2];
   _s_tagblock<MultiplayerScenarioIntroDefinition> multiplayer_intro_cinematics;
   _s_tagref multiplayer_outro_cinematic;
   _s_tagref multiplayer_outro_cinematic_fallback;
   _s_tagref game_performance_throttles;
   _s_tagref asset_category_globals_override;
   _s_tagblock<scenario_structure_bsp_reference> structure_bsps;
   _s_tagblock<s_scenario_structure_design_reference> structure_designs;
   _s_tagref structure_seams;
   _s_tagblock<s_scenario_sky_reference> skies;
   _s_tagblock<s_scenario_zone_set_pvs> zone_set_pvs;
   _s_tagblock<s_game_audibility> zone_set_audibility;
   _s_tagblock<s_scenario_zone_set> zone_sets;
   _s_tagblock<BspLightingOrderElement> bsp_lighting_order_override;
   _s_tagblock<s_scenario_cluster_data> scenario_cluster_data;
   _s_tagref multiplayer_object_types;
   _s_tagref Spawn_Settings;
   _s_tagref wind;
   _s_tagref scenario_render_data;
   _s_tagref ai_pathfinding_data;
   _s_tagblock<s_scenario_kill_trigger_volume> scenario_kill_triggers;
   _s_tagblock<s_scenario_safe_zone_trigger_volume> scenario_safe_zone_triggers;
   _s_tagblock<s_scenario_location_name_trigger_volume> scenario_location_name_triggers;
   _s_tagblock<ScenarioUnsafeSpawnVolume> scenario_unsafe_spawn_trigger_volumes;
   _s_tagblock<s_scenario_zone_set_switch_trigger_volume> zone_set_switch_trigger_volumes;
   _s_tagref level_scripts;
   _s_tagref interpolators;
   _s_tagref global_screen_effect;
   _s_tagref performance_throttles;
   _s_tagref location_name_globals;
   _s_tagref hud_screen_reference;
   _s_tagref required_resources;
   GarbageCollectionGlobalVariables garbage_collection;
   _s_tagblock<ScriptString> script_strings;
   _s_tagblock<RuntimeLayerReference> runtime_layers;
   _s_tagblock<RuntimeLayerData> internal_runtime_layers;
   _s_tagblock<LevelObjectsBlockOffset> block_offsets;
   _s_tagref source_level;
   _s_tagblock<LevelRegionData> level_region_data;
   _s_tagblock<i343__Decorators__DecoratorPaletteTagReference> decorator_palettes;
   _s_tagref dynamic_world_state_globals;
   _s_tagref tag_graph_output;
   uint32_t output_node_name;
   _s_tagblock<TagGraph__TagGraphFloatParam> tag_graph_float_params;
   _s_tagblock<TagGraph__TagGraphBoolParam> tag_graph_bool_params;
   _s_tagblock<TagGraph__TagGraphInstanceVariableString> taggraph_instance_variables___strings;
   _s_tagblock<TagGraph__TagGraphInstanceVariableTagRef> taggraph_instance_variables___tag_references;
   ScenarioDynamicWorldStateFlags dynamic_world_state_flags;
   uint8_t generated_pad6f1f[2];
   int32_t dynamic_world_state_lens_flare_guid;
   _s_tagref static_world;
   _s_tagref texture_group_table;
   _s_tagref HLODs;
   s_basic_spec_control_setting_float HLODs_Switch_Distance_Multipliers;
   _s_tagref Auto_Generated_HLODs_settings;
   _s_tagref Unprocessed_level;
   EnableDynamicWindFlag Dynamic_Wind;
   EnableInteractionFlag Push_bending;
   uint8_t generated_padbbd4[2];
   _s_tagblock<BspMapEntry> Placement_Bsp_Map;
   uint32_t Audio_level_state_id;
   _s_triplefloat Safe_Region_Extents_Override_Min;
   _s_triplefloat Safe_Region_Extents_Override_Max;
   _s_tagblock<PreimportedAnimNodeGraphReference> Preimported_Animation_Node_Graphs;
   _s_tagblock<ModuleLookupKey> Sorted_Module_Lookup_Table;
   _s_tagblock<s_luaUserLibrary> Lua_User_Libraries;
   SpecControlSettingsMatrixBool__Flags Decorators_Enabled_Low_Spec;
   SpecControlSettingsMatrixBool__Flags Decorators_Enabled_Medium_Spec;
   SpecControlSettingsMatrixBool__Flags Decorators_Enabled_High_Spec;
   SpecControlSettingsMatrixBool__Flags Decorators_Enabled_Ultra_Spec;
   uint8_t generated_pad0889[4];
};
struct vertex{
   _s_triplefloat point;
   int32_t first_edge;
   int16_t sink;
   uint8_t generated_pad06d3[2];
};
struct edge{
   int32_t start_vertex;
   int32_t end_vertex;
   int32_t forward_edge;
   int32_t reverse_edge;
   int32_t left_surface;
   int32_t right_surface;
};
struct large_collision_surface{
   int32_t plane_index;
   int32_t first_edge;
   int16_t material;
   SurfaceFlags flags;
   uint8_t best_plane_calculation_vertex_index_;
};
struct bsp2d_node{
   _s_triplefloat plane;
   int32_t left_child;
   int32_t right_child;
};
struct bsp2d_reference{
   int32_t plane;
   int32_t bsp2d_node;
};
struct leaf{
   LeafFlags flags;
   uint8_t generated_pad7ea5[1];
   int16_t bsp2d_reference_count;
   int32_t first_bsp2d_reference;
};
struct bsp3d_node{
   int32_t plane;
   int32_t back_child;
   int32_t front_child;
};
struct large_collision_bsp{
   _s_tagblock<bsp3d_node> bsp3d_nodes;
   _s_tagblock<s_bsp3d_kd_super_node> bsp3d_supernodes;
   _s_tagblock<PlanesParams> planes;
   _s_tagblock<leaf> leaves;
   _s_tagblock<bsp2d_reference> bsp2d_references;
   _s_tagblock<bsp2d_node> bsp2d_nodes;
   _s_tagblock<large_collision_surface> surfaces;
   _s_tagblock<edge> edges;
   _s_tagblock<vertex> vertices;
};
struct CollisionBspBlock{
   _s_tagblock<bsp3d_node> bsp3d_nodes;
   _s_tagblock<s_bsp3d_kd_super_node> bsp3d_supernodes;
   _s_tagblock<PlanesParams> planes;
   _s_tagblock<collision_leaf> leaves;
   _s_tagblock<bsp2d_reference> bsp2d_references;
   _s_tagblock<bsp2d_node> bsp2d_nodes;
   _s_tagblock<collision_surface> surfaces;
   _s_tagblock<collision_edge> edges;
   _s_tagblock<collision_vertex> vertices;
};
struct StreamingBitmapScale{
   int32_t bitmap_index_in_bsp;
   float scale;
};
struct s_structure_bsp_resources{
   _s_tagblock<CollisionBspBlock> collision_bsp;
   _s_tagblock<large_collision_bsp> large_collision_bsp;
};
struct MapLeafFaceVertex{
   _s_triplefloat vertex;
};
struct collision_vertex{
   _s_triplefloat point;
   uint16_t first_edge;
   int16_t sink;
};
struct collision_edge{
   uint16_t start_vertex;
   uint16_t end_vertex;
   uint16_t forward_edge;
   uint16_t reverse_edge;
   uint16_t left_surface;
   uint16_t right_surface;
};
struct collision_surface{
   uint16_t plane_index;
   uint16_t first_edge;
   int16_t material;
   SurfaceFlags flags;
   uint8_t best_plane_calculation_vertex_index_;
};
struct bsp2d_node{
   _s_triplefloat plane;
   int16_t left_child;
   int16_t right_child;
};
struct bsp2d_reference{
   int16_t plane;
   int16_t bsp2d_node;
};
struct collision_leaf{
   LeafFlags flags;
   uint8_t generated_padd325[1];
   uint16_t bsp2d_reference_count;
   uint32_t first_bsp2d_reference;
};
struct PlanesParams{
   _s_quadfloat plane;
};
struct s_bsp3d_kd_super_node{
   float plane_0;
   float plane_1;
   float plane_2;
   float plane_3;
   float plane_4;
   float plane_5;
   float plane_6;
   float plane_7;
   float plane_8;
   float plane_9;
   float plane10;
   float plane11;
   float plane12;
   float plane13;
   float plane14;
   int32_t plane_dimensions;
   int32_t child_index_0;
   int32_t child_index_1;
   int32_t child_index_2;
   int32_t child_index_3;
   int32_t child_index_4;
   int32_t child_index_5;
   int32_t child_index_6;
   int32_t child_index_7;
   int32_t child_index_8;
   int32_t child_index_9;
   int32_t child_index10;
   int32_t child_index11;
   int32_t child_index12;
   int32_t child_index13;
   int32_t child_index14;
   int32_t child_index15;
};
struct bsp3d_node{
   int64_t node_data_designator;
};
struct InstanceIndex{
   int16_t instance_index;
};
struct i343__Decorators__DecoratorCluster{
   _s_triplefloat scale;
   float max_render_distance_squared;
   _s_triplefloat offset;
   _s_triplefloat Bounding_sphere_center;
   float Bounding_sphere_radius;
   _s_triplefloat Bounding_AABB_Min;
   _s_triplefloat Bounding_AABB_Max;
};
struct i343__Decorators__DecoratorSetPlacementRange{
   _s_tagref decorator_asset;
   int32_t offset;
   int32_t count;
   uint8_t set_type_index;
   uint8_t generated_pad961e[3];
};
struct s_decorator_placement{
   _s_triplefloat position;
   uint8_t type_index;
   uint8_t motion_scale;
   uint8_t ground_tint;
   s_decorator_placement__DecoratorPlacementFlags flags;
   _s_quadfloat rotation;
   float scale;
   _s_triplefloat tint_color;
   _s_triplefloat original_point;
   _s_triplefloat original_normal;
   int32_t extra;
   uint16_t placement_surface_albedo;
   uint16_t placement_surface_normal;
};
struct PerLodBitmaps{
   _s_tagblock<StreamingBitmapScale> StreamingBitmapScale_Block;
   int32_t StreamingBitmapScale_Block_Flags;
   int32_t StreamingBitmapScale_Block_Vector1;
   int32_t StreamingBitmapScale_Block_Vector2;
};
struct MaterialOverrideEntry{
   _s_tagref Original_material_ref;
   _s_tagref Override_material_ref;
};
struct PrefabLODOverrideArray{
   float LOD_Transition_Distance_Override;
};
struct StructureBspTagResources{
   s_structure_bsp_resources resource_items;
};
struct StructureBspRawResources{
   s_structure_bsp_resources raw_items;
};
struct havokBodyIdArray{
   uint64_t havok_body_ID;
};
struct i343__Physics__InstancedPhysicsMaterial{
   int16_t per_instance_material_palette;
};
struct StructureInstanceMaterialOverrideData{
   _s_tagblock<geometry_material> per_Instance_Material_Block;
   int32_t per_Instance_Material_Flags;
   int32_t per_Instance_Material_Vector1;
   int32_t per_Instance_Material_Vector2;
   MeshFlags mesh_flags_override;
   uint8_t generated_pad58dd[2];
};
struct LODInfoOverrides{
   _s_tagblock<LODTransitionDistanceBlock> Lod_Levels_Block;
   int32_t Lod_Levels_Block_Flags;
   int32_t Lod_Levels_Block_Vector1;
   int32_t Lod_Levels_Block_Vector2;
   float lod_fade_after_Distance;
};
struct LeafConnectionVertex{
   _s_triplefloat vertex;
};
struct MapLeafConnectionIndex{
   int32_t connection_index;
};
struct map_leaf_face{
   int32_t node_index;
   _s_tagblock<MapLeafFaceVertex> vertices;
};
struct collision_bsp{
   _s_tagblock<bsp3d_node> bsp3d_nodes;
   _s_tagblock<s_bsp3d_kd_super_node> bsp3d_supernodes;
   _s_tagblock<PlanesParams> planes;
   _s_tagblock<collision_leaf> leaves;
   _s_tagblock<bsp2d_reference> bsp2d_references;
   _s_tagblock<bsp2d_node> bsp2d_nodes;
   _s_tagblock<collision_surface> surfaces;
   _s_tagblock<collision_edge> edges;
   _s_tagblock<collision_vertex> vertices;
};
struct s_instance_bucket{
   int32_t runtime_geo_mesh_index;
   _s_tagref runtime_geo_tag_reference;
   int32_t pad;
   _s_tagblock<InstanceIndex> instances_Data_Block;
   int32_t instances_Data_Block_Flags;
   int32_t instances_Data_Block_Vector1;
   int32_t instances_Data_Block_Vector2;
};
struct SeamIndicesBlockDefinition{
   int16_t seam_index;
};
struct StructureBSPClusterPortalIndex{
   int16_t portal_index;
};
struct cluster_portal__StructureBSPClusterPortalVertexBlock{
   _s_triplefloat point;
};
struct cluster_portal__s_oriented_bounds{
   _s_triplefloat center;
   _s_triplefloat extents;
   _s_quadfloat orientation;
};
struct StructureSuperNodeTraversalGeometryIndices{
   int16_t index;
};
struct s_structure_seam_cluster_mapping{
   int32_t cluster_index;
   _s_triplefloat cluster_center;
};
struct StructureSeamEdgeMapping{
   int32_t structure_edge_index;
};
struct s_structure_seam_identifier{
   int32_t seam_id0;
   int32_t seam_id1;
   int32_t seam_id2;
   int32_t seam_id3;
};
struct i343__Decorators__DecoratorRuntime{
   _s_tagblock<i343__Decorators__DecoratorSetPlacementRange> sets;
   _s_tagblock<i343__Decorators__DecoratorCluster> clusters;
   int32_t bspIndex;
   uint8_t generated_pad92da[4];
   int64_t decorator_runtime_gpu;
   int64_t decorator_runtime_cpu;
};
struct s_decorator_scenario_set_placements{
   _s_tagref decorator_asset;
   _s_tagblock<s_decorator_placement> decorator_placements;
   _s_tagref owning_layer_default_bsp;
};
struct BspUniqueStreamingIO{
   _s_tagblock<PerLodBitmaps> PerLodBitmaps_Block;
   int32_t PerLodBitmaps_Block_Flags;
   int32_t PerLodBitmaps_Block_Vector1;
   int32_t PerLodBitmaps_Block_Vector2;
   int16_t io_index;
   uint8_t generated_pad5360[2];
};
struct BspBitmapReference{
   _s_tagref bitmap;
};
struct BspStructureBitfieldStorageType{
   uint32_t chunk;
};
struct GpuVisibilityBitfield{
   int64_t Bsp_Structure_Bitfield_Buffer;
   BspStructureBitfieldStorageType CPU_Bsp_Structure__Bitfield[];
};
struct s_structure_bsp_obb_volume{
   _s_triplefloat origin;
   _s_triplefloat axis_1;
   _s_triplefloat axis_2;
   _s_triplefloat axis_3;
   uint32_t type;
};
struct structure_external_instanced_geometry_reference{
   _s_tagref static_render_geometry;
   _s_tagref static_collision_geometry;
   _s_tagref material_palette;
   uint32_t name;
   uint32_t material_override_variant_name;
   _s_triplefloat scale;
   _s_triplefloat forward;
   _s_triplefloat left;
   _s_triplefloat up;
   _s_triplefloat position;
   InstancedGeometryFlags override_flags;
   InstancedGeometryFlags instance_flags_Mask;
   i343__Physics__InstancedPhysicsFlags physics_override_flags;
   i343__Physics__InstancedPhysicsFlags physics_instance_flags_Mask;
   InstancedGeometryPathfindingPolicy override_pathfinding_policy;
   InstancedGeometryStreamingPriority override_streaming_priority;
   PrefabOverrideFlags instance_policy_mask;
   uint8_t generated_pad81ce[2];
   PrefabLODOverrideArray LOD_distance_overrides[];
   float LOD_fade_after_override;
   StaticGeoType instance_type;
   int32_t guid;
   uint32_t hlodIndex;
   PlacementFlagsDefinition placementFlags;
   uint8_t generated_padce83[2];
   uint32_t styleId;
   uint8_t generated_pad1b38[4];
   int64_t styleTagOverride;
   i343__Physics__TriggerVolumeCallbackType Trigger_Volume_Callback;
   uint8_t generated_pad0245[7];
   _s_tagblock<MaterialOverrideEntry> instance_material_overrides;
   _s_tagblock<MaterialOverrideEntry> material_overrides;
};
struct c_structure_bsp_resource_interface{
   _s_tagblock<StructureBspRawResources> raw_resources;
   _s_resource<StructureBspTagResources> tag_resources;
   int32_t use_resource_items;
};
struct s_widget_marker_reference{
   int16_t marker_index;
   uint8_t generated_pad3469[2];
   _s_tagref widget_ref;
};
struct i343__Physics__InstancedPhysicsInstance{
   _s_tagref m_collisionTagReference;
   _s_tagblock<i343__Physics__InstancedPhysicsMaterial> instanced_physics_instances;
   int32_t instanced_physics_instances_Flags;
   int32_t instanced_physics_instances_Vector1;
   int32_t instanced_physics_instances_Vector2;
   _s_triplefloat Scale;
   _s_triplefloat Forward;
   _s_triplefloat Left;
   _s_triplefloat Up;
   _s_triplefloat Position;
   CollisionTypeEnableBitmask m_typeMask;
   int32_t m_guid;
   havokBodyIdArray havok_body_ID_array[];
   i343__Physics__InstancedPhysicsFlags flags;
   uint8_t generated_pad119d[7];
   int64_t m_scene;
   i343__Physics__TriggerVolumeCallbackType Trigger_Volume_Callback_Type;
   uint8_t generated_padf7bc[7];
};
struct structure_instanced_geometry_instance{
   _s_triplefloat scale;
   _s_triplefloat forward;
   _s_triplefloat left;
   _s_triplefloat up;
   _s_triplefloat position;
   _s_tagref Runtime_geo_mesh_reference;
   _s_tagref Foliage_material_palette_reference;
   int16_t Runtime_geo_mesh_index;
   int16_t unique_io_index;
   InstancedGeometryFlags flags;
   uint8_t generated_pad89b2[2];
   float bounds_x0;
   float bounds_x1;
   float bounds_y0;
   float bounds_y1;
   float bounds_z0;
   float bounds_z1;
   _s_triplefloat world_bounding_sphere_center;
   float world_bounding_sphere_radius;
   uint8_t generated_padd667[4];
   int64_t Placement_Checksum;
   InstancedGeometryPathfindingPolicy pathfinding_policy;
   InstancedGeometryStreamingPriority streaming_priority;
   InstancedGeometryGfxFlags flags2;
   uint16_t hlod_index;
   uint8_t generated_pad231c[2];
   LODInfoOverrides lod_Overrides;
   uint32_t style_id;
   int32_t damage_style_index;
   uint8_t generated_pad6fd1[4];
   int64_t style_tag_override_data;
   StructureInstanceMaterialOverrideData material_override_data;
   _s_triplefloat rectMin;
   _s_triplefloat rectMax;
   int32_t external_guid;
   int64_t coating_entry;
   int64_t editorData;
};
struct leaf_connection{
   int32_t plane_index;
   int32_t back_leaf_index;
   int32_t front_leaf_index;
   _s_tagblock<LeafConnectionVertex> vertices;
   float area;
};
struct map_leaf{
   _s_tagblock<map_leaf_face> faces;
   _s_tagblock<MapLeafConnectionIndex> connection_indices;
};
struct structure_marker{
   e_structure_marker_type marker_type;
   char marker_parameter[32];
   uint8_t generated_padbec6[3];
   _s_quadfloat rotation;
   _s_triplefloat position;
};
struct s_structure_cookie_cutter{
   collision_bsp collision_model;
};
struct structure_cluster{
   _s_floatrange bounds_x;
   _s_floatrange bounds_y;
   _s_floatrange bounds_z;
   _s_tagblock<StructureBSPClusterPortalIndex> portals;
   int16_t mesh_index;
   int16_t instance_imposter_cluster_mopp_index;
   _s_tagblock<SeamIndicesBlockDefinition> seam_indices;
   _s_tagblock<s_instance_bucket> instance_Buckets_Block;
   int32_t instance_Buckets_Flags;
   int32_t instance_Buckets_Vector1;
   int32_t instance_Buckets_Vector2;
};
struct cluster_portal{
   cluster_portal__s_oriented_bounds oriented_bounds;
   int16_t back_cluster;
   int16_t front_cluster;
   int32_t plane_index;
   _s_triplefloat centroid;
   float bounding_radius;
   ClusterPortalFlags flags;
   _s_tagblock<cluster_portal__StructureBSPClusterPortalVertexBlock> vertices;
};
struct s_structure_super_node_traversal_geometry{
   _s_tagblock<StructureSuperNodeTraversalGeometryIndices> portal_indices;
   _s_tagblock<StructureSuperNodeTraversalGeometryIndices> seam_indices;
};
struct SuperNodeRecursableMasks{
   uint16_t mask;
};
struct s_structure_super_node_mapping{
   int16_t parent_super_node_index;
   int8_t parent_internal_node_index;
   s_structure_super_node_mapping__t_flags flags;
   int32_t has_traversal_geometry_mask;
   int16_t first_traversal_geometry_index;
   int16_t first_aabb_index;
   int32_t aabb_mask;
   int16_t non_terminal_traversal_geometry_index;
   uint8_t generated_pad5df5[2];
};
struct structure_leaf{
   uint8_t cluster;
};
struct structure_collision_material{
   int16_t conveyor_surface_index;
   int16_t seam_mapping_index;
   structure_collision_material__c_flags flags;
};
struct s_structure_seam_mapping{
   s_structure_seam_identifier seams_identifier;
   _s_tagblock<StructureSeamEdgeMapping> edge_mapping;
   _s_tagblock<s_structure_seam_cluster_mapping> cluster_mapping;
};
struct s_structure_manifest_build_identifier_definition{
   int32_t manifest_id0;
   int32_t manifest_id1;
   int32_t manifest_id2;
   int32_t manifest_id3;
   int32_t build_index;
   int32_t structure_importer_version;
};
struct structure_bsp{
   BLANK AnyTag;
   s_structure_manifest_build_identifier_definition build_identifier;
   s_structure_manifest_build_identifier_definition parent_build_identifier;
   int32_t import_info_checksum;
   int32_t import_version;
   _s_tagref owner_level;
   _s_tagref structure_meta_data;
   StructureBspFlags flags;
   c_structure_bsp_content_policy_flags content_policy_flags;
   c_structure_bsp_content_policy_flags failed_content_policy_flags;
   uint8_t generated_pad7169[2];
   _s_tagblock<s_structure_seam_mapping> seam_identifiers;
   _s_tagblock<structure_collision_material> collision_materials;
   _s_tagblock<structure_leaf> leaves;
   _s_tagblock<s_structure_super_node_mapping> super_node_parent_mappings;
   _s_tagblock<SuperNodeRecursableMasks> super_node_recursable_masks;
   _s_tagblock<s_structure_super_node_traversal_geometry> structure_super_node_traversal_geometry_block;
   _s_floatrange world_bounds_x;
   _s_floatrange world_bounds_y;
   _s_floatrange world_bounds_z;
   _s_tagblock<cluster_portal> cluster_portals;
   _s_tagblock<structure_cluster> clusters;
   _s_tagblock<s_structure_cookie_cutter> cookie_cutters;
   _s_tagblock<structure_marker> markers;
   _s_tagblock<map_leaf> leaf_map_leaves;
   _s_tagblock<leaf_connection> leaf_map_connections;
   _s_tagblock<error_report_category> errors;
   _s_tagblock<structure_instanced_geometry_instance> instanced_geometry_instances;
   int32_t instanced_geometry_instances_Flags;
   int32_t instanced_geometry_instances_Vector1;
   int32_t instanced_geometry_instances_Vector2;
   _s_tagblock<structure_instanced_geometry_instance> instanced_foliage_instances;
   int32_t instanced_foliage_instances_Flags;
   int32_t instanced_foliage_instances_Vector1;
   int32_t instanced_foliage_instances_Vector2;
   _s_tagblock<i343__Physics__InstancedPhysicsInstance> instanced_physics_instances;
   int32_t instanced_physics_instances_Flags;
   int32_t instanced_physics_instances_Vector1;
   int32_t instanced_physics_instances_Vector2;
   int32_t Instance_Geometry_Tag_Instance_Count;
   int64_t Instance_Postprocess_Checksum;
   s_render_geometry render_geometry;
   _s_tagblock<s_widget_marker_reference> widget_references;
   c_structure_bsp_resource_interface resource_interface;
   _s_tagblock<structure_external_instanced_geometry_reference> external_references;
   int32_t base_material_count;
   _s_tagblock<s_structure_bsp_obb_volume> obb_volume_list;
   int64_t m_instanceGroupPipelineStateCache;
   _s_data growable_dataof;
   int64_t heap_array_pointer;
   int32_t heap_current_size;
   int32_t active_growth_state;
   int64_t instanceData;
   int64_t instanceBufferConstants;
   int64_t ioPlacementGpuTestingBuffer;
   int64_t ioLodStaticInfoBuffer;
   int64_t ioLodIndexBuffer;
   int64_t ioLodTransitionsOffsets;
   GpuVisibilityBitfield activeIoBitfield;
   int64_t newlyVisibleIoBitfieldBuffer;
   int64_t ioPlacementLodInfoBuffer;
   _s_tagref acoustics_data;
   int32_t number_of_IO_over_the_limit;
   int32_t needToClearShadowSubmissionsBuffers;
   uint8_t generated_pad5788[4];
   int64_t gpuFloatingShadowSubmissionData;
   int64_t BSPRuntimeData;
   int64_t View_GPU_Submission_Data;
   BspStructureBitfieldStorageType Instances_with_non_Gpu_submission_parts[];
   int64_t Raytracing_Submission_Data;
   _s_tagblock<BspBitmapReference> bitmaps;
   int32_t bitmaps_Flags;
   int32_t bitmaps_Vector1;
   int32_t bitmaps_Vector2;
   _s_tagblock<BspUniqueStreamingIO> uniqueIos;
   int32_t uniqueIos_Flags;
   int32_t uniqueIos_Vector1;
   int32_t uniqueIos_Vector2;
   _s_tagblock<BspUniqueStreamingIO> uniqueFoliage;
   int32_t uniqueFoliage_Flags;
   int32_t uniqueFoliage_Vector1;
   int32_t uniqueFoliage_Vector2;
   _s_tagblock<s_decorator_scenario_set_placements> decorator_sets;
   _s_tagblock<i343__Decorators__DecoratorRuntime> decorator_runtime;
   StructureBspRenderFlags render_flags;
   uint8_t generated_pad0ad3[7];
};
struct ErrorReportNodeWeight{
   float node_weight;
};
struct ErrorReportNodeIndex{
   uint8_t node_index;
};
struct ErrorReportQuadPoint{
   error_report_point point;
};
struct ErrorReportTrianglePoint{
   error_report_point point;
};
struct ErrorReportLinePoint{
   error_report_point point;
};
struct error_report_point{
   _s_triplefloat position;
   ErrorReportNodeIndex node_indices[];
   ErrorReportNodeWeight node_weights[];
};
struct error_report_comment{
   _s_data text;
   error_report_point point;
   _s_argbfloat color;
};
struct error_report_quad{
   ErrorReportQuadPoint points[];
   _s_argbfloat color;
};
struct error_report_triangle{
   ErrorReportTrianglePoint points[];
   _s_argbfloat color;
};
struct error_report_line{
   ErrorReportLinePoint points[];
   _s_argbfloat color;
};
struct error_report_vector{
   error_report_point point;
   _s_argbfloat color;
   _s_triplefloat normal;
   float screen_length;
};
struct error_report_vertex{
   error_report_point point;
   _s_argbfloat color;
   float screen_size;
};
struct ClothMeshIndex{
   int32_t index;
};
struct node_index{
   int16_t node_index;
};
struct error_report{
   ErrorReportTypes type;
   e_error_report_source source;
   ErrorReportFlags flags;
   _s_data text;
   int32_t source_identifier;
   char source_filename[32];
   int32_t source_line_number;
   _s_tagblock<error_report_vertex> vertices;
   _s_tagblock<error_report_vector> vectors;
   _s_tagblock<error_report_line> lines;
   _s_tagblock<error_report_triangle> triangles;
   _s_tagblock<error_report_quad> quads;
   _s_tagblock<error_report_comment> comments;
   int32_t report_key;
   int32_t node_index;
   _s_floatrange bounds_x;
   _s_floatrange bounds_y;
   _s_floatrange bounds_z;
   _s_argbfloat color;
};
struct marker{
   int8_t region_index;
   uint8_t generated_padb0cb[3];
   uint32_t permutation_index;
   uint16_t node_index;
   render_model_marker__Flags flags;
   uint8_t generated_pad6416[1];
   _s_triplefloat translation;
   _s_quadfloat rotation;
   float scale;
   _s_triplefloat direction;
};
struct permutation{
   uint32_t name;
   int16_t mesh_index;
   uint16_t mesh_count;
   uint32_t clone_name;
};
struct MaterialPipelineStateInfo{
   _s_tagref shader;
   AlphaBlendMode alpha_blend_mode;
   MaterialPipelineStateInfo__MaterialPipelineStateFlags flags;
   uint8_t generated_pad67cc[2];
};
struct RenderModelClothData{
   int32_t regionIndex;
   _s_tagblock<ClothMeshIndex> meshIndex;
   _s_data havokData;
};
struct RenderModelClothMesh{
   uint32_t nameHash;
   _s_tagblock<ClothMeshIndex> meshIndex;
   int32_t meshLodIndex;
   ClothMeshFlags flags;
   uint16_t numVertexComponents;
   int32_t vertexCount;
   int32_t triangleCount;
   _s_data geometry;
};
struct bone_group{
   uint32_t name;
   _s_tagblock<node_index> bones;
};
struct DefaultNodeOrientations{
   _s_quadfloat rotation;
   _s_triplefloat translation;
   float scale;
};
struct InstanceNodeMapping{
   int16_t instance_node_map_region_node_index;
};
struct error_report_category{
   char name[256];
   ErrorReportTypes report_type;
   uint8_t generated_padf276[1];
   ErrorReportFlags flags;
   uint16_t runtime_generation_flags;
   uint8_t generated_pad3f2b[2];
   int32_t runtime_something;
   _s_tagblock<error_report> reports;
};
struct geometry_material{
   _s_tagref material;
};
struct marker_group{
   uint32_t name;
   _s_tagblock<marker> markers;
};
struct Bone_Physics{
   int16_t Node;
   uint8_t generated_pad07da[2];
   float Spring_Coefficient;
   float Dampening_Fraction_0_1_;
   float Max_Angle;
};
struct node{
   uint32_t name;
   int16_t parent_node;
   int16_t first_child_node;
   int16_t next_sibling_node;
   RenderModelNodeFlags flags;
   _s_triplefloat default_translation;
   _s_quadfloat default_rotation;
   _s_triplefloat inverse_forward;
   _s_triplefloat inverse_left;
   _s_triplefloat inverse_up;
   _s_triplefloat inverse_position;
   float inverse_scale;
   float distance_from_parent;
   e_render_model_node_procedure procedure;
   e_render_model_node_procedure_axis procedure_axis;
   uint8_t procedure_index;
   uint8_t generated_pad3a2d[1];
   int16_t procedure_node_A;
   int16_t procedure_node_B;
   float procedure_var_1;
   float procedure_var_2;
   _s_triplefloat procedure_neutral_offset;
};
struct region{
   uint32_t name;
   _s_tagblock<permutation> permutations;
};
struct render_model_definition{
   BLANK AnyTag;
   uint32_t name;
   RenderModelFlags flags;
   uint16_t version;
   RenderModelMeshResourcePackingPolicy mesh_resource_packing_policy;
   RenderModelDefaultLoadVariantPolicy Default_Load_Variant_Policy;
   uint8_t generated_padd53e[3];
   int32_t Number_of_LODS_to_make_required_memory;
   int32_t runtime_import_info_checksum;
   _s_tagblock<region> regions;
   int32_t node_list_checksum;
   _s_tagblock<node> nodes;
   _s_tagblock<Bone_Physics> Bone_Settings;
   _s_tagblock<marker_group> marker_groups;
   _s_tagblock<geometry_material> materials;
   _s_tagblock<error_report_category> errors;
   float don_t_draw_over_camera_cosine_angle;
   s_render_geometry render_geometry;
   _s_tagblock<InstanceNodeMapping> node_map_mapping;
   _s_tagblock<DefaultNodeOrientations> runtime_node_orientations;
   _s_tagblock<bone_group> bone_groups;
   _s_tagblock<RenderModelClothMesh> cloth_meshes;
   _s_tagblock<RenderModelClothData> cloth_datas;
   _s_tagref parent_model;
   _s_tagblock<MaterialPipelineStateInfo> MaterialPipelineStateInfos;
   uint8_t generated_pad21f3[4];
   int64_t m_instanceGroupPipelineStateCache;
};
struct StreamingChunkList{
   _s_data chunks;
};
struct BLASOfflineData{
   _s_data Temp_BLAS_buffer;
   int32_t PostbuildCurrentSize;
   int32_t PostbuildSerializedSize;
   uint32_t offset;
   uint8_t generated_pad707f[4];
   int64_t m_resource;
};
struct MeshPartRaytracingMetaData{
   uint32_t index_count;
   uint32_t index_offset;
   uint8_t geo_type;
   uint8_t generated_padf9a7[3];
};
struct D3DBufferData{
   uint32_t byte_width;
   uint32_t bind_flags;
   uint32_t misc_flags;
   uint32_t stride;
   _s_data d3d_buffer;
   uint16_t usage;
   uint16_t cpu_flags;
};
struct i343__LevelBreakdown__AssetVariantLevelBreakdownData{
   uint32_t Variant_name;
   _s_tagref Runtime_Geo;
   _s_tagref Static_Collision_Geo;
};
struct s_raw_water_append{
   _s_doublefloat base_texcoord;
};
struct GeometryNodeWeight{
   float node_weight;
};
struct IResourceViewPointer{
   int64_t IResourceView;
};
struct StreamingGeometryBuffer{
   uint32_t buffer_size;
   uint32_t bind_flags;
   _s_data Temp_buffer_for_pipeline;
};
struct StreamingGeometryChunk{
   uint16_t buffer_index;
   uint16_t allocation_priority;
   uint32_t buffer_start;
   uint32_t buffer_end;
};
struct StreamingGeometryMesh{
   int32_t lod_state_cache_slot;
   int8_t required_lod;
   uint8_t generated_pad413f[3];
   _s_data lod_raytracing_meta_data;
   _s_tagblock<StreamingChunkList> mesh_lod_chunks;
};
struct RaytracingMetaData{
   uint16_t index_buffer_index;
   uint16_t vertex_buffer_index;
   eRasterizerVertexFormat vertex_format;
   VertexType vertex_type;
   uint8_t generated_pad35fb[3];
   _s_triplefloat decompression_Scale;
   _s_triplefloat decompression_Translation;
   _s_tagblock<MeshPartRaytracingMetaData> mesh_part_metadata;
   RaytracingMetaDataFlags meta_data_flags;
   uint8_t generated_pade946[6];
   BLASOfflineData blas_offline_data;
};
struct RasterizerIndexBuffer{
   uint8_t declaration_type;
   uint8_t stride;
   uint8_t ownsD3DResource;
   uint8_t generated_pad8bf7[1];
   uint32_t count;
   uint32_t offset;
   D3DBufferData d3dbuffer;
   int64_t m_resource;
   int64_t m_resourceView;
};
struct RasterizerVertexBuffer{
   eVertexBufferUsage usage;
   eRasterizerVertexFormat format;
   uint8_t stride;
   uint8_t ownsD3DResource;
   uint8_t generated_pad9e95[2];
   uint32_t count;
   uint32_t offset;
   D3DBufferData d3dbuffer;
   int64_t m_resource;
   int64_t m_resourceView;
};
struct i343__LevelBreakdown__RuntimeGeoLevelBreakdownData{
   _s_tagref Asset_tag;
   uint32_t Default_variant_name;
   _s_tagref LOD_settings_tag;
   uint32_t LOD_settings_name;
   int32_t Convert_Collision_to_Shadow_Geometry;
   _s_tagblock<i343__LevelBreakdown__AssetVariantLevelBreakdownData> Asset_variants;
};
struct RawTriangleEdgeIndexInfo{
   uint32_t triangle_and_edge_index_pos;
   uint32_t encoded_triangle_and_edge_size;
};
struct RawTensionEdge{
   uint32_t start_vertex_index;
   uint32_t end_vertex_index;
   float edge_rest_length;
};
struct RawBlendshapeVertex{
   _s_triplefloat position;
   _s_triplefloat normal;
   _s_argbfloat tension_and_ambient_occlusion;
   uint32_t target_Id;
};
struct s_raw_water_data{
   _s_tagblock<WordIndex> raw_water_indices;
   _s_tagblock<s_raw_water_append> raw_water_vertices;
};
struct RawVertex{
   _s_triplefloat position;
   _s_doublefloat texcoord;
   _s_triplefloat normal;
   _s_triplefloat binormal;
   _s_triplefloat tangent;
   _s_doublefloat lightmap_texcoord;
   GeometryNodeIndex node_indices[];
   GeometryNodeWeight node_weights[];
   _s_triplefloat vertex_color;
   _s_doublefloat texcoord1;
   float dual_quat_weight;
   float vertex_alpha;
   _s_triplefloat tangent_UV2;
   _s_doublefloat texcoord2;
   _s_triplefloat tangent_UV3;
};
struct s_render_geometry_api_resource{
   _s_tagblock<RasterizerVertexBuffer> pc_vertex_buffers;
   _s_tagblock<RasterizerIndexBuffer> pc_index_buffers;
   _s_tagblock<RaytracingMetaData> raytracing_metadata;
   _s_tagblock<StreamingGeometryMesh> Streaming_Meshes;
   _s_tagblock<StreamingGeometryChunk> Streaming_Chunks;
   _s_tagblock<StreamingGeometryBuffer> Streaming_Buffers;
   int64_t m_sharedDXResources;
   int64_t m_sharedDXResourceRawView;
   IResourceViewPointer m_sharedDXResourceTypedViews[];
   int64_t Runtime_Data;
};
struct PositioningNodeWeight{
   float node_weight;
};
struct GeometryNodeIndex{
   uint8_t node_index;
};
struct LODRenderDataVertexBufferIndex{
   uint16_t vertex_buffer_index;
};
struct MaterialStreamingScale{
   int32_t material_index;
   float material_scale;
};
struct s_subpart{
   int32_t index_start;
   int32_t index_count;
   int16_t part_index;
   uint16_t budget_vertex_count;
};
struct s_part{
   int16_t material_index;
   int16_t transparent_sorting_index;
   int32_t index_start;
   int32_t index_count;
   int32_t perMeshPartConstantsOffset;
   uint8_t part_type;
   uint8_t generated_pad5c53[1];
   PartFlags part_flags;
   uint16_t budget_vertex_count;
   uint8_t generated_pad0f9e[2];
};
struct s_per_mesh_raw_data{
   _s_tagblock<RawVertex> raw_vertices;
   _s_tagblock<WordIndex> raw_indices;
   _s_tagblock<DwordIndex> raw_indices32;
   _s_tagblock<s_raw_water_data> raw_water_data;
   _s_tagblock<RawBlendshapeVertex> raw_blendshapes;
   _s_tagblock<DwordIndex> raw_blendshapes_indices;
   _s_tagblock<RawTensionEdge> raw_tension_edges;
   _s_tagblock<DwordIndex> raw_blendshapes_triangle_and_edge_Indices;
   _s_tagblock<RawTriangleEdgeIndexInfo> raw_blendshapes_triangle_and_edge_index_info;
   PerMeshRawDataFlags flags;
   _s_tagblock<i343__LevelBreakdown__RuntimeGeoLevelBreakdownData> level_breakdown_data;
};
struct WordIndex{
   uint16_t word;
};
struct RenderGeometryDeformationParameter{
   uint32_t parameter_name;
   uint8_t parameter_mode;
   uint8_t generated_pad8065[3];
   float constant_input;
};
struct DwordIndex{
   uint32_t dword;
};
struct RenderGeometryMeshPackage__ResourceLookup{
   int16_t resource_group_index;
   int16_t group_item_index;
};
struct RenderGeometryMeshPackageResourceGroup{
   _s_resource<s_render_geometry_api_resource> mesh_resource;
};
struct s_positioning{
   _s_quadfloat plane;
   _s_triplefloat position;
   float radius;
   GeometryNodeIndex node_indices[];
   PositioningNodeWeight node_weights[];
};
struct NodeIndexStruct{
   uint16_t node_index;
};
struct MeshVertexKey{
   int32_t key1;
   int32_t key2;
};
struct LODRenderData{
   _s_tagblock<s_per_mesh_raw_data> per_mesh_temporary;
   _s_tagblock<s_positioning> part_sorting_position;
   _s_tagblock<s_part> parts;
   _s_tagblock<s_subpart> subparts;
   _s_tagblock<MaterialStreamingScale> material_streaming_scale;
   LODRenderDataVertexBufferIndex vertex_buffer_indices[];
   uint16_t index_buffer_index;
   LODFlags lod_flags;
   LODRenderFlags lod_render_flags;
   uint16_t raytracing_metadata_index;
   uint8_t generated_paddaed[2];
};
struct StaticGeoMarker{
   _s_triplefloat translation;
   _s_quadfloat rotation;
};
struct DeformationParameterDefaultValue{
   uint32_t parameter_name;
   float parameter_default_value;
};
struct RenderGeometryProceduralRemapTable{
   _s_tagblock<WordIndex> Procedural_Remap_Table;
};
struct RenderGeometryProceduralDeformation{
   _s_tagblock<RenderGeometryDeformationParameter> parameter_list;
   uint32_t Procedural_deformation_function_name;
};
struct s_blendshape_compression_info{
   _s_triplefloat position_scale;
   _s_triplefloat position_offset;
   _s_triplefloat normal_scale;
   _s_triplefloat normal_offset;
   _s_tagblock<DwordIndex> raw_target_hash_name;
};
struct RenderGeometryMeshPackage{
   uint16_t flags;
   RenderGeometryMeshPackage__Policy mesh_resource_packing_policy;
   uint16_t total_index_buffer_count;
   uint16_t total_vertex_buffer_count;
   uint16_t total_raytracing_metadata_count;
   uint8_t generated_pad4c35[2];
   _s_tagblock<RenderGeometryMeshPackageResourceGroup> mesh_resource_groups;
   _s_tagblock<RenderGeometryMeshPackage__ResourceLookup> index_resource_look_up;
   _s_tagblock<RenderGeometryMeshPackage__ResourceLookup> vertex_resource_look_up;
   _s_tagblock<RenderGeometryMeshPackage__ResourceLookup> raytracing_resource_look_up;
};
struct s_render_geometry_lod_volume{
   _s_triplefloat position_bounds_0;
   _s_triplefloat position_bounds_1;
   _s_tagblock<s_positioning> position_data;
};
struct RenderGeometryAnimatedMeshRef{
   _s_tagref Animated_mesh_tag_reference;
   uint32_t Name;
};
struct s_per_mesh_node_map{
   _s_tagblock<NodeIndexStruct> node_map;
};
struct s_compression_info{
   CompressionFlags compression_flags;
   uint8_t generated_pad1711[2];
   _s_triplefloat position_bounds_0;
   _s_triplefloat position_bounds_1;
   _s_doublefloat texcoord_bounds_0;
   _s_doublefloat texcoord_bounds_1;
   _s_doublefloat texcoord_bounds2_0;
   _s_doublefloat texcoord_bounds2_1;
   _s_doublefloat texcoord_bounds3_0;
   _s_doublefloat texcoord_bounds3_1;
   float unused0;
   float unused1;
};
struct PCAMeshIndex{
   int32_t mesh_index;
};
struct s_mesh{
   _s_tagblock<LODRenderData> LOD_render_data;
   MeshFlags mesh_flags;
   uint8_t rigid_node_index;
   VertexType vertex_type;
   int8_t use_dual_quat;
   IndexBufferPrimitiveType index_buffer_type;
   int16_t pca_mesh_index;
   _s_tagblock<MeshVertexKey> vertex_keys;
   int16_t clone_index;
   int16_t optional_LOD_volume_index;
   int16_t Procedural_Deformation_Remap_Table;
   uint8_t generated_pad8fb3[2];
   int32_t lod_state_cache_slot;
};
struct MeshImportInfo{
   uint32_t CRC;
   _s_triplefloat position_bounds_0;
   _s_triplefloat position_bounds_1;
   _s_doublefloat texcoord_bounds_0;
   _s_doublefloat texcoord_bounds_1;
};
struct LODTransitionDistanceBlock{
   float lodTransitionDistance;
};
struct BLANK{
   int32_t BLANK;
   uint8_t BLANK[4];
};
struct StaticGeoMarkerGroup{
   uint32_t name;
   _s_tagblock<StaticGeoMarker> markers;
};
struct s_render_geometry{
   RenderGeometryFlags runtime_flags;
   _s_tagblock<MeshImportInfo> meshes_import_info;
   _s_tagblock<s_mesh> meshes;
   _s_tagblock<PCAMeshIndex> PCA_Mesh_Indices;
   _s_tagblock<s_compression_info> compression_info;
   _s_tagblock<s_per_mesh_node_map> per_mesh_node_map;
   _s_tagblock<RenderGeometryAnimatedMeshRef> Optional_animated_mesh_tag_references;
   _s_tagblock<s_render_geometry_lod_volume> Optional_LOD_volumes_data;
   RenderGeometryMeshPackage mesh_package;
   _s_tagblock<s_blendshape_compression_info> blendshape_compression_info;
   _s_tagblock<RenderGeometryProceduralDeformation> blendshape_Procedural_Deformation_function_list;
   _s_tagblock<RenderGeometryProceduralRemapTable> Procedural_Deformation_function_Remap_Table_List;
   _s_tagblock<DeformationParameterDefaultValue> Deformation_parameter_default_value_table_from_skeleton;
   uint8_t generated_paddf2d[4];
   int64_t perMeshPartConstantBuffer;
   int8_t target_platformization;
   uint8_t generated_padc54c[7];
};
struct RuntimeGeoPerMeshData{
   uint32_t Name;
   int16_t Mesh_index;
   PerMeshFlagsDefinition Per_mesh_flags;
   uint8_t Lightmapping_policy;
   _s_triplefloat Scale;
   _s_triplefloat Forward;
   _s_triplefloat Left;
   _s_triplefloat Up;
   _s_triplefloat Position;
   _s_triplefloat Bounds_min;
   _s_triplefloat Bounds_max;
   _s_triplefloat Bounding_sphere_center;
   float Bounding_sphere_radius;
   _s_tagblock<LODTransitionDistanceBlock> Lod_levels;
   float Fade_out_after_distance;
   uint8_t generated_pad359f[4];
   int64_t Mesh_Checksum;
};
struct BLANK{
   int64_t BLANK;
   BLANK BLANK;
};
struct RuntimeGeoTag{
   BLANK AnyTag;
   _s_tagblock<RuntimeGeoPerMeshData> Per_Mesh_Data;
   uint8_t generated_pad8ff5[4];
   s_render_geometry render_geometry;
   _s_tagblock<StaticGeoMarkerGroup> marker_groups;
   uint32_t asset_category_name;
   int32_t asset_category_index;
   int32_t Number_of_LODS_to_make_required;
};
#pragma pack(pop)
