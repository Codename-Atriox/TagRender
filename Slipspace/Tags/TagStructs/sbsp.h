/*
; CONTENT AUTOGENERATED BY CODENAME ATRIOX: PLUGIN CONVERTOR
; CONVERTOR VERSION: 0.4.3
; SOURCE TIMESTAMP: 05/09/2023 -> 4:22:45 PM
; SOURCE GAME VERSION: 6.10024.17792.0
; SOURCE PLUGIN: sbsp
; GENERATED TIMESTAMP: 14/09/2023 -> 7:03:46 PM
*/

#pragma once
#include "commons.h"
#pragma pack(push, 1)

namespace sbsp {

	// /////////////// //
	// FLAG REFERENCES //
	// /////////////// //
	struct StructureBspFlags {
		uint16_t content;
		bool has_processed_prefab_instances() { return (content & 0b0000000000000001); }
		bool Collision_geometry_is_over_double_the_budget() { return (content & 0b0000000000000010); }
		bool prefab_placements_limit_exceeded() { return (content & 0b0000000000000100); }
		bool hidden_ios_have_changed() { return (content & 0b0000000000001000); }
		bool get_data_from_hlods() { return (content & 0b0000000000010000); }
	};
	struct c_structure_bsp_content_policy_flags {
		uint16_t content;
		bool has_working_pathfinding() { return (content & 0b0000000000000001); }
		bool convex_decomposition_enabled() { return (content & 0b0000000000000010); }
	};
	struct StructureBspRenderFlags {
		uint8_t content;
		bool Has_Coatings() { return (content & 0b00000001); }
		bool Coatings_Are_Finalized() { return (content & 0b00000010); }
		bool Disable_Gpu_Submission() { return (content & 0b00000100); }
	};
	struct structure_collision_material__c_flags {
		uint16_t content;
		bool is_seam() { return (content & 0b0000000000000001); }
	};
	struct s_structure_super_node_mapping__t_flags {
		uint8_t content;
		bool above() { return (content & 0b00000001); }
	};
	struct ClusterPortalFlags {
		uint32_t content;
		bool ai_can_t_hear_through_this_shit() { return (content & 0b00000000000000000000000000000001); }
		bool one_way() { return (content & 0b00000000000000000000000000000010); }
		bool no_way() { return (content & 0b00000000000000000000000000000100); }
		bool one_way_reversed() { return (content & 0b00000000000000000000000000001000); }
		bool no_one_can_hear_through_this() { return (content & 0b00000000000000000000000000010000); }
	};
	struct ErrorReportFlags {
		uint16_t content;
		bool rendered() { return (content & 0b0000000000000001); }
		bool tangent_space() { return (content & 0b0000000000000010); }
		bool non_critical() { return (content & 0b0000000000000100); }
		bool lightmap_light() { return (content & 0b0000000000001000); }
		bool report_key_is_valid() { return (content & 0b0000000000010000); }
	};
	struct InstancedGeometryFlags {
		uint16_t content;
		bool render_only() { return (content & 0b0000000000000001); }
		bool does_not_block_aoe_damage() { return (content & 0b0000000000000010); }
		bool remove_from_dynamic_shadow_geometry() { return (content & 0b0000000000000100); }
		bool cinema_only() { return (content & 0b0000000000001000); }
		bool exclude_from_cinema() { return (content & 0b0000000000010000); }
		bool disable_play_collision() { return (content & 0b0000000000100000); }
		bool disable_bullet_collision() { return (content & 0b0000000001000000); }
		bool ignore_cubemap_volume() { return (content & 0b0000000010000000); }
		bool always_generate_floating_shadow() { return (content & 0b0000000100000000); }
		bool PVS_always_visible() { return (content & 0b0000001000000000); }
		bool PVS_always_use_LOD_0() { return (content & 0b0000010000000000); }
		bool PVS_don_t_use_as_an_occluder() { return (content & 0b0000100000000000); }
		bool exclude_from_intel_map() { return (content & 0b0001000000000000); }
		bool Exclude_from_broadphase_calculation() { return (content & 0b0010000000000000); }
		bool can_generate_decorators() { return (content & 0b0100000000000000); }
		bool isHLOD() { return (content & 0b1000000000000000); }
	};
	struct InstancedGeometryGfxFlags {
		uint16_t content;
		bool contains_decal_parts() { return (content & 0b0000000000000001); }
		bool negative_scale() { return (content & 0b0000000000000010); }
		bool is_quick_deleted() { return (content & 0b0000000000000100); }
		bool Supports_Coatings() { return (content & 0b0000000000001000); }
		bool wants_hologram_override() { return (content & 0b0000000000010000); }
		bool Coatings_Setup_On_Initial_Frame() { return (content & 0b0000000000100000); }
	};
	struct CollisionTypeEnableBitmask {
		uint32_t content;
		bool Bullet() { return (content & 0b00000000000000000000000000000001); }
		bool Play() { return (content & 0b00000000000000000000000000000010); }
		bool InvisibleWall() { return (content & 0b00000000000000000000000000000100); }
		bool Render() { return (content & 0b00000000000000000000000000001000); }
	};
	struct i343__Physics__InstancedPhysicsFlags {
		uint8_t content;
		bool Allow_decals() { return (content & 0b00000001); }
		bool Is_Trigger_Volume() { return (content & 0b00000010); }
	};
	struct RenderGeometryFlags {
		uint32_t content;
		bool processed() { return (content & 0b00000000000000000000000000000001); }
		bool available() { return (content & 0b00000000000000000000000000000010); }
		bool has_valid_budgets__really_() { return (content & 0b00000000000000000000000000000100); }
		bool manual_resource_creation() { return (content & 0b00000000000000000000000000001000); }
		bool keep_raw_geometry() { return (content & 0b00000000000000000000000000010000); }
		bool dont_use_compressed_vertex_positions() { return (content & 0b00000000000000000000000000100000); }
		bool pca_animation_table_sorted() { return (content & 0b00000000000000000000000001000000); }
		bool has_dual_quat() { return (content & 0b00000000000000000000000010000000); }
		bool mesh_streaming() { return (content & 0b00000000000000000000000100000000); }
	};
	struct PrefabOverrideFlags {
		uint16_t content;
		bool override_pathfinding_policy() { return (content & 0b0000000000000001); }
	};
	struct PlacementFlagsDefinition {
		uint16_t content;
		bool Is_HLOD() { return (content & 0b0000000000000001); }
	};
	struct MeshFlags {
		uint16_t content;
		bool mesh_has_vertex_color() { return (content & 0b0000000000000001); }
		bool use_region_index_for_sorting() { return (content & 0b0000000000000010); }
		bool can_be_rendered_in_draw_bundles() { return (content & 0b0000000000000100); }
		bool mesh_is_custom_shadow_caster() { return (content & 0b0000000000001000); }
		bool mesh_is_unindexed__do_not_modify_() { return (content & 0b0000000000010000); }
		bool mash_should_render_in_z_prepass() { return (content & 0b0000000000100000); }
		bool use_uncompressed_vertex_format() { return (content & 0b0000000001000000); }
		bool mesh_is_PCA() { return (content & 0b0000000010000000); }
		bool mesh_has_a_useful_set_of_second_texture_coords() { return (content & 0b0000000100000000); }
		bool mesh_has_a_useful_set_of_third_texture_coords() { return (content & 0b0000001000000000); }
		bool Use_UV3_Tangent_Rotation() { return (content & 0b0000010000000000); }
	};
	struct CompressionFlags {
		uint16_t content;
		bool compressed_position() { return (content & 0b0000000000000001); }
		bool compressed_texcoord() { return (content & 0b0000000000000010); }
		bool compression_optimized() { return (content & 0b0000000000000100); }
	};
	struct s_decorator_placement__DecoratorPlacementFlags {
		uint8_t content;
		bool delete_bit() { return (content & 0b00000001); }
		bool adjusted_bit() { return (content & 0b00000010); }
		bool approximated_position_bit() { return (content & 0b00000100); }
	};
	struct LeafFlags {
		uint8_t content;
		bool contains_double_sided_surfaces() { return (content & 0b00000001); }
	};
	struct SurfaceFlags {
		uint8_t content;
		bool two_sided() { return (content & 0b00000001); }
		bool invisible() { return (content & 0b00000010); }
		bool climbable() { return (content & 0b00000100); }
		bool invalid() { return (content & 0b00001000); }
		bool conveyor() { return (content & 0b00010000); }
		bool slip() { return (content & 0b00100000); }
		bool plane_negated() { return (content & 0b01000000); }
	};
	struct LODFlags {
		uint16_t content;
		bool lod_0() { return (content & 0b0000000000000001); }
		bool lod_1() { return (content & 0b0000000000000010); }
		bool lod_2() { return (content & 0b0000000000000100); }
		bool lod_3() { return (content & 0b0000000000001000); }
		bool lod_4() { return (content & 0b0000000000010000); }
		bool lod_5() { return (content & 0b0000000000100000); }
		bool lod_6() { return (content & 0b0000000001000000); }
		bool lod_7() { return (content & 0b0000000010000000); }
		bool lod_8() { return (content & 0b0000000100000000); }
		bool lod_9() { return (content & 0b0000001000000000); }
		bool lod_10() { return (content & 0b0000010000000000); }
		bool lod_11() { return (content & 0b0000100000000000); }
		bool lod_12() { return (content & 0b0001000000000000); }
		bool lod_13() { return (content & 0b0010000000000000); }
		bool lod_14() { return (content & 0b0100000000000000); }
		bool lod_15() { return (content & 0b1000000000000000); }
	};
	struct LODRenderFlags {
		uint16_t content;
		bool LOD_has_shadow_proxies() { return (content & 0b0000000000000001); }
	};
	struct PerMeshRawDataFlags {
		uint32_t content;
		bool indices_are_triangle_strips() { return (content & 0b00000000000000000000000000000001); }
		bool indices_are_triangle_lists() { return (content & 0b00000000000000000000000000000010); }
		bool indices_are_quad_lists() { return (content & 0b00000000000000000000000000000100); }
	};
	struct PartFlags {
		uint16_t content;
		bool draw_cull_rendering_shields() { return (content & 0b0000000000000001); }
		bool blendshape() { return (content & 0b0000000000000010); }
		bool colormask_Control_NormalBlend() { return (content & 0b0000000000000100); }
		bool draw_cull_rendering_active_camo() { return (content & 0b0000000000001000); }
		bool Don_t_use_virtual_texturing() { return (content & 0b0000000000010000); }
		bool Virtual_texturing_UV_shell_skirt() { return (content & 0b0000000000100000); }
	};
	struct RaytracingMetaDataFlags {
		uint16_t content;
		bool has_blendshape() { return (content & 0b0000000000000001); }
	};

	// /////////////// //
	// ENUM REFERENCES //
	// /////////////// //
	enum class e_structure_marker_type : uint8_t {
		none = 0,
		falling_leaf_generator = 1,
		sky__unused_ = 2,
		model = 3,
	};
	enum class ErrorReportTypes : uint8_t {
		silent = 0,
		comment = 1,
		warning = 2,
		error = 3,
	};
	enum class InstancedGeometryPathfindingPolicy : uint8_t {
		cut_out = 0,
		_static = 1,
		none = 2,
	};
	enum class InstancedGeometryStreamingPriority : uint8_t {
		_default = 0,
		higher = 1,
		highest = 2,
	};
	enum class i343__Physics__TriggerVolumeCallbackType : uint8_t {
		None = 0,
	};
	enum class StaticGeoType : uint32_t {
		Default = 0,
		Foliage = 1,
	};
	enum class e_error_report_source : uint8_t {
		none = 0,
		structure = 1,
		poop = 2,
		lightmap = 3,
		pathfinding = 4,
	};
	enum class VertexType : uint8_t {
		world = 0,
		rigid = 1,
		skinned = 2,
		particle_model = 3,
		screen = 4,
		debug = 5,
		transparent = 6,
		particle = 7,
		removed08 = 8,
		removed09 = 9,
		chud_simple = 10,
		decorator = 11,
		position_only = 12,
		removed13 = 13,
		ripple = 14,
		removed15 = 15,
		tessellatedTerrain = 16,
		empty = 17,
		decal = 18,
		removed19 = 19,
		removed20 = 20,
		_position_only = 21,
		tracer = 22,
		rigid_boned = 23,
		removed24 = 24,
		CheapParticle = 25,
		dq_skinned = 26,
		skinned_8_weights = 27,
		tessellated_vector = 28,
		interaction = 29,
		number_of_standard_vertex_types = 30,
	};
	enum class IndexBufferPrimitiveType : uint8_t {
		DEFAULT = 0,
		line_list = 1,
		line_strip = 2,
		triangle_list = 3,
		triangle_patch = 4,
		triangle_strip = 5,
		quad_list = 6,
	};
	enum class RenderGeometryMeshPackage__Policy : uint16_t {
		Single_Resource = 0,
		N_Meshes_Per_Resource = 1,
	};
	enum class eVertexBufferUsage : uint32_t {
		Position = 0,
		UV0 = 1,
		UV1 = 2,
		UV2 = 3,
		Color = 4,
		Normal = 5,
		Tangent = 6,
		BlendIndices0 = 7,
		BlendWeights0 = 8,
		BlendIndices1 = 9,
		BlendWeights1 = 10,
		PrevPosition = 11,
		InstanceData = 12,
		BlendshapePosition = 13,
		BlendshapeNormal = 14,
		BlendshapeIndex = 15,
		Edge = 16,
		EdgeIndex = 17,
		EdgeIndexInfo = 18,
	};
	enum class eRasterizerVertexFormat : uint32_t {
		real = 0,
		realVector2D = 1,
		realVector3D = 2,
		realVector4D = 3,
		byteVector4D = 4,
		byteARGBColor = 5,
		shortVector2D = 6,
		shortVector2DNormalized = 7,
		shortVector4DNormalized = 8,
		wordVector2DNormalized = 9,
		wordVector4DNormalized = 10,
		real16Vector2D = 11,
		real16Vector4D = 12,
		_10_10_10_normalized = 13,
		_10_10_10_2 = 14,
		_10_10_10_2_signedNormalizedPackedAsUnorm = 15,
		dword = 16,
		dwordVector2D = 17,
		_11_11_10_float = 18,
		byteUnitVector3D = 19,
		wordVector3DNormalizedWith4Word = 20,
	};
	// ///////////////// //
	// STRUCT REFERENCES //
	// ///////////////// //
	struct StreamingChunkList {
		_s_data chunks;
	};
	struct BLASOfflineData {
		_s_data Temp_BLAS_buffer;
		int32_t PostbuildCurrentSize;
		int32_t PostbuildSerializedSize;
		uint32_t offset;
		uint8_t generated_pad707f[4];
		int64_t m_resource;
	};
	struct MeshPartRaytracingMetaData {
		uint32_t index_count;
		uint32_t index_offset;
		uint8_t geo_type;
		uint8_t generated_padf9a7[3];
	};
	struct D3DBufferData {
		uint32_t byte_width;
		uint32_t bind_flags;
		uint32_t misc_flags;
		uint32_t stride;
		_s_data d3d_buffer;
		uint16_t usage;
		uint16_t cpu_flags;
	};
	struct i343__LevelBreakdown__AssetVariantLevelBreakdownData {
		uint32_t Variant_name;
		_s_tagref Runtime_Geo;
		_s_tagref Static_Collision_Geo;
	};
	struct s_raw_water_append {
		_s_doublefloat base_texcoord;
	};
	struct GeometryNodeWeight {
		float node_weight;
	};
	struct vertex {
		_s_triplefloat point;
		int32_t first_edge;
		int16_t sink;
		uint8_t generated_pad06d3[2];
	};
	struct edge {
		int32_t start_vertex;
		int32_t end_vertex;
		int32_t forward_edge;
		int32_t reverse_edge;
		int32_t left_surface;
		int32_t right_surface;
	};
	struct large_collision_surface {
		int32_t plane_index;
		int32_t first_edge;
		int16_t material;
		SurfaceFlags flags;
		uint8_t best_plane_calculation_vertex_index_;
	};
	struct bsp2d_node {
		_s_triplefloat plane;
		int32_t left_child;
		int32_t right_child;
	};
	struct bsp2d_reference {
		int32_t plane;
		int32_t bsp2d_node;
	};
	struct leaf {
		LeafFlags flags;
		uint8_t generated_pad7ea5[1];
		int16_t bsp2d_reference_count;
		int32_t first_bsp2d_reference;
	};
	struct large_bsp3d_node {
		int32_t plane;
		int32_t back_child;
		int32_t front_child;
	};
	struct IResourceViewPointer {
		int64_t IResourceView;
	};
	struct StreamingGeometryBuffer {
		uint32_t buffer_size;
		uint32_t bind_flags;
		_s_data Temp_buffer_for_pipeline;
	};
	struct StreamingGeometryChunk {
		uint16_t buffer_index;
		uint16_t allocation_priority;
		uint32_t buffer_start;
		uint32_t buffer_end;
	};
	struct StreamingGeometryMesh {
		int32_t lod_state_cache_slot;
		int8_t required_lod;
		uint8_t generated_pad413f[3];
		_s_data lod_raytracing_meta_data;
		_s_tagblock<StreamingChunkList> mesh_lod_chunks;
	};
	struct RaytracingMetaData {
		uint16_t index_buffer_index;
		uint16_t vertex_buffer_index;
		eRasterizerVertexFormat vertex_format;
		VertexType vertex_type;
		uint8_t generated_pad35fb[3];
		_s_triplefloat decompression_Scale;
		_s_triplefloat decompression_Translation;
		_s_tagblock<MeshPartRaytracingMetaData> mesh_part_metadata;
		RaytracingMetaDataFlags meta_data_flags;
		uint8_t generated_pade946[6];
		BLASOfflineData blas_offline_data;
	};
	struct RasterizerIndexBuffer {
		uint8_t declaration_type;
		uint8_t stride;
		uint8_t ownsD3DResource;
		uint8_t generated_pad8bf7[1];
		uint32_t count;
		uint32_t offset;
		D3DBufferData d3dbuffer;
		int64_t m_resource;
		int64_t m_resourceView;
	};
	struct RasterizerVertexBuffer {
		eVertexBufferUsage usage;
		eRasterizerVertexFormat format;
		uint8_t stride;
		uint8_t ownsD3DResource;
		uint8_t generated_pad9e95[2];
		uint32_t count;
		uint32_t offset;
		D3DBufferData d3dbuffer;
		int64_t m_resource;
		int64_t m_resourceView;
	};
	struct i343__LevelBreakdown__RuntimeGeoLevelBreakdownData {
		_s_tagref Asset_tag;
		uint32_t Default_variant_name;
		_s_tagref LOD_settings_tag;
		uint32_t LOD_settings_name;
		int32_t Convert_Collision_to_Shadow_Geometry;
		_s_tagblock<i343__LevelBreakdown__AssetVariantLevelBreakdownData> Asset_variants;
	};
	struct RawTriangleEdgeIndexInfo {
		uint32_t triangle_and_edge_index_pos;
		uint32_t encoded_triangle_and_edge_size;
	};
	struct RawTensionEdge {
		uint32_t start_vertex_index;
		uint32_t end_vertex_index;
		float edge_rest_length;
	};
	struct RawBlendshapeVertex {
		_s_triplefloat position;
		_s_triplefloat normal;
		_s_argbfloat tension_and_ambient_occlusion;
		uint32_t target_Id;
	};
	struct WordIndex {
		uint16_t word;
	};
	struct DwordIndex {
		uint32_t dword;
	};
	struct s_raw_water_data {
		_s_tagblock<WordIndex> raw_water_indices;
		_s_tagblock<s_raw_water_append> raw_water_vertices;
	};
	struct GeometryNodeIndex {
		uint8_t node_index;
	};
	struct RawVertex {
		_s_triplefloat position;
		_s_doublefloat texcoord;
		_s_triplefloat normal;
		_s_triplefloat binormal;
		_s_triplefloat tangent;
		_s_doublefloat lightmap_texcoord;
		GeometryNodeIndex node_indices[8];
		GeometryNodeWeight node_weights[8];
		_s_triplefloat vertex_color;
		_s_doublefloat texcoord1;
		float dual_quat_weight;
		float vertex_alpha;
		_s_triplefloat tangent_UV2;
		_s_doublefloat texcoord2;
		_s_triplefloat tangent_UV3;
	};
	struct ErrorReportNodeWeight {
		float node_weight;
	};
	struct ErrorReportNodeIndex {
		uint8_t node_index;
	};
	struct s_bsp3d_kd_super_node {
		float plane_0;
		float plane_1;
		float plane_2;
		float plane_3;
		float plane_4;
		float plane_5;
		float plane_6;
		float plane_7;
		float plane_8;
		float plane_9;
		float plane10;
		float plane11;
		float plane12;
		float plane13;
		float plane14;
		int32_t plane_dimensions;
		int32_t child_index_0;
		int32_t child_index_1;
		int32_t child_index_2;
		int32_t child_index_3;
		int32_t child_index_4;
		int32_t child_index_5;
		int32_t child_index_6;
		int32_t child_index_7;
		int32_t child_index_8;
		int32_t child_index_9;
		int32_t child_index10;
		int32_t child_index11;
		int32_t child_index12;
		int32_t child_index13;
		int32_t child_index14;
		int32_t child_index15;
	};
	struct PlanesParams {
		_s_quadfloat plane;
	};
	struct collision_surface {
		uint16_t plane_index;
		uint16_t first_edge;
		int16_t material;
		SurfaceFlags flags;
		uint8_t best_plane_calculation_vertex_index_;
	};
	struct large_collision_bsp {
		_s_tagblock<large_bsp3d_node> bsp3d_nodes;
		_s_tagblock<s_bsp3d_kd_super_node> bsp3d_supernodes;
		_s_tagblock<PlanesParams> planes;
		_s_tagblock<leaf> leaves;
		_s_tagblock<bsp2d_reference> bsp2d_references;
		_s_tagblock<bsp2d_node> bsp2d_nodes;
		_s_tagblock<large_collision_surface> surfaces;
		_s_tagblock<edge> edges;
		_s_tagblock<vertex> vertices;
	};
	struct collision_leaf {
		LeafFlags flags;
		uint8_t generated_padd325[1];
		uint16_t bsp2d_reference_count;
		uint32_t first_bsp2d_reference;
	};
	struct collision_edge {
		uint16_t start_vertex;
		uint16_t end_vertex;
		uint16_t forward_edge;
		uint16_t reverse_edge;
		uint16_t left_surface;
		uint16_t right_surface;
	};
	struct collision_vertex {
		_s_triplefloat point;
		uint16_t first_edge;
		int16_t sink;
	};
	struct bsp3d_node {
		int64_t node_data_designator;
	};
	struct CollisionBspBlock {
		_s_tagblock<bsp3d_node> bsp3d_nodes;
		_s_tagblock<s_bsp3d_kd_super_node> bsp3d_supernodes;
		_s_tagblock<PlanesParams> planes;
		_s_tagblock<collision_leaf> leaves;
		_s_tagblock<bsp2d_reference> bsp2d_references;
		_s_tagblock<bsp2d_node> bsp2d_nodes;
		_s_tagblock<collision_surface> surfaces;
		_s_tagblock<collision_edge> edges;
		_s_tagblock<collision_vertex> vertices;
	};
	struct s_render_geometry_api_resource {
		_s_tagblock<RasterizerVertexBuffer> pc_vertex_buffers;
		_s_tagblock<RasterizerIndexBuffer> pc_index_buffers;
		_s_tagblock<RaytracingMetaData> raytracing_metadata;
		_s_tagblock<StreamingGeometryMesh> Streaming_Meshes;
		_s_tagblock<StreamingGeometryChunk> Streaming_Chunks;
		_s_tagblock<StreamingGeometryBuffer> Streaming_Buffers;
		int64_t m_sharedDXResources;
		int64_t m_sharedDXResourceRawView;
		IResourceViewPointer m_sharedDXResourceTypedViews[21];
		int64_t Runtime_Data;
	};
	struct PositioningNodeWeight {
		float node_weight;
	};
	struct LODRenderDataVertexBufferIndex {
		uint16_t vertex_buffer_index;
	};
	struct MaterialStreamingScale {
		int32_t material_index;
		float material_scale;
	};
	struct s_subpart {
		int32_t index_start;
		int32_t index_count;
		int16_t part_index;
		uint16_t budget_vertex_count;
	};
	struct s_part {
		int16_t material_index;
		int16_t transparent_sorting_index;
		int32_t index_start;
		int32_t index_count;
		int32_t perMeshPartConstantsOffset;
		uint8_t part_type;
		uint8_t generated_pad5c53[1];
		PartFlags part_flags;
		uint16_t budget_vertex_count;
		uint8_t generated_pad0f9e[2];
	};
	struct s_per_mesh_raw_data {
		_s_tagblock<RawVertex> raw_vertices;
		_s_tagblock<WordIndex> raw_indices;
		_s_tagblock<DwordIndex> raw_indices32;
		_s_tagblock<s_raw_water_data> raw_water_data;
		_s_tagblock<RawBlendshapeVertex> raw_blendshapes;
		_s_tagblock<DwordIndex> raw_blendshapes_indices;
		_s_tagblock<RawTensionEdge> raw_tension_edges;
		_s_tagblock<DwordIndex> raw_blendshapes_triangle_and_edge_Indices;
		_s_tagblock<RawTriangleEdgeIndexInfo> raw_blendshapes_triangle_and_edge_index_info;
		PerMeshRawDataFlags flags;
		_s_tagblock<i343__LevelBreakdown__RuntimeGeoLevelBreakdownData> level_breakdown_data;
	};
	struct error_report_point {
		_s_triplefloat position;
		ErrorReportNodeIndex node_indices[4];
		ErrorReportNodeWeight node_weights[4];
	};
	struct ErrorReportQuadPoint {
		error_report_point point;
	};
	struct ErrorReportTrianglePoint {
		error_report_point point;
	};
	struct ErrorReportLinePoint {
		error_report_point point;
	};
	struct StreamingBitmapScale {
		int32_t bitmap_index_in_bsp;
		float scale;
	};
	struct s_structure_bsp_resources {
		_s_tagblock<CollisionBspBlock> collision_bsp;
		_s_tagblock<large_collision_bsp> large_collision_bsp;
	};
	struct RenderGeometryDeformationParameter {
		uint32_t parameter_name;
		uint8_t parameter_mode;
		uint8_t generated_pad8065[3];
		float constant_input;
	};
	struct RenderGeometryMeshPackage__ResourceLookup {
		int16_t resource_group_index;
		int16_t group_item_index;
	};
	struct RenderGeometryMeshPackageResourceGroup {
		_s_resource<s_render_geometry_api_resource> mesh_resource;
	};
	struct s_positioning {
		_s_quadfloat plane;
		_s_triplefloat position;
		float radius;
		GeometryNodeIndex node_indices[8];
		PositioningNodeWeight node_weights[7];
	};
	struct NodeIndexStruct {
		uint16_t node_index;
	};
	struct MeshVertexKey {
		int32_t key1;
		int32_t key2;
	};
	struct LODRenderData {
		_s_tagblock<s_per_mesh_raw_data> per_mesh_temporary;
		_s_tagblock<s_positioning> part_sorting_position;
		_s_tagblock<s_part> parts;
		_s_tagblock<s_subpart> subparts;
		_s_tagblock<MaterialStreamingScale> material_streaming_scale;
		LODRenderDataVertexBufferIndex vertex_buffer_indices[19];
		uint16_t index_buffer_index;
		LODFlags lod_flags;
		LODRenderFlags lod_render_flags;
		uint16_t raytracing_metadata_index;
		uint8_t generated_paddaed[2];
	};
	struct geometry_material {
		_s_tagref material;
	};
	struct LODTransitionDistanceBlock {
		float lodTransitionDistance;
	};
	struct error_report_comment {
		_s_data text;
		error_report_point point;
		_s_argbfloat color;
	};
	struct error_report_quad {
		ErrorReportQuadPoint points[4];
		_s_argbfloat color;
	};
	struct error_report_triangle {
		ErrorReportTrianglePoint points[3];
		_s_argbfloat color;
	};
	struct error_report_line {
		ErrorReportLinePoint points[2];
		_s_argbfloat color;
	};
	struct error_report_vector {
		error_report_point point;
		_s_argbfloat color;
		_s_triplefloat normal;
		float screen_length;
	};
	struct error_report_vertex {
		error_report_point point;
		_s_argbfloat color;
		float screen_size;
	};
	struct MapLeafFaceVertex {
		_s_triplefloat vertex;
	};
	struct short_bsp2d_node {
		_s_triplefloat plane;
		int16_t left_child;
		int16_t right_child;
	};
	struct short_bsp2d_reference {
		int16_t plane;
		int16_t bsp2d_node;
	};
	struct InstanceIndex {
		int16_t instance_index;
	};
	struct i343__Decorators__DecoratorCluster {
		_s_triplefloat scale;
		float max_render_distance_squared;
		_s_triplefloat offset;
		_s_triplefloat Bounding_sphere_center;
		float Bounding_sphere_radius;
		_s_triplefloat Bounding_AABB_Min;
		_s_triplefloat Bounding_AABB_Max;
	};
	struct i343__Decorators__DecoratorSetPlacementRange {
		_s_tagref decorator_asset;
		int32_t offset;
		int32_t count;
		uint8_t set_type_index;
		uint8_t generated_pad961e[3];
	};
	struct s_decorator_placement {
		_s_triplefloat position;
		uint8_t type_index;
		uint8_t motion_scale;
		uint8_t ground_tint;
		s_decorator_placement__DecoratorPlacementFlags flags;
		_s_quadfloat rotation;
		float scale;
		_s_triplefloat tint_color;
		_s_triplefloat original_point;
		_s_triplefloat original_normal;
		int32_t extra;
		uint16_t placement_surface_albedo;
		uint16_t placement_surface_normal;
	};
	struct PerLodBitmaps {
		_s_tagblock<StreamingBitmapScale> StreamingBitmapScale_Block;
		int32_t StreamingBitmapScale_Block_Flags;
		int32_t StreamingBitmapScale_Block_Vector1;
		int32_t StreamingBitmapScale_Block_Vector2;
	};
	struct MaterialOverrideEntry {
		_s_tagref Original_material_ref;
		_s_tagref Override_material_ref;
	};
	struct PrefabLODOverrideArray {
		float LOD_Transition_Distance_Override;
	};
	struct StructureBspTagResources {
		s_structure_bsp_resources resource_items;
	};
	struct StructureBspRawResources {
		s_structure_bsp_resources raw_items;
	};
	struct DeformationParameterDefaultValue {
		uint32_t parameter_name;
		float parameter_default_value;
	};
	struct RenderGeometryProceduralRemapTable {
		_s_tagblock<WordIndex> Procedural_Remap_Table;
	};
	struct RenderGeometryProceduralDeformation {
		_s_tagblock<RenderGeometryDeformationParameter> parameter_list;
		uint32_t Procedural_deformation_function_name;
	};
	struct s_blendshape_compression_info {
		_s_triplefloat position_scale;
		_s_triplefloat position_offset;
		_s_triplefloat normal_scale;
		_s_triplefloat normal_offset;
		_s_tagblock<DwordIndex> raw_target_hash_name;
	};
	struct RenderGeometryMeshPackage {
		uint16_t flags;
		RenderGeometryMeshPackage__Policy mesh_resource_packing_policy;
		uint16_t total_index_buffer_count;
		uint16_t total_vertex_buffer_count;
		uint16_t total_raytracing_metadata_count;
		uint8_t generated_pad4c35[2];
		_s_tagblock<RenderGeometryMeshPackageResourceGroup> mesh_resource_groups;
		_s_tagblock<RenderGeometryMeshPackage__ResourceLookup> index_resource_look_up;
		_s_tagblock<RenderGeometryMeshPackage__ResourceLookup> vertex_resource_look_up;
		_s_tagblock<RenderGeometryMeshPackage__ResourceLookup> raytracing_resource_look_up;
	};
	struct s_render_geometry_lod_volume {
		_s_triplefloat position_bounds_0;
		_s_triplefloat position_bounds_1;
		_s_tagblock<s_positioning> position_data;
	};
	struct RenderGeometryAnimatedMeshRef {
		_s_tagref Animated_mesh_tag_reference;
		uint32_t Name;
	};
	struct s_per_mesh_node_map {
		_s_tagblock<NodeIndexStruct> node_map;
	};
	struct s_compression_info {
		CompressionFlags compression_flags;
		uint8_t generated_pad1711[2];
		_s_triplefloat position_bounds_0;
		_s_triplefloat position_bounds_1;
		_s_doublefloat texcoord_bounds_0;
		_s_doublefloat texcoord_bounds_1;
		_s_doublefloat texcoord_bounds2_0;
		_s_doublefloat texcoord_bounds2_1;
		_s_doublefloat texcoord_bounds3_0;
		_s_doublefloat texcoord_bounds3_1;
		float unused0;
		float unused1;
	};
	struct PCAMeshIndex {
		int32_t mesh_index;
	};
	struct s_mesh {
		_s_tagblock<LODRenderData> LOD_render_data;
		MeshFlags mesh_flags;
		uint8_t rigid_node_index;
		VertexType vertex_type;
		int8_t use_dual_quat;
		IndexBufferPrimitiveType index_buffer_type;
		int16_t pca_mesh_index;
		_s_tagblock<MeshVertexKey> vertex_keys;
		int16_t clone_index;
		int16_t optional_LOD_volume_index;
		int16_t Procedural_Deformation_Remap_Table;
		uint8_t generated_pad8fb3[2];
		int32_t lod_state_cache_slot;
	};
	struct MeshImportInfo {
		uint32_t CRC;
		_s_triplefloat position_bounds_0;
		_s_triplefloat position_bounds_1;
		_s_doublefloat texcoord_bounds_0;
		_s_doublefloat texcoord_bounds_1;
	};
	struct havokBodyIdArray {
		uint64_t havok_body_ID;
	};
	struct i343__Physics__InstancedPhysicsMaterial {
		int16_t per_instance_material_palette;
	};
	struct StructureInstanceMaterialOverrideData {
		_s_tagblock<geometry_material> per_Instance_Material_Block;
		int32_t per_Instance_Material_Flags;
		int32_t per_Instance_Material_Vector1;
		int32_t per_Instance_Material_Vector2;
		MeshFlags mesh_flags_override;
		uint8_t generated_pad58dd[2];
	};
	struct LODInfoOverrides {
		_s_tagblock<LODTransitionDistanceBlock> Lod_Levels_Block;
		int32_t Lod_Levels_Block_Flags;
		int32_t Lod_Levels_Block_Vector1;
		int32_t Lod_Levels_Block_Vector2;
		float lod_fade_after_Distance;
	};
	struct error_report {
		ErrorReportTypes type;
		e_error_report_source source;
		ErrorReportFlags flags;
		_s_data text;
		int32_t source_identifier;
		char source_filename[32];
		int32_t source_line_number;
		_s_tagblock<error_report_vertex> vertices;
		_s_tagblock<error_report_vector> vectors;
		_s_tagblock<error_report_line> lines;
		_s_tagblock<error_report_triangle> triangles;
		_s_tagblock<error_report_quad> quads;
		_s_tagblock<error_report_comment> comments;
		int32_t report_key;
		int32_t node_index;
		_s_floatrange bounds_x;
		_s_floatrange bounds_y;
		_s_floatrange bounds_z;
		_s_argbfloat color;
	};
	struct LeafConnectionVertex {
		_s_triplefloat vertex;
	};
	struct MapLeafConnectionIndex {
		int32_t connection_index;
	};
	struct map_leaf_face {
		int32_t node_index;
		_s_tagblock<MapLeafFaceVertex> vertices;
	};
	struct collision_bsp {
		_s_tagblock<bsp3d_node> bsp3d_nodes;
		_s_tagblock<s_bsp3d_kd_super_node> bsp3d_supernodes;
		_s_tagblock<PlanesParams> planes;
		_s_tagblock<collision_leaf> leaves;
		_s_tagblock<short_bsp2d_reference> bsp2d_references;
		_s_tagblock<short_bsp2d_node> bsp2d_nodes;
		_s_tagblock<collision_surface> surfaces;
		_s_tagblock<collision_edge> edges;
		_s_tagblock<collision_vertex> vertices;
	};
	struct s_instance_bucket {
		int32_t runtime_geo_mesh_index;
		_s_tagref runtime_geo_tag_reference;
		int32_t pad;
		_s_tagblock<InstanceIndex> instances_Data_Block;
		int32_t instances_Data_Block_Flags;
		int32_t instances_Data_Block_Vector1;
		int32_t instances_Data_Block_Vector2;
	};
	struct SeamIndicesBlockDefinition {
		int16_t seam_index;
	};
	struct StructureBSPClusterPortalIndex {
		int16_t portal_index;
	};
	struct cluster_portal__StructureBSPClusterPortalVertexBlock {
		_s_triplefloat point;
	};
	struct cluster_portal__s_oriented_bounds {
		_s_triplefloat center;
		_s_triplefloat extents;
		_s_quadfloat orientation;
	};
	struct StructureSuperNodeTraversalGeometryIndices {
		int16_t index;
	};
	struct s_structure_seam_cluster_mapping {
		int32_t cluster_index;
		_s_triplefloat cluster_center;
	};
	struct StructureSeamEdgeMapping {
		int32_t structure_edge_index;
	};
	struct s_structure_seam_identifier {
		int32_t seam_id0;
		int32_t seam_id1;
		int32_t seam_id2;
		int32_t seam_id3;
	};
	struct s_anyTagGuts {
		int32_t global_tag_ID;
		uint8_t local_tag_handle[4];
	};
	struct i343__Decorators__DecoratorRuntime {
		_s_tagblock<i343__Decorators__DecoratorSetPlacementRange> sets;
		_s_tagblock<i343__Decorators__DecoratorCluster> clusters;
		int32_t bspIndex;
		uint8_t generated_pad92da[4];
		int64_t decorator_runtime_gpu;
		int64_t decorator_runtime_cpu;
	};
	struct s_decorator_scenario_set_placements {
		_s_tagref decorator_asset;
		_s_tagblock<s_decorator_placement> decorator_placements;
		_s_tagref owning_layer_default_bsp;
	};
	struct BspUniqueStreamingIO {
		_s_tagblock<PerLodBitmaps> PerLodBitmaps_Block;
		int32_t PerLodBitmaps_Block_Flags;
		int32_t PerLodBitmaps_Block_Vector1;
		int32_t PerLodBitmaps_Block_Vector2;
		int16_t io_index;
		uint8_t generated_pad5360[2];
	};
	struct BspBitmapReference {
		_s_tagref bitmap;
	};
	struct BspStructureBitfieldStorageType {
		uint32_t chunk;
	};
	struct GpuVisibilityBitfield {
		int64_t Bsp_Structure_Bitfield_Buffer;
		BspStructureBitfieldStorageType CPU_Bsp_Structure__Bitfield[1024];
	};
	struct s_structure_bsp_obb_volume {
		_s_triplefloat origin;
		_s_triplefloat axis_1;
		_s_triplefloat axis_2;
		_s_triplefloat axis_3;
		uint32_t type;
	};
	struct structure_external_instanced_geometry_reference {
		_s_tagref static_render_geometry;
		_s_tagref static_collision_geometry;
		_s_tagref material_palette;
		uint32_t name;
		uint32_t material_override_variant_name;
		_s_triplefloat scale;
		_s_triplefloat forward;
		_s_triplefloat left;
		_s_triplefloat up;
		_s_triplefloat position;
		InstancedGeometryFlags override_flags;
		InstancedGeometryFlags instance_flags_Mask;
		i343__Physics__InstancedPhysicsFlags physics_override_flags;
		i343__Physics__InstancedPhysicsFlags physics_instance_flags_Mask;
		InstancedGeometryPathfindingPolicy override_pathfinding_policy;
		InstancedGeometryStreamingPriority override_streaming_priority;
		PrefabOverrideFlags instance_policy_mask;
		uint8_t generated_pad81ce[2];
		PrefabLODOverrideArray LOD_distance_overrides[16];
		float LOD_fade_after_override;
		StaticGeoType instance_type;
		int32_t guid;
		uint32_t hlodIndex;
		PlacementFlagsDefinition placementFlags;
		uint8_t generated_padce83[2];
		uint32_t styleId;
		uint8_t generated_pad1b38[4];
		int64_t styleTagOverride;
		i343__Physics__TriggerVolumeCallbackType Trigger_Volume_Callback;
		uint8_t generated_pad0245[3];
		uint32_t bullet_collision_layer_override;
		uint32_t play_collision_layer_override;
		uint8_t generated_pad4efa[4];
		_s_tagblock<MaterialOverrideEntry> instance_material_overrides;
		_s_tagblock<MaterialOverrideEntry> material_overrides;
	};
	struct c_structure_bsp_resource_interface {
		_s_tagblock<StructureBspRawResources> raw_resources;
		_s_resource<StructureBspTagResources> tag_resources;
		int32_t use_resource_items;
	};
	struct s_widget_marker_reference {
		int16_t marker_index;
		uint8_t generated_pad3469[2];
		_s_tagref widget_ref;
	};
	struct s_render_geometry {
		RenderGeometryFlags runtime_flags;
		_s_tagblock<MeshImportInfo> meshes_import_info;
		_s_tagblock<s_mesh> meshes;
		_s_tagblock<PCAMeshIndex> PCA_Mesh_Indices;
		_s_tagblock<s_compression_info> compression_info;
		_s_tagblock<s_per_mesh_node_map> per_mesh_node_map;
		_s_tagblock<RenderGeometryAnimatedMeshRef> Optional_animated_mesh_tag_references;
		_s_tagblock<s_render_geometry_lod_volume> Optional_LOD_volumes_data;
		RenderGeometryMeshPackage mesh_package;
		_s_tagblock<s_blendshape_compression_info> blendshape_compression_info;
		_s_tagblock<RenderGeometryProceduralDeformation> blendshape_Procedural_Deformation_function_list;
		_s_tagblock<RenderGeometryProceduralRemapTable> Procedural_Deformation_function_Remap_Table_List;
		_s_tagblock<DeformationParameterDefaultValue> Deformation_parameter_default_value_table_from_skeleton;
		uint8_t generated_paddf2d[4];
		int64_t perMeshPartConstantBuffer;
		int8_t target_platformization;
		uint8_t generated_padc54c[7];
	};
	struct i343__Physics__InstancedPhysicsInstance {
		_s_tagref m_collisionTagReference;
		_s_tagblock<i343__Physics__InstancedPhysicsMaterial> instanced_physics_instances;
		int32_t instanced_physics_instances_Flags;
		int32_t instanced_physics_instances_Vector1;
		int32_t instanced_physics_instances_Vector2;
		_s_triplefloat Scale;
		_s_triplefloat Forward;
		_s_triplefloat Left;
		_s_triplefloat Up;
		_s_triplefloat Position;
		CollisionTypeEnableBitmask m_typeMask;
		int32_t m_guid;
		havokBodyIdArray havok_body_ID_array[4];
		i343__Physics__InstancedPhysicsFlags flags;
		uint8_t generated_pad119d[7];
		int64_t m_scene;
		i343__Physics__TriggerVolumeCallbackType Trigger_Volume_Callback_Type;
		uint8_t generated_padf7bc[3];
		uint32_t bullet_collision_layer_override;
		uint32_t play_collision_layer_override;
		uint8_t generated_padab07[4];
	};
	struct structure_instanced_geometry_instance {
		_s_triplefloat scale;
		_s_triplefloat forward;
		_s_triplefloat left;
		_s_triplefloat up;
		_s_triplefloat position;
		_s_tagref Runtime_geo_mesh_reference;
		_s_tagref Foliage_material_palette_reference;
		int16_t Runtime_geo_mesh_index;
		int16_t unique_io_index;
		InstancedGeometryFlags flags;
		uint8_t generated_pad89b2[2];
		float bounds_x0;
		float bounds_x1;
		float bounds_y0;
		float bounds_y1;
		float bounds_z0;
		float bounds_z1;
		_s_triplefloat world_bounding_sphere_center;
		float world_bounding_sphere_radius;
		uint8_t generated_padd667[4];
		int64_t Placement_Checksum;
		InstancedGeometryPathfindingPolicy pathfinding_policy;
		InstancedGeometryStreamingPriority streaming_priority;
		InstancedGeometryGfxFlags flags2;
		uint16_t hlod_index;
		uint8_t generated_pad231c[2];
		LODInfoOverrides lod_Overrides;
		uint32_t style_id;
		int32_t damage_style_index;
		uint8_t generated_pad6fd1[4];
		int64_t style_tag_override_data;
		StructureInstanceMaterialOverrideData material_override_data;
		_s_triplefloat rectMin;
		_s_triplefloat rectMax;
		int32_t external_guid;
		int64_t coating_entry;
		int64_t editorData;
	};
	struct error_report_category {
		char name[256];
		ErrorReportTypes report_type;
		uint8_t generated_padf276[1];
		ErrorReportFlags flags;
		uint16_t runtime_generation_flags;
		uint8_t generated_pad3f2b[2];
		int32_t runtime_something;
		_s_tagblock<error_report> reports;
	};
	struct leaf_connection {
		int32_t plane_index;
		int32_t back_leaf_index;
		int32_t front_leaf_index;
		_s_tagblock<LeafConnectionVertex> vertices;
		float area;
	};
	struct map_leaf {
		_s_tagblock<map_leaf_face> faces;
		_s_tagblock<MapLeafConnectionIndex> connection_indices;
	};
	struct structure_marker {
		e_structure_marker_type marker_type;
		char marker_parameter[32];
		uint8_t generated_padbec6[3];
		_s_quadfloat rotation;
		_s_triplefloat position;
	};
	struct s_structure_cookie_cutter {
		collision_bsp collision_model;
	};
	struct structure_cluster {
		_s_floatrange bounds_x;
		_s_floatrange bounds_y;
		_s_floatrange bounds_z;
		_s_tagblock<StructureBSPClusterPortalIndex> portals;
		int16_t mesh_index;
		int16_t instance_imposter_cluster_mopp_index;
		_s_tagblock<SeamIndicesBlockDefinition> seam_indices;
		_s_tagblock<s_instance_bucket> instance_Buckets_Block;
		int32_t instance_Buckets_Flags;
		int32_t instance_Buckets_Vector1;
		int32_t instance_Buckets_Vector2;
	};
	struct cluster_portal {
		cluster_portal__s_oriented_bounds oriented_bounds;
		int16_t back_cluster;
		int16_t front_cluster;
		int32_t plane_index;
		_s_triplefloat centroid;
		float bounding_radius;
		ClusterPortalFlags flags;
		_s_tagblock<cluster_portal__StructureBSPClusterPortalVertexBlock> vertices;
	};
	struct s_structure_super_node_traversal_geometry {
		_s_tagblock<StructureSuperNodeTraversalGeometryIndices> portal_indices;
		_s_tagblock<StructureSuperNodeTraversalGeometryIndices> seam_indices;
	};
	struct SuperNodeRecursableMasks {
		uint16_t mask;
	};
	struct s_structure_super_node_mapping {
		int16_t parent_super_node_index;
		int8_t parent_internal_node_index;
		s_structure_super_node_mapping__t_flags flags;
		int32_t has_traversal_geometry_mask;
		int16_t first_traversal_geometry_index;
		int16_t first_aabb_index;
		int32_t aabb_mask;
		int16_t non_terminal_traversal_geometry_index;
		uint8_t generated_pad5df5[2];
	};
	struct structure_leaf {
		uint8_t cluster;
	};
	struct structure_collision_material {
		int16_t conveyor_surface_index;
		int16_t seam_mapping_index;
		structure_collision_material__c_flags flags;
	};
	struct s_structure_seam_mapping {
		s_structure_seam_identifier seams_identifier;
		_s_tagblock<StructureSeamEdgeMapping> edge_mapping;
		_s_tagblock<s_structure_seam_cluster_mapping> cluster_mapping;
	};
	struct s_structure_manifest_build_identifier_definition {
		int32_t manifest_id0;
		int32_t manifest_id1;
		int32_t manifest_id2;
		int32_t manifest_id3;
		int32_t build_index;
		int32_t structure_importer_version;
	};
	struct AnyTag_struct_definition {
		int64_t vtable_space;
		s_anyTagGuts internal_struct;
	};
	struct structure_bsp {
		AnyTag_struct_definition AnyTag;
		s_structure_manifest_build_identifier_definition build_identifier;
		s_structure_manifest_build_identifier_definition parent_build_identifier;
		int32_t import_info_checksum;
		int32_t import_version;
		_s_tagref owner_level;
		_s_tagref structure_meta_data;
		StructureBspFlags flags;
		c_structure_bsp_content_policy_flags content_policy_flags;
		c_structure_bsp_content_policy_flags failed_content_policy_flags;
		uint8_t generated_pad7169[2];
		_s_tagblock<s_structure_seam_mapping> seam_identifiers;
		_s_tagblock<structure_collision_material> collision_materials;
		_s_tagblock<structure_leaf> leaves;
		_s_tagblock<s_structure_super_node_mapping> super_node_parent_mappings;
		_s_tagblock<SuperNodeRecursableMasks> super_node_recursable_masks;
		_s_tagblock<s_structure_super_node_traversal_geometry> structure_super_node_traversal_geometry_block;
		_s_floatrange world_bounds_x;
		_s_floatrange world_bounds_y;
		_s_floatrange world_bounds_z;
		_s_tagblock<cluster_portal> cluster_portals;
		_s_tagblock<structure_cluster> clusters;
		_s_tagblock<s_structure_cookie_cutter> cookie_cutters;
		_s_tagblock<structure_marker> markers;
		_s_tagblock<map_leaf> leaf_map_leaves;
		_s_tagblock<leaf_connection> leaf_map_connections;
		_s_tagblock<error_report_category> errors;
		_s_tagblock<structure_instanced_geometry_instance> instanced_geometry_instances;
		int32_t instanced_geometry_instances_Flags;
		int32_t instanced_geometry_instances_Vector1;
		int32_t instanced_geometry_instances_Vector2;
		_s_tagblock<structure_instanced_geometry_instance> instanced_foliage_instances;
		int32_t instanced_foliage_instances_Flags;
		int32_t instanced_foliage_instances_Vector1;
		int32_t instanced_foliage_instances_Vector2;
		_s_tagblock<i343__Physics__InstancedPhysicsInstance> instanced_physics_instances;
		int32_t instanced_physics_instances_Flags;
		int32_t instanced_physics_instances_Vector1;
		int32_t instanced_physics_instances_Vector2;
		int32_t Instance_Geometry_Tag_Instance_Count;
		int64_t Instance_Postprocess_Checksum;
		s_render_geometry render_geometry;
		_s_tagblock<s_widget_marker_reference> widget_references;
		c_structure_bsp_resource_interface resource_interface;
		_s_tagblock<structure_external_instanced_geometry_reference> external_references;
		int32_t base_material_count;
		_s_tagblock<s_structure_bsp_obb_volume> obb_volume_list;
		int64_t m_instanceGroupPipelineStateCache;
		_s_data growable_dataof;
		int64_t heap_array_pointer;
		int32_t heap_current_size;
		int32_t active_growth_state;
		int64_t instanceData;
		int64_t instanceBufferConstants;
		int64_t ioPlacementGpuTestingBuffer;
		int64_t ioLodStaticInfoBuffer;
		int64_t ioLodIndexBuffer;
		int64_t ioLodTransitionsOffsets;
		GpuVisibilityBitfield activeIoBitfield;
		int64_t newlyVisibleIoBitfieldBuffer;
		int64_t ioPlacementLodInfoBuffer;
		_s_tagref acoustics_data;
		int32_t number_of_IO_over_the_limit;
		int32_t needToClearShadowSubmissionsBuffers;
		uint8_t generated_pad5788[4];
		int64_t gpuFloatingShadowSubmissionData;
		int64_t BSPRuntimeData;
		int64_t View_GPU_Submission_Data;
		BspStructureBitfieldStorageType Instances_with_non_Gpu_submission_parts[1024];
		int64_t Raytracing_Submission_Data;
		_s_tagblock<BspBitmapReference> bitmaps;
		int32_t bitmaps_Flags;
		int32_t bitmaps_Vector1;
		int32_t bitmaps_Vector2;
		_s_tagblock<BspUniqueStreamingIO> uniqueIos;
		int32_t uniqueIos_Flags;
		int32_t uniqueIos_Vector1;
		int32_t uniqueIos_Vector2;
		_s_tagblock<BspUniqueStreamingIO> uniqueFoliage;
		int32_t uniqueFoliage_Flags;
		int32_t uniqueFoliage_Vector1;
		int32_t uniqueFoliage_Vector2;
		_s_tagblock<s_decorator_scenario_set_placements> decorator_sets;
		_s_tagblock<i343__Decorators__DecoratorRuntime> decorator_runtime;
		StructureBspRenderFlags render_flags;
		uint8_t generated_pad0ad3[7];
	};
}
#pragma pack(pop)
